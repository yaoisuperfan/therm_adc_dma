
therm_adc_dma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001197c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003304  08011c20  08011c20  00021c20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014f24  08014f24  00024f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08014f2c  08014f2c  00024f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08014f30  08014f30  00024f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e8  24000000  08014f34  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  240001e8  0801511c  000301e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000248  0801517c  00030248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000047b4  240002a8  080151dc  000302a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24004a5c  080151dc  00034a5c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000302a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000218e9  00000000  00000000  000302d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037af  00000000  00000000  00051bbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015d0  00000000  00000000  00055370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001418  00000000  00000000  00056940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003b386  00000000  00000000  00057d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f1f9  00000000  00000000  000930de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00177501  00000000  00000000  000b22d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002297d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006fac  00000000  00000000  00229828  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002a8 	.word	0x240002a8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08011c04 	.word	0x08011c04

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002ac 	.word	0x240002ac
 80002dc:	08011c04 	.word	0x08011c04

080002e0 <arm_bitreversal_32>:
	ENDP

#else

arm_bitreversal_32 PROC
	ADDS     r3,r1,#1
 80002e0:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 80002e2:	2b01      	cmp	r3, #1
	IT       LS
 80002e4:	bf98      	it	ls
	BXLS     lr
 80002e6:	4770      	bxls	lr
	PUSH     {r4-r9}
 80002e8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 80002ec:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 80002ee:	089b      	lsrs	r3, r3, #2

080002f0 <arm_bitreversal_32_0>:
arm_bitreversal_32_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 80002f0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 80002f4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 80002f8:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 80002fa:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8
 80002fe:	4480      	add	r8, r0
	ADD      r9,r0,r9
 8000300:	4481      	add	r9, r0
	ADD      r2,r0,r2
 8000302:	4402      	add	r2, r0
	ADD      r12,r0,r12
 8000304:	4484      	add	ip, r0
	LDR      r7,[r9,#0]
 8000306:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 800030a:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 800030e:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8000310:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8000314:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 8000318:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 800031c:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8000320:	6014      	str	r4, [r2, #0]
	LDR      r7,[r9,#4]
 8000322:	f8d9 7004 	ldr.w	r7, [r9, #4]
	LDR      r6,[r8,#4]
 8000326:	f8d8 6004 	ldr.w	r6, [r8, #4]
	LDR      r5,[r2,#4]
 800032a:	6855      	ldr	r5, [r2, #4]
	LDR      r4,[r12,#4]
 800032c:	f8dc 4004 	ldr.w	r4, [ip, #4]
	STR      r6,[r9,#4]
 8000330:	f8c9 6004 	str.w	r6, [r9, #4]
	STR      r7,[r8,#4]
 8000334:	f8c8 7004 	str.w	r7, [r8, #4]
	STR      r5,[r12,#4]
 8000338:	f8cc 5004 	str.w	r5, [ip, #4]
	STR      r4,[r2,#4]
 800033c:	6054      	str	r4, [r2, #4]
	ADDS     r1,r1,#8
 800033e:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 8000340:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_32_0
 8000342:	d1d5      	bne.n	80002f0 <arm_bitreversal_32_0>
	POP      {r4-r9}
 8000344:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 8000348:	4770      	bx	lr

0800034a <arm_bitreversal_16>:
	ENDP

arm_bitreversal_16 PROC
	ADDS     r3,r1,#1
 800034a:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 800034c:	2b01      	cmp	r3, #1
	IT       LS
 800034e:	bf98      	it	ls
	BXLS     lr
 8000350:	4770      	bxls	lr
	PUSH     {r4-r9}
 8000352:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 8000356:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 8000358:	089b      	lsrs	r3, r3, #2

0800035a <arm_bitreversal_16_0>:
arm_bitreversal_16_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 800035a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 800035e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 8000362:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 8000364:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8,LSR #1
 8000368:	eb00 0858 	add.w	r8, r0, r8, lsr #1
	ADD      r9,r0,r9,LSR #1
 800036c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
	ADD      r2,r0,r2,LSR #1
 8000370:	eb00 0252 	add.w	r2, r0, r2, lsr #1
	ADD      r12,r0,r12,LSR #1
 8000374:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
	LDR      r7,[r9,#0]
 8000378:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 800037c:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 8000380:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8000382:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8000386:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 800038a:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 800038e:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8000392:	6014      	str	r4, [r2, #0]
	ADDS     r1,r1,#8
 8000394:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 8000396:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_16_0
 8000398:	d1df      	bne.n	800035a <arm_bitreversal_16_0>
	POP      {r4-r9}
 800039a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 800039e:	4770      	bx	lr

080003a0 <strlen>:
 80003a0:	4603      	mov	r3, r0
 80003a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	d1fb      	bne.n	80003a2 <strlen+0x2>
 80003aa:	1a18      	subs	r0, r3, r0
 80003ac:	3801      	subs	r0, #1
 80003ae:	4770      	bx	lr

080003b0 <memchr>:
 80003b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80003b4:	2a10      	cmp	r2, #16
 80003b6:	db2b      	blt.n	8000410 <memchr+0x60>
 80003b8:	f010 0f07 	tst.w	r0, #7
 80003bc:	d008      	beq.n	80003d0 <memchr+0x20>
 80003be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003c2:	3a01      	subs	r2, #1
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d02d      	beq.n	8000424 <memchr+0x74>
 80003c8:	f010 0f07 	tst.w	r0, #7
 80003cc:	b342      	cbz	r2, 8000420 <memchr+0x70>
 80003ce:	d1f6      	bne.n	80003be <memchr+0xe>
 80003d0:	b4f0      	push	{r4, r5, r6, r7}
 80003d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80003d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80003da:	f022 0407 	bic.w	r4, r2, #7
 80003de:	f07f 0700 	mvns.w	r7, #0
 80003e2:	2300      	movs	r3, #0
 80003e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80003e8:	3c08      	subs	r4, #8
 80003ea:	ea85 0501 	eor.w	r5, r5, r1
 80003ee:	ea86 0601 	eor.w	r6, r6, r1
 80003f2:	fa85 f547 	uadd8	r5, r5, r7
 80003f6:	faa3 f587 	sel	r5, r3, r7
 80003fa:	fa86 f647 	uadd8	r6, r6, r7
 80003fe:	faa5 f687 	sel	r6, r5, r7
 8000402:	b98e      	cbnz	r6, 8000428 <memchr+0x78>
 8000404:	d1ee      	bne.n	80003e4 <memchr+0x34>
 8000406:	bcf0      	pop	{r4, r5, r6, r7}
 8000408:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800040c:	f002 0207 	and.w	r2, r2, #7
 8000410:	b132      	cbz	r2, 8000420 <memchr+0x70>
 8000412:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000416:	3a01      	subs	r2, #1
 8000418:	ea83 0301 	eor.w	r3, r3, r1
 800041c:	b113      	cbz	r3, 8000424 <memchr+0x74>
 800041e:	d1f8      	bne.n	8000412 <memchr+0x62>
 8000420:	2000      	movs	r0, #0
 8000422:	4770      	bx	lr
 8000424:	3801      	subs	r0, #1
 8000426:	4770      	bx	lr
 8000428:	2d00      	cmp	r5, #0
 800042a:	bf06      	itte	eq
 800042c:	4635      	moveq	r5, r6
 800042e:	3803      	subeq	r0, #3
 8000430:	3807      	subne	r0, #7
 8000432:	f015 0f01 	tst.w	r5, #1
 8000436:	d107      	bne.n	8000448 <memchr+0x98>
 8000438:	3001      	adds	r0, #1
 800043a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800043e:	bf02      	ittt	eq
 8000440:	3001      	addeq	r0, #1
 8000442:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000446:	3001      	addeq	r0, #1
 8000448:	bcf0      	pop	{r4, r5, r6, r7}
 800044a:	3801      	subs	r0, #1
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop

08000450 <__aeabi_drsub>:
 8000450:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000454:	e002      	b.n	800045c <__adddf3>
 8000456:	bf00      	nop

08000458 <__aeabi_dsub>:
 8000458:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800045c <__adddf3>:
 800045c:	b530      	push	{r4, r5, lr}
 800045e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000462:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000466:	ea94 0f05 	teq	r4, r5
 800046a:	bf08      	it	eq
 800046c:	ea90 0f02 	teqeq	r0, r2
 8000470:	bf1f      	itttt	ne
 8000472:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000476:	ea55 0c02 	orrsne.w	ip, r5, r2
 800047a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800047e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000482:	f000 80e2 	beq.w	800064a <__adddf3+0x1ee>
 8000486:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800048a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800048e:	bfb8      	it	lt
 8000490:	426d      	neglt	r5, r5
 8000492:	dd0c      	ble.n	80004ae <__adddf3+0x52>
 8000494:	442c      	add	r4, r5
 8000496:	ea80 0202 	eor.w	r2, r0, r2
 800049a:	ea81 0303 	eor.w	r3, r1, r3
 800049e:	ea82 0000 	eor.w	r0, r2, r0
 80004a2:	ea83 0101 	eor.w	r1, r3, r1
 80004a6:	ea80 0202 	eor.w	r2, r0, r2
 80004aa:	ea81 0303 	eor.w	r3, r1, r3
 80004ae:	2d36      	cmp	r5, #54	; 0x36
 80004b0:	bf88      	it	hi
 80004b2:	bd30      	pophi	{r4, r5, pc}
 80004b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004c4:	d002      	beq.n	80004cc <__adddf3+0x70>
 80004c6:	4240      	negs	r0, r0
 80004c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004d8:	d002      	beq.n	80004e0 <__adddf3+0x84>
 80004da:	4252      	negs	r2, r2
 80004dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004e0:	ea94 0f05 	teq	r4, r5
 80004e4:	f000 80a7 	beq.w	8000636 <__adddf3+0x1da>
 80004e8:	f1a4 0401 	sub.w	r4, r4, #1
 80004ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80004f0:	db0d      	blt.n	800050e <__adddf3+0xb2>
 80004f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004f6:	fa22 f205 	lsr.w	r2, r2, r5
 80004fa:	1880      	adds	r0, r0, r2
 80004fc:	f141 0100 	adc.w	r1, r1, #0
 8000500:	fa03 f20e 	lsl.w	r2, r3, lr
 8000504:	1880      	adds	r0, r0, r2
 8000506:	fa43 f305 	asr.w	r3, r3, r5
 800050a:	4159      	adcs	r1, r3
 800050c:	e00e      	b.n	800052c <__adddf3+0xd0>
 800050e:	f1a5 0520 	sub.w	r5, r5, #32
 8000512:	f10e 0e20 	add.w	lr, lr, #32
 8000516:	2a01      	cmp	r2, #1
 8000518:	fa03 fc0e 	lsl.w	ip, r3, lr
 800051c:	bf28      	it	cs
 800051e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	18c0      	adds	r0, r0, r3
 8000528:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800052c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000530:	d507      	bpl.n	8000542 <__adddf3+0xe6>
 8000532:	f04f 0e00 	mov.w	lr, #0
 8000536:	f1dc 0c00 	rsbs	ip, ip, #0
 800053a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800053e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000542:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000546:	d31b      	bcc.n	8000580 <__adddf3+0x124>
 8000548:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800054c:	d30c      	bcc.n	8000568 <__adddf3+0x10c>
 800054e:	0849      	lsrs	r1, r1, #1
 8000550:	ea5f 0030 	movs.w	r0, r0, rrx
 8000554:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000558:	f104 0401 	add.w	r4, r4, #1
 800055c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000560:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000564:	f080 809a 	bcs.w	800069c <__adddf3+0x240>
 8000568:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	ea41 0105 	orr.w	r1, r1, r5
 800057e:	bd30      	pop	{r4, r5, pc}
 8000580:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000584:	4140      	adcs	r0, r0
 8000586:	eb41 0101 	adc.w	r1, r1, r1
 800058a:	3c01      	subs	r4, #1
 800058c:	bf28      	it	cs
 800058e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000592:	d2e9      	bcs.n	8000568 <__adddf3+0x10c>
 8000594:	f091 0f00 	teq	r1, #0
 8000598:	bf04      	itt	eq
 800059a:	4601      	moveq	r1, r0
 800059c:	2000      	moveq	r0, #0
 800059e:	fab1 f381 	clz	r3, r1
 80005a2:	bf08      	it	eq
 80005a4:	3320      	addeq	r3, #32
 80005a6:	f1a3 030b 	sub.w	r3, r3, #11
 80005aa:	f1b3 0220 	subs.w	r2, r3, #32
 80005ae:	da0c      	bge.n	80005ca <__adddf3+0x16e>
 80005b0:	320c      	adds	r2, #12
 80005b2:	dd08      	ble.n	80005c6 <__adddf3+0x16a>
 80005b4:	f102 0c14 	add.w	ip, r2, #20
 80005b8:	f1c2 020c 	rsb	r2, r2, #12
 80005bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80005c0:	fa21 f102 	lsr.w	r1, r1, r2
 80005c4:	e00c      	b.n	80005e0 <__adddf3+0x184>
 80005c6:	f102 0214 	add.w	r2, r2, #20
 80005ca:	bfd8      	it	le
 80005cc:	f1c2 0c20 	rsble	ip, r2, #32
 80005d0:	fa01 f102 	lsl.w	r1, r1, r2
 80005d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005d8:	bfdc      	itt	le
 80005da:	ea41 010c 	orrle.w	r1, r1, ip
 80005de:	4090      	lslle	r0, r2
 80005e0:	1ae4      	subs	r4, r4, r3
 80005e2:	bfa2      	ittt	ge
 80005e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005e8:	4329      	orrge	r1, r5
 80005ea:	bd30      	popge	{r4, r5, pc}
 80005ec:	ea6f 0404 	mvn.w	r4, r4
 80005f0:	3c1f      	subs	r4, #31
 80005f2:	da1c      	bge.n	800062e <__adddf3+0x1d2>
 80005f4:	340c      	adds	r4, #12
 80005f6:	dc0e      	bgt.n	8000616 <__adddf3+0x1ba>
 80005f8:	f104 0414 	add.w	r4, r4, #20
 80005fc:	f1c4 0220 	rsb	r2, r4, #32
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f302 	lsl.w	r3, r1, r2
 8000608:	ea40 0003 	orr.w	r0, r0, r3
 800060c:	fa21 f304 	lsr.w	r3, r1, r4
 8000610:	ea45 0103 	orr.w	r1, r5, r3
 8000614:	bd30      	pop	{r4, r5, pc}
 8000616:	f1c4 040c 	rsb	r4, r4, #12
 800061a:	f1c4 0220 	rsb	r2, r4, #32
 800061e:	fa20 f002 	lsr.w	r0, r0, r2
 8000622:	fa01 f304 	lsl.w	r3, r1, r4
 8000626:	ea40 0003 	orr.w	r0, r0, r3
 800062a:	4629      	mov	r1, r5
 800062c:	bd30      	pop	{r4, r5, pc}
 800062e:	fa21 f004 	lsr.w	r0, r1, r4
 8000632:	4629      	mov	r1, r5
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	f094 0f00 	teq	r4, #0
 800063a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800063e:	bf06      	itte	eq
 8000640:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000644:	3401      	addeq	r4, #1
 8000646:	3d01      	subne	r5, #1
 8000648:	e74e      	b.n	80004e8 <__adddf3+0x8c>
 800064a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800064e:	bf18      	it	ne
 8000650:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000654:	d029      	beq.n	80006aa <__adddf3+0x24e>
 8000656:	ea94 0f05 	teq	r4, r5
 800065a:	bf08      	it	eq
 800065c:	ea90 0f02 	teqeq	r0, r2
 8000660:	d005      	beq.n	800066e <__adddf3+0x212>
 8000662:	ea54 0c00 	orrs.w	ip, r4, r0
 8000666:	bf04      	itt	eq
 8000668:	4619      	moveq	r1, r3
 800066a:	4610      	moveq	r0, r2
 800066c:	bd30      	pop	{r4, r5, pc}
 800066e:	ea91 0f03 	teq	r1, r3
 8000672:	bf1e      	ittt	ne
 8000674:	2100      	movne	r1, #0
 8000676:	2000      	movne	r0, #0
 8000678:	bd30      	popne	{r4, r5, pc}
 800067a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800067e:	d105      	bne.n	800068c <__adddf3+0x230>
 8000680:	0040      	lsls	r0, r0, #1
 8000682:	4149      	adcs	r1, r1
 8000684:	bf28      	it	cs
 8000686:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800068a:	bd30      	pop	{r4, r5, pc}
 800068c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000690:	bf3c      	itt	cc
 8000692:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000696:	bd30      	popcc	{r4, r5, pc}
 8000698:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800069c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006a4:	f04f 0000 	mov.w	r0, #0
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ae:	bf1a      	itte	ne
 80006b0:	4619      	movne	r1, r3
 80006b2:	4610      	movne	r0, r2
 80006b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006b8:	bf1c      	itt	ne
 80006ba:	460b      	movne	r3, r1
 80006bc:	4602      	movne	r2, r0
 80006be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006c2:	bf06      	itte	eq
 80006c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006c8:	ea91 0f03 	teqeq	r1, r3
 80006cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	bf00      	nop

080006d4 <__aeabi_ui2d>:
 80006d4:	f090 0f00 	teq	r0, #0
 80006d8:	bf04      	itt	eq
 80006da:	2100      	moveq	r1, #0
 80006dc:	4770      	bxeq	lr
 80006de:	b530      	push	{r4, r5, lr}
 80006e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e8:	f04f 0500 	mov.w	r5, #0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e750      	b.n	8000594 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_i2d>:
 80006f4:	f090 0f00 	teq	r0, #0
 80006f8:	bf04      	itt	eq
 80006fa:	2100      	moveq	r1, #0
 80006fc:	4770      	bxeq	lr
 80006fe:	b530      	push	{r4, r5, lr}
 8000700:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000704:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000708:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800070c:	bf48      	it	mi
 800070e:	4240      	negmi	r0, r0
 8000710:	f04f 0100 	mov.w	r1, #0
 8000714:	e73e      	b.n	8000594 <__adddf3+0x138>
 8000716:	bf00      	nop

08000718 <__aeabi_f2d>:
 8000718:	0042      	lsls	r2, r0, #1
 800071a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800071e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000722:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000726:	bf1f      	itttt	ne
 8000728:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800072c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000730:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000734:	4770      	bxne	lr
 8000736:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800073a:	bf08      	it	eq
 800073c:	4770      	bxeq	lr
 800073e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000742:	bf04      	itt	eq
 8000744:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000748:	4770      	bxeq	lr
 800074a:	b530      	push	{r4, r5, lr}
 800074c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000750:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000754:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000758:	e71c      	b.n	8000594 <__adddf3+0x138>
 800075a:	bf00      	nop

0800075c <__aeabi_ul2d>:
 800075c:	ea50 0201 	orrs.w	r2, r0, r1
 8000760:	bf08      	it	eq
 8000762:	4770      	bxeq	lr
 8000764:	b530      	push	{r4, r5, lr}
 8000766:	f04f 0500 	mov.w	r5, #0
 800076a:	e00a      	b.n	8000782 <__aeabi_l2d+0x16>

0800076c <__aeabi_l2d>:
 800076c:	ea50 0201 	orrs.w	r2, r0, r1
 8000770:	bf08      	it	eq
 8000772:	4770      	bxeq	lr
 8000774:	b530      	push	{r4, r5, lr}
 8000776:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800077a:	d502      	bpl.n	8000782 <__aeabi_l2d+0x16>
 800077c:	4240      	negs	r0, r0
 800077e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000782:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000786:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800078e:	f43f aed8 	beq.w	8000542 <__adddf3+0xe6>
 8000792:	f04f 0203 	mov.w	r2, #3
 8000796:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800079a:	bf18      	it	ne
 800079c:	3203      	addne	r2, #3
 800079e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007a2:	bf18      	it	ne
 80007a4:	3203      	addne	r2, #3
 80007a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007aa:	f1c2 0320 	rsb	r3, r2, #32
 80007ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80007b2:	fa20 f002 	lsr.w	r0, r0, r2
 80007b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80007ba:	ea40 000e 	orr.w	r0, r0, lr
 80007be:	fa21 f102 	lsr.w	r1, r1, r2
 80007c2:	4414      	add	r4, r2
 80007c4:	e6bd      	b.n	8000542 <__adddf3+0xe6>
 80007c6:	bf00      	nop

080007c8 <__aeabi_uldivmod>:
 80007c8:	b953      	cbnz	r3, 80007e0 <__aeabi_uldivmod+0x18>
 80007ca:	b94a      	cbnz	r2, 80007e0 <__aeabi_uldivmod+0x18>
 80007cc:	2900      	cmp	r1, #0
 80007ce:	bf08      	it	eq
 80007d0:	2800      	cmpeq	r0, #0
 80007d2:	bf1c      	itt	ne
 80007d4:	f04f 31ff 	movne.w	r1, #4294967295
 80007d8:	f04f 30ff 	movne.w	r0, #4294967295
 80007dc:	f000 b9ac 	b.w	8000b38 <__aeabi_idiv0>
 80007e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80007e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007e8:	f000 f83e 	bl	8000868 <__udivmoddi4>
 80007ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007f4:	b004      	add	sp, #16
 80007f6:	4770      	bx	lr

080007f8 <__aeabi_d2lz>:
 80007f8:	b508      	push	{r3, lr}
 80007fa:	4602      	mov	r2, r0
 80007fc:	460b      	mov	r3, r1
 80007fe:	ec43 2b17 	vmov	d7, r2, r3
 8000802:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800080a:	d403      	bmi.n	8000814 <__aeabi_d2lz+0x1c>
 800080c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000810:	f000 b80a 	b.w	8000828 <__aeabi_d2ulz>
 8000814:	eeb1 7b47 	vneg.f64	d7, d7
 8000818:	ec51 0b17 	vmov	r0, r1, d7
 800081c:	f000 f804 	bl	8000828 <__aeabi_d2ulz>
 8000820:	4240      	negs	r0, r0
 8000822:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000826:	bd08      	pop	{r3, pc}

08000828 <__aeabi_d2ulz>:
 8000828:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000858 <__aeabi_d2ulz+0x30>
 800082c:	ec41 0b17 	vmov	d7, r0, r1
 8000830:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000860 <__aeabi_d2ulz+0x38>
 8000834:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000838:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800083c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000840:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000844:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000848:	ee16 1a10 	vmov	r1, s12
 800084c:	ee17 0a90 	vmov	r0, s15
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	f3af 8000 	nop.w
 8000858:	00000000 	.word	0x00000000
 800085c:	3df00000 	.word	0x3df00000
 8000860:	00000000 	.word	0x00000000
 8000864:	41f00000 	.word	0x41f00000

08000868 <__udivmoddi4>:
 8000868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800086c:	9d08      	ldr	r5, [sp, #32]
 800086e:	4604      	mov	r4, r0
 8000870:	468e      	mov	lr, r1
 8000872:	2b00      	cmp	r3, #0
 8000874:	d14d      	bne.n	8000912 <__udivmoddi4+0xaa>
 8000876:	428a      	cmp	r2, r1
 8000878:	4694      	mov	ip, r2
 800087a:	d969      	bls.n	8000950 <__udivmoddi4+0xe8>
 800087c:	fab2 f282 	clz	r2, r2
 8000880:	b152      	cbz	r2, 8000898 <__udivmoddi4+0x30>
 8000882:	fa01 f302 	lsl.w	r3, r1, r2
 8000886:	f1c2 0120 	rsb	r1, r2, #32
 800088a:	fa20 f101 	lsr.w	r1, r0, r1
 800088e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000892:	ea41 0e03 	orr.w	lr, r1, r3
 8000896:	4094      	lsls	r4, r2
 8000898:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800089c:	0c21      	lsrs	r1, r4, #16
 800089e:	fbbe f6f8 	udiv	r6, lr, r8
 80008a2:	fa1f f78c 	uxth.w	r7, ip
 80008a6:	fb08 e316 	mls	r3, r8, r6, lr
 80008aa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80008ae:	fb06 f107 	mul.w	r1, r6, r7
 80008b2:	4299      	cmp	r1, r3
 80008b4:	d90a      	bls.n	80008cc <__udivmoddi4+0x64>
 80008b6:	eb1c 0303 	adds.w	r3, ip, r3
 80008ba:	f106 30ff 	add.w	r0, r6, #4294967295
 80008be:	f080 811f 	bcs.w	8000b00 <__udivmoddi4+0x298>
 80008c2:	4299      	cmp	r1, r3
 80008c4:	f240 811c 	bls.w	8000b00 <__udivmoddi4+0x298>
 80008c8:	3e02      	subs	r6, #2
 80008ca:	4463      	add	r3, ip
 80008cc:	1a5b      	subs	r3, r3, r1
 80008ce:	b2a4      	uxth	r4, r4
 80008d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80008d4:	fb08 3310 	mls	r3, r8, r0, r3
 80008d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008dc:	fb00 f707 	mul.w	r7, r0, r7
 80008e0:	42a7      	cmp	r7, r4
 80008e2:	d90a      	bls.n	80008fa <__udivmoddi4+0x92>
 80008e4:	eb1c 0404 	adds.w	r4, ip, r4
 80008e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80008ec:	f080 810a 	bcs.w	8000b04 <__udivmoddi4+0x29c>
 80008f0:	42a7      	cmp	r7, r4
 80008f2:	f240 8107 	bls.w	8000b04 <__udivmoddi4+0x29c>
 80008f6:	4464      	add	r4, ip
 80008f8:	3802      	subs	r0, #2
 80008fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008fe:	1be4      	subs	r4, r4, r7
 8000900:	2600      	movs	r6, #0
 8000902:	b11d      	cbz	r5, 800090c <__udivmoddi4+0xa4>
 8000904:	40d4      	lsrs	r4, r2
 8000906:	2300      	movs	r3, #0
 8000908:	e9c5 4300 	strd	r4, r3, [r5]
 800090c:	4631      	mov	r1, r6
 800090e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000912:	428b      	cmp	r3, r1
 8000914:	d909      	bls.n	800092a <__udivmoddi4+0xc2>
 8000916:	2d00      	cmp	r5, #0
 8000918:	f000 80ef 	beq.w	8000afa <__udivmoddi4+0x292>
 800091c:	2600      	movs	r6, #0
 800091e:	e9c5 0100 	strd	r0, r1, [r5]
 8000922:	4630      	mov	r0, r6
 8000924:	4631      	mov	r1, r6
 8000926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800092a:	fab3 f683 	clz	r6, r3
 800092e:	2e00      	cmp	r6, #0
 8000930:	d14a      	bne.n	80009c8 <__udivmoddi4+0x160>
 8000932:	428b      	cmp	r3, r1
 8000934:	d302      	bcc.n	800093c <__udivmoddi4+0xd4>
 8000936:	4282      	cmp	r2, r0
 8000938:	f200 80f9 	bhi.w	8000b2e <__udivmoddi4+0x2c6>
 800093c:	1a84      	subs	r4, r0, r2
 800093e:	eb61 0303 	sbc.w	r3, r1, r3
 8000942:	2001      	movs	r0, #1
 8000944:	469e      	mov	lr, r3
 8000946:	2d00      	cmp	r5, #0
 8000948:	d0e0      	beq.n	800090c <__udivmoddi4+0xa4>
 800094a:	e9c5 4e00 	strd	r4, lr, [r5]
 800094e:	e7dd      	b.n	800090c <__udivmoddi4+0xa4>
 8000950:	b902      	cbnz	r2, 8000954 <__udivmoddi4+0xec>
 8000952:	deff      	udf	#255	; 0xff
 8000954:	fab2 f282 	clz	r2, r2
 8000958:	2a00      	cmp	r2, #0
 800095a:	f040 8092 	bne.w	8000a82 <__udivmoddi4+0x21a>
 800095e:	eba1 010c 	sub.w	r1, r1, ip
 8000962:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000966:	fa1f fe8c 	uxth.w	lr, ip
 800096a:	2601      	movs	r6, #1
 800096c:	0c20      	lsrs	r0, r4, #16
 800096e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000972:	fb07 1113 	mls	r1, r7, r3, r1
 8000976:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800097a:	fb0e f003 	mul.w	r0, lr, r3
 800097e:	4288      	cmp	r0, r1
 8000980:	d908      	bls.n	8000994 <__udivmoddi4+0x12c>
 8000982:	eb1c 0101 	adds.w	r1, ip, r1
 8000986:	f103 38ff 	add.w	r8, r3, #4294967295
 800098a:	d202      	bcs.n	8000992 <__udivmoddi4+0x12a>
 800098c:	4288      	cmp	r0, r1
 800098e:	f200 80cb 	bhi.w	8000b28 <__udivmoddi4+0x2c0>
 8000992:	4643      	mov	r3, r8
 8000994:	1a09      	subs	r1, r1, r0
 8000996:	b2a4      	uxth	r4, r4
 8000998:	fbb1 f0f7 	udiv	r0, r1, r7
 800099c:	fb07 1110 	mls	r1, r7, r0, r1
 80009a0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009a4:	fb0e fe00 	mul.w	lr, lr, r0
 80009a8:	45a6      	cmp	lr, r4
 80009aa:	d908      	bls.n	80009be <__udivmoddi4+0x156>
 80009ac:	eb1c 0404 	adds.w	r4, ip, r4
 80009b0:	f100 31ff 	add.w	r1, r0, #4294967295
 80009b4:	d202      	bcs.n	80009bc <__udivmoddi4+0x154>
 80009b6:	45a6      	cmp	lr, r4
 80009b8:	f200 80bb 	bhi.w	8000b32 <__udivmoddi4+0x2ca>
 80009bc:	4608      	mov	r0, r1
 80009be:	eba4 040e 	sub.w	r4, r4, lr
 80009c2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80009c6:	e79c      	b.n	8000902 <__udivmoddi4+0x9a>
 80009c8:	f1c6 0720 	rsb	r7, r6, #32
 80009cc:	40b3      	lsls	r3, r6
 80009ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80009d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80009d6:	fa20 f407 	lsr.w	r4, r0, r7
 80009da:	fa01 f306 	lsl.w	r3, r1, r6
 80009de:	431c      	orrs	r4, r3
 80009e0:	40f9      	lsrs	r1, r7
 80009e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009e6:	fa00 f306 	lsl.w	r3, r0, r6
 80009ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80009ee:	0c20      	lsrs	r0, r4, #16
 80009f0:	fa1f fe8c 	uxth.w	lr, ip
 80009f4:	fb09 1118 	mls	r1, r9, r8, r1
 80009f8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009fc:	fb08 f00e 	mul.w	r0, r8, lr
 8000a00:	4288      	cmp	r0, r1
 8000a02:	fa02 f206 	lsl.w	r2, r2, r6
 8000a06:	d90b      	bls.n	8000a20 <__udivmoddi4+0x1b8>
 8000a08:	eb1c 0101 	adds.w	r1, ip, r1
 8000a0c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a10:	f080 8088 	bcs.w	8000b24 <__udivmoddi4+0x2bc>
 8000a14:	4288      	cmp	r0, r1
 8000a16:	f240 8085 	bls.w	8000b24 <__udivmoddi4+0x2bc>
 8000a1a:	f1a8 0802 	sub.w	r8, r8, #2
 8000a1e:	4461      	add	r1, ip
 8000a20:	1a09      	subs	r1, r1, r0
 8000a22:	b2a4      	uxth	r4, r4
 8000a24:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a28:	fb09 1110 	mls	r1, r9, r0, r1
 8000a2c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a30:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a34:	458e      	cmp	lr, r1
 8000a36:	d908      	bls.n	8000a4a <__udivmoddi4+0x1e2>
 8000a38:	eb1c 0101 	adds.w	r1, ip, r1
 8000a3c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a40:	d26c      	bcs.n	8000b1c <__udivmoddi4+0x2b4>
 8000a42:	458e      	cmp	lr, r1
 8000a44:	d96a      	bls.n	8000b1c <__udivmoddi4+0x2b4>
 8000a46:	3802      	subs	r0, #2
 8000a48:	4461      	add	r1, ip
 8000a4a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a4e:	fba0 9402 	umull	r9, r4, r0, r2
 8000a52:	eba1 010e 	sub.w	r1, r1, lr
 8000a56:	42a1      	cmp	r1, r4
 8000a58:	46c8      	mov	r8, r9
 8000a5a:	46a6      	mov	lr, r4
 8000a5c:	d356      	bcc.n	8000b0c <__udivmoddi4+0x2a4>
 8000a5e:	d053      	beq.n	8000b08 <__udivmoddi4+0x2a0>
 8000a60:	b15d      	cbz	r5, 8000a7a <__udivmoddi4+0x212>
 8000a62:	ebb3 0208 	subs.w	r2, r3, r8
 8000a66:	eb61 010e 	sbc.w	r1, r1, lr
 8000a6a:	fa01 f707 	lsl.w	r7, r1, r7
 8000a6e:	fa22 f306 	lsr.w	r3, r2, r6
 8000a72:	40f1      	lsrs	r1, r6
 8000a74:	431f      	orrs	r7, r3
 8000a76:	e9c5 7100 	strd	r7, r1, [r5]
 8000a7a:	2600      	movs	r6, #0
 8000a7c:	4631      	mov	r1, r6
 8000a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a82:	f1c2 0320 	rsb	r3, r2, #32
 8000a86:	40d8      	lsrs	r0, r3
 8000a88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a8c:	fa21 f303 	lsr.w	r3, r1, r3
 8000a90:	4091      	lsls	r1, r2
 8000a92:	4301      	orrs	r1, r0
 8000a94:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a98:	fa1f fe8c 	uxth.w	lr, ip
 8000a9c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000aa0:	fb07 3610 	mls	r6, r7, r0, r3
 8000aa4:	0c0b      	lsrs	r3, r1, #16
 8000aa6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000aaa:	fb00 f60e 	mul.w	r6, r0, lr
 8000aae:	429e      	cmp	r6, r3
 8000ab0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ab4:	d908      	bls.n	8000ac8 <__udivmoddi4+0x260>
 8000ab6:	eb1c 0303 	adds.w	r3, ip, r3
 8000aba:	f100 38ff 	add.w	r8, r0, #4294967295
 8000abe:	d22f      	bcs.n	8000b20 <__udivmoddi4+0x2b8>
 8000ac0:	429e      	cmp	r6, r3
 8000ac2:	d92d      	bls.n	8000b20 <__udivmoddi4+0x2b8>
 8000ac4:	3802      	subs	r0, #2
 8000ac6:	4463      	add	r3, ip
 8000ac8:	1b9b      	subs	r3, r3, r6
 8000aca:	b289      	uxth	r1, r1
 8000acc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ad0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ad4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ad8:	fb06 f30e 	mul.w	r3, r6, lr
 8000adc:	428b      	cmp	r3, r1
 8000ade:	d908      	bls.n	8000af2 <__udivmoddi4+0x28a>
 8000ae0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ae4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ae8:	d216      	bcs.n	8000b18 <__udivmoddi4+0x2b0>
 8000aea:	428b      	cmp	r3, r1
 8000aec:	d914      	bls.n	8000b18 <__udivmoddi4+0x2b0>
 8000aee:	3e02      	subs	r6, #2
 8000af0:	4461      	add	r1, ip
 8000af2:	1ac9      	subs	r1, r1, r3
 8000af4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000af8:	e738      	b.n	800096c <__udivmoddi4+0x104>
 8000afa:	462e      	mov	r6, r5
 8000afc:	4628      	mov	r0, r5
 8000afe:	e705      	b.n	800090c <__udivmoddi4+0xa4>
 8000b00:	4606      	mov	r6, r0
 8000b02:	e6e3      	b.n	80008cc <__udivmoddi4+0x64>
 8000b04:	4618      	mov	r0, r3
 8000b06:	e6f8      	b.n	80008fa <__udivmoddi4+0x92>
 8000b08:	454b      	cmp	r3, r9
 8000b0a:	d2a9      	bcs.n	8000a60 <__udivmoddi4+0x1f8>
 8000b0c:	ebb9 0802 	subs.w	r8, r9, r2
 8000b10:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b14:	3801      	subs	r0, #1
 8000b16:	e7a3      	b.n	8000a60 <__udivmoddi4+0x1f8>
 8000b18:	4646      	mov	r6, r8
 8000b1a:	e7ea      	b.n	8000af2 <__udivmoddi4+0x28a>
 8000b1c:	4620      	mov	r0, r4
 8000b1e:	e794      	b.n	8000a4a <__udivmoddi4+0x1e2>
 8000b20:	4640      	mov	r0, r8
 8000b22:	e7d1      	b.n	8000ac8 <__udivmoddi4+0x260>
 8000b24:	46d0      	mov	r8, sl
 8000b26:	e77b      	b.n	8000a20 <__udivmoddi4+0x1b8>
 8000b28:	3b02      	subs	r3, #2
 8000b2a:	4461      	add	r1, ip
 8000b2c:	e732      	b.n	8000994 <__udivmoddi4+0x12c>
 8000b2e:	4630      	mov	r0, r6
 8000b30:	e709      	b.n	8000946 <__udivmoddi4+0xde>
 8000b32:	4464      	add	r4, ip
 8000b34:	3802      	subs	r0, #2
 8000b36:	e742      	b.n	80009be <__udivmoddi4+0x156>

08000b38 <__aeabi_idiv0>:
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <ADC_ComputeFFT>:
		}

}

void ADC_ComputeFFT()
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af00      	add	r7, sp, #0
	uint32_t idx;
	for(int i = 0; i < 1024; i++)
 8000b42:	2300      	movs	r3, #0
 8000b44:	617b      	str	r3, [r7, #20]
 8000b46:	e00e      	b.n	8000b66 <ADC_ComputeFFT+0x2a>
	{
		FFTin[i + 1024] = FFTin[i];
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000b4e:	4940      	ldr	r1, [pc, #256]	; (8000c50 <ADC_ComputeFFT+0x114>)
 8000b50:	697a      	ldr	r2, [r7, #20]
 8000b52:	0092      	lsls	r2, r2, #2
 8000b54:	440a      	add	r2, r1
 8000b56:	6812      	ldr	r2, [r2, #0]
 8000b58:	493d      	ldr	r1, [pc, #244]	; (8000c50 <ADC_ComputeFFT+0x114>)
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	440b      	add	r3, r1
 8000b5e:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 1024; i++)
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	3301      	adds	r3, #1
 8000b64:	617b      	str	r3, [r7, #20]
 8000b66:	697b      	ldr	r3, [r7, #20]
 8000b68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b6c:	dbec      	blt.n	8000b48 <ADC_ComputeFFT+0xc>
	}
	for(int i = 0; i < 1024; i++)//trochu upravit slozeni dat...{Re, Im, Re, Im....}, Im=0.0
 8000b6e:	2300      	movs	r3, #0
 8000b70:	613b      	str	r3, [r7, #16]
 8000b72:	e018      	b.n	8000ba6 <ADC_ComputeFFT+0x6a>
	{
		FFTin[(2 * i)] = FFTin[i + 1024];
 8000b74:	693b      	ldr	r3, [r7, #16]
 8000b76:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 8000b7a:	693b      	ldr	r3, [r7, #16]
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	4934      	ldr	r1, [pc, #208]	; (8000c50 <ADC_ComputeFFT+0x114>)
 8000b80:	0092      	lsls	r2, r2, #2
 8000b82:	440a      	add	r2, r1
 8000b84:	6812      	ldr	r2, [r2, #0]
 8000b86:	4932      	ldr	r1, [pc, #200]	; (8000c50 <ADC_ComputeFFT+0x114>)
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	440b      	add	r3, r1
 8000b8c:	601a      	str	r2, [r3, #0]
		FFTin[(2 * i) + 1] = 0.0;
 8000b8e:	693b      	ldr	r3, [r7, #16]
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	3301      	adds	r3, #1
 8000b94:	4a2e      	ldr	r2, [pc, #184]	; (8000c50 <ADC_ComputeFFT+0x114>)
 8000b96:	009b      	lsls	r3, r3, #2
 8000b98:	4413      	add	r3, r2
 8000b9a:	f04f 0200 	mov.w	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < 1024; i++)//trochu upravit slozeni dat...{Re, Im, Re, Im....}, Im=0.0
 8000ba0:	693b      	ldr	r3, [r7, #16]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	613b      	str	r3, [r7, #16]
 8000ba6:	693b      	ldr	r3, [r7, #16]
 8000ba8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bac:	dbe2      	blt.n	8000b74 <ADC_ComputeFFT+0x38>
	}
	arm_cfft_f32(&arm_cfft_sR_f32_len1024, FFTin, ifftFlag, 1);
 8000bae:	4b29      	ldr	r3, [pc, #164]	; (8000c54 <ADC_ComputeFFT+0x118>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	b2da      	uxtb	r2, r3
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	4926      	ldr	r1, [pc, #152]	; (8000c50 <ADC_ComputeFFT+0x114>)
 8000bb8:	4827      	ldr	r0, [pc, #156]	; (8000c58 <ADC_ComputeFFT+0x11c>)
 8000bba:	f002 f933 	bl	8002e24 <arm_cfft_f32>
	arm_cmplx_mag_f32(FFTin, FFTOutput, fftSize);
 8000bbe:	4b27      	ldr	r3, [pc, #156]	; (8000c5c <ADC_ComputeFFT+0x120>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	4926      	ldr	r1, [pc, #152]	; (8000c60 <ADC_ComputeFFT+0x124>)
 8000bc6:	4822      	ldr	r0, [pc, #136]	; (8000c50 <ADC_ComputeFFT+0x114>)
 8000bc8:	f000 ffcb 	bl	8001b62 <arm_cmplx_mag_f32>
	arm_max_f32(FFTOutput, 512, &maxFFT, &idx);
 8000bcc:	f107 0308 	add.w	r3, r7, #8
 8000bd0:	4a24      	ldr	r2, [pc, #144]	; (8000c64 <ADC_ComputeFFT+0x128>)
 8000bd2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bd6:	4822      	ldr	r0, [pc, #136]	; (8000c60 <ADC_ComputeFFT+0x124>)
 8000bd8:	f001 f86f 	bl	8001cba <arm_max_f32>
	arm_max_f32(&FFTOutput[idx], 512-idx, &maxSecondFFT, &idx);
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	4a1f      	ldr	r2, [pc, #124]	; (8000c60 <ADC_ComputeFFT+0x124>)
 8000be2:	1898      	adds	r0, r3, r2
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	f5c3 7100 	rsb	r1, r3, #512	; 0x200
 8000bea:	f107 0308 	add.w	r3, r7, #8
 8000bee:	4a1e      	ldr	r2, [pc, #120]	; (8000c68 <ADC_ComputeFFT+0x12c>)
 8000bf0:	f001 f863 	bl	8001cba <arm_max_f32>
	maxSecondFFT = 100*maxFFT/maxSecondFFT;
 8000bf4:	4b1b      	ldr	r3, [pc, #108]	; (8000c64 <ADC_ComputeFFT+0x128>)
 8000bf6:	edd3 7a00 	vldr	s15, [r3]
 8000bfa:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8000c6c <ADC_ComputeFFT+0x130>
 8000bfe:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000c02:	4b19      	ldr	r3, [pc, #100]	; (8000c68 <ADC_ComputeFFT+0x12c>)
 8000c04:	ed93 7a00 	vldr	s14, [r3]
 8000c08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000c0c:	4b16      	ldr	r3, [pc, #88]	; (8000c68 <ADC_ComputeFFT+0x12c>)
 8000c0e:	edc3 7a00 	vstr	s15, [r3]
	maxIdxSecondFFT = idx;
 8000c12:	68bb      	ldr	r3, [r7, #8]
 8000c14:	4a16      	ldr	r2, [pc, #88]	; (8000c70 <ADC_ComputeFFT+0x134>)
 8000c16:	6013      	str	r3, [r2, #0]
	//SSD1306Bargraph(128, maxFFT*4, FFTOutput, 0, 0, 127);

	for(int i = 0; i < 1024; i++)
 8000c18:	2300      	movs	r3, #0
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	e00f      	b.n	8000c3e <ADC_ComputeFFT+0x102>
	{
	  uint8_t data[4];
	  memcpy(data, &FFTOutput[i], 4);
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	4a0f      	ldr	r2, [pc, #60]	; (8000c60 <ADC_ComputeFFT+0x124>)
 8000c24:	4413      	add	r3, r2
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	607b      	str	r3, [r7, #4]
	  HAL_UART_Transmit(&huart3, data, 4, HAL_MAX_DELAY);
 8000c2a:	1d39      	adds	r1, r7, #4
 8000c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c30:	2204      	movs	r2, #4
 8000c32:	4810      	ldr	r0, [pc, #64]	; (8000c74 <ADC_ComputeFFT+0x138>)
 8000c34:	f00b f868 	bl	800bd08 <HAL_UART_Transmit>
	for(int i = 0; i < 1024; i++)
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	60fb      	str	r3, [r7, #12]
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c44:	dbeb      	blt.n	8000c1e <ADC_ComputeFFT+0xe2>
	}
}
 8000c46:	bf00      	nop
 8000c48:	bf00      	nop
 8000c4a:	3718      	adds	r7, #24
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	24001a2c 	.word	0x24001a2c
 8000c54:	24004a2c 	.word	0x24004a2c
 8000c58:	08014a40 	.word	0x08014a40
 8000c5c:	24000000 	.word	0x24000000
 8000c60:	24003a2c 	.word	0x24003a2c
 8000c64:	24004a34 	.word	0x24004a34
 8000c68:	24004a38 	.word	0x24004a38
 8000c6c:	42c80000 	.word	0x42c80000
 8000c70:	24004a30 	.word	0x24004a30
 8000c74:	24000488 	.word	0x24000488

08000c78 <HAL_ADC_ConvCpltCallback>:
//    RN4871_Tx(data[i]);
//  }
//}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
   adc_val = (uint16_t)*adc_buf;
 8000c80:	4b1f      	ldr	r3, [pc, #124]	; (8000d00 <HAL_ADC_ConvCpltCallback+0x88>)
 8000c82:	881a      	ldrh	r2, [r3, #0]
 8000c84:	4b1f      	ldr	r3, [pc, #124]	; (8000d04 <HAL_ADC_ConvCpltCallback+0x8c>)
 8000c86:	801a      	strh	r2, [r3, #0]
   adc_val1=(float)adc_val* (3.3/65534);
 8000c88:	4b1e      	ldr	r3, [pc, #120]	; (8000d04 <HAL_ADC_ConvCpltCallback+0x8c>)
 8000c8a:	881b      	ldrh	r3, [r3, #0]
 8000c8c:	ee07 3a90 	vmov	s15, r3
 8000c90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c94:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c98:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8000cf8 <HAL_ADC_ConvCpltCallback+0x80>
 8000c9c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000ca0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000ca4:	4b18      	ldr	r3, [pc, #96]	; (8000d08 <HAL_ADC_ConvCpltCallback+0x90>)
 8000ca6:	edc3 7a00 	vstr	s15, [r3]

   float32_t adc_to_voltage = 3.3 / 65535;
 8000caa:	4b18      	ldr	r3, [pc, #96]	; (8000d0c <HAL_ADC_ConvCpltCallback+0x94>)
 8000cac:	60bb      	str	r3, [r7, #8]



   for (size_t i = 0; i < 1024 ; i++)
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	e014      	b.n	8000cde <HAL_ADC_ConvCpltCallback+0x66>
       {
         FFTin[i] = (float32_t)(adc_buf[i]) * adc_to_voltage;
 8000cb4:	4a12      	ldr	r2, [pc, #72]	; (8000d00 <HAL_ADC_ConvCpltCallback+0x88>)
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cbc:	ee07 3a90 	vmov	s15, r3
 8000cc0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000cc4:	edd7 7a02 	vldr	s15, [r7, #8]
 8000cc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ccc:	4a10      	ldr	r2, [pc, #64]	; (8000d10 <HAL_ADC_ConvCpltCallback+0x98>)
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	4413      	add	r3, r2
 8000cd4:	edc3 7a00 	vstr	s15, [r3]
   for (size_t i = 0; i < 1024 ; i++)
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	3301      	adds	r3, #1
 8000cdc:	60fb      	str	r3, [r7, #12]
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ce4:	d3e6      	bcc.n	8000cb4 <HAL_ADC_ConvCpltCallback+0x3c>
       }
//  calculate_fft();
   	   ADC_ComputeFFT();
 8000ce6:	f7ff ff29 	bl	8000b3c <ADC_ComputeFFT>
 // Real_FFT();

}
 8000cea:	bf00      	nop
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	f3af 8000 	nop.w
 8000cf8:	339ccda0 	.word	0x339ccda0
 8000cfc:	3f0a669b 	.word	0x3f0a669b
 8000d00:	24000a24 	.word	0x24000a24
 8000d04:	24001a24 	.word	0x24001a24
 8000d08:	24001a28 	.word	0x24001a28
 8000d0c:	38533406 	.word	0x38533406
 8000d10:	24001a2c 	.word	0x24001a2c

08000d14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d18:	f003 f944 	bl	8003fa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d1c:	f000 f818 	bl	8000d50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d20:	f000 fa04 	bl	800112c <MX_GPIO_Init>
  MX_DMA_Init();
 8000d24:	f000 f9e2 	bl	80010ec <MX_DMA_Init>
  MX_ADC1_Init();
 8000d28:	f000 f89c 	bl	8000e64 <MX_ADC1_Init>
  MX_ETH_Init();
 8000d2c:	f000 f914 	bl	8000f58 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000d30:	f000 f95e 	bl	8000ff0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000d34:	f000 f9a8 	bl	8001088 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf,2048);
 8000d38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d3c:	4902      	ldr	r1, [pc, #8]	; (8000d48 <main+0x34>)
 8000d3e:	4803      	ldr	r0, [pc, #12]	; (8000d4c <main+0x38>)
 8000d40:	f003 fd90 	bl	8004864 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <main+0x30>
 8000d46:	bf00      	nop
 8000d48:	24000a24 	.word	0x24000a24
 8000d4c:	240002fc 	.word	0x240002fc

08000d50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b09c      	sub	sp, #112	; 0x70
 8000d54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d5a:	224c      	movs	r2, #76	; 0x4c
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f00c fbbc 	bl	800d4dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d64:	1d3b      	adds	r3, r7, #4
 8000d66:	2220      	movs	r2, #32
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f00c fbb6 	bl	800d4dc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d70:	2002      	movs	r0, #2
 8000d72:	f007 fde9 	bl	8008948 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d76:	2300      	movs	r3, #0
 8000d78:	603b      	str	r3, [r7, #0]
 8000d7a:	4b37      	ldr	r3, [pc, #220]	; (8000e58 <SystemClock_Config+0x108>)
 8000d7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d7e:	4a36      	ldr	r2, [pc, #216]	; (8000e58 <SystemClock_Config+0x108>)
 8000d80:	f023 0301 	bic.w	r3, r3, #1
 8000d84:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000d86:	4b34      	ldr	r3, [pc, #208]	; (8000e58 <SystemClock_Config+0x108>)
 8000d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	603b      	str	r3, [r7, #0]
 8000d90:	4b32      	ldr	r3, [pc, #200]	; (8000e5c <SystemClock_Config+0x10c>)
 8000d92:	699b      	ldr	r3, [r3, #24]
 8000d94:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d98:	4a30      	ldr	r2, [pc, #192]	; (8000e5c <SystemClock_Config+0x10c>)
 8000d9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d9e:	6193      	str	r3, [r2, #24]
 8000da0:	4b2e      	ldr	r3, [pc, #184]	; (8000e5c <SystemClock_Config+0x10c>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000da8:	603b      	str	r3, [r7, #0]
 8000daa:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000dac:	bf00      	nop
 8000dae:	4b2b      	ldr	r3, [pc, #172]	; (8000e5c <SystemClock_Config+0x10c>)
 8000db0:	699b      	ldr	r3, [r3, #24]
 8000db2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000db6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000dba:	d1f8      	bne.n	8000dae <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000dbc:	4b28      	ldr	r3, [pc, #160]	; (8000e60 <SystemClock_Config+0x110>)
 8000dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dc0:	f023 0303 	bic.w	r3, r3, #3
 8000dc4:	4a26      	ldr	r2, [pc, #152]	; (8000e60 <SystemClock_Config+0x110>)
 8000dc6:	f043 0302 	orr.w	r3, r3, #2
 8000dca:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000dcc:	2303      	movs	r3, #3
 8000dce:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000dd0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000dd4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dda:	2340      	movs	r3, #64	; 0x40
 8000ddc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dde:	2302      	movs	r3, #2
 8000de0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000de2:	2302      	movs	r3, #2
 8000de4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000de6:	2301      	movs	r3, #1
 8000de8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 18;
 8000dea:	2312      	movs	r3, #18
 8000dec:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000dee:	2302      	movs	r3, #2
 8000df0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000df2:	2303      	movs	r3, #3
 8000df4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000df6:	2302      	movs	r3, #2
 8000df8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000dfa:	230c      	movs	r3, #12
 8000dfc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 6144;
 8000e02:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e06:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f007 fde5 	bl	80089dc <HAL_RCC_OscConfig>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000e18:	f000 fa64 	bl	80012e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e1c:	233f      	movs	r3, #63	; 0x3f
 8000e1e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e20:	2300      	movs	r3, #0
 8000e22:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e24:	2300      	movs	r3, #0
 8000e26:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000e30:	2300      	movs	r3, #0
 8000e32:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000e34:	2300      	movs	r3, #0
 8000e36:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e3c:	1d3b      	adds	r3, r7, #4
 8000e3e:	2101      	movs	r1, #1
 8000e40:	4618      	mov	r0, r3
 8000e42:	f008 f9f9 	bl	8009238 <HAL_RCC_ClockConfig>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <SystemClock_Config+0x100>
  {
    Error_Handler();
 8000e4c:	f000 fa4a 	bl	80012e4 <Error_Handler>
  }
}
 8000e50:	bf00      	nop
 8000e52:	3770      	adds	r7, #112	; 0x70
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	58000400 	.word	0x58000400
 8000e5c:	58024800 	.word	0x58024800
 8000e60:	58024400 	.word	0x58024400

08000e64 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08a      	sub	sp, #40	; 0x28
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e6a:	f107 031c 	add.w	r3, r7, #28
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e76:	463b      	mov	r3, r7
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]
 8000e84:	615a      	str	r2, [r3, #20]
 8000e86:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e88:	4b30      	ldr	r3, [pc, #192]	; (8000f4c <MX_ADC1_Init+0xe8>)
 8000e8a:	4a31      	ldr	r2, [pc, #196]	; (8000f50 <MX_ADC1_Init+0xec>)
 8000e8c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000e8e:	4b2f      	ldr	r3, [pc, #188]	; (8000f4c <MX_ADC1_Init+0xe8>)
 8000e90:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000e94:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000e96:	4b2d      	ldr	r3, [pc, #180]	; (8000f4c <MX_ADC1_Init+0xe8>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e9c:	4b2b      	ldr	r3, [pc, #172]	; (8000f4c <MX_ADC1_Init+0xe8>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ea2:	4b2a      	ldr	r3, [pc, #168]	; (8000f4c <MX_ADC1_Init+0xe8>)
 8000ea4:	2204      	movs	r2, #4
 8000ea6:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ea8:	4b28      	ldr	r3, [pc, #160]	; (8000f4c <MX_ADC1_Init+0xe8>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000eae:	4b27      	ldr	r3, [pc, #156]	; (8000f4c <MX_ADC1_Init+0xe8>)
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000eb4:	4b25      	ldr	r3, [pc, #148]	; (8000f4c <MX_ADC1_Init+0xe8>)
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000eba:	4b24      	ldr	r3, [pc, #144]	; (8000f4c <MX_ADC1_Init+0xe8>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ec0:	4b22      	ldr	r3, [pc, #136]	; (8000f4c <MX_ADC1_Init+0xe8>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ec6:	4b21      	ldr	r3, [pc, #132]	; (8000f4c <MX_ADC1_Init+0xe8>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8000ecc:	4b1f      	ldr	r3, [pc, #124]	; (8000f4c <MX_ADC1_Init+0xe8>)
 8000ece:	2203      	movs	r2, #3
 8000ed0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ed2:	4b1e      	ldr	r3, [pc, #120]	; (8000f4c <MX_ADC1_Init+0xe8>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ed8:	4b1c      	ldr	r3, [pc, #112]	; (8000f4c <MX_ADC1_Init+0xe8>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000ede:	4b1b      	ldr	r3, [pc, #108]	; (8000f4c <MX_ADC1_Init+0xe8>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ee6:	4819      	ldr	r0, [pc, #100]	; (8000f4c <MX_ADC1_Init+0xe8>)
 8000ee8:	f003 fb1a 	bl	8004520 <HAL_ADC_Init>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000ef2:	f000 f9f7 	bl	80012e4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000efa:	f107 031c 	add.w	r3, r7, #28
 8000efe:	4619      	mov	r1, r3
 8000f00:	4812      	ldr	r0, [pc, #72]	; (8000f4c <MX_ADC1_Init+0xe8>)
 8000f02:	f004 fb25 	bl	8005550 <HAL_ADCEx_MultiModeConfigChannel>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000f0c:	f000 f9ea 	bl	80012e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000f10:	4b10      	ldr	r3, [pc, #64]	; (8000f54 <MX_ADC1_Init+0xf0>)
 8000f12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f14:	2306      	movs	r3, #6
 8000f16:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f1c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000f20:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f22:	2304      	movs	r3, #4
 8000f24:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f2e:	463b      	mov	r3, r7
 8000f30:	4619      	mov	r1, r3
 8000f32:	4806      	ldr	r0, [pc, #24]	; (8000f4c <MX_ADC1_Init+0xe8>)
 8000f34:	f003 fd6e 	bl	8004a14 <HAL_ADC_ConfigChannel>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000f3e:	f000 f9d1 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f42:	bf00      	nop
 8000f44:	3728      	adds	r7, #40	; 0x28
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	240002fc 	.word	0x240002fc
 8000f50:	40022000 	.word	0x40022000
 8000f54:	0c900008 	.word	0x0c900008

08000f58 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000f5c:	4b1e      	ldr	r3, [pc, #120]	; (8000fd8 <MX_ETH_Init+0x80>)
 8000f5e:	4a1f      	ldr	r2, [pc, #124]	; (8000fdc <MX_ETH_Init+0x84>)
 8000f60:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000f62:	4b1f      	ldr	r3, [pc, #124]	; (8000fe0 <MX_ETH_Init+0x88>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000f68:	4b1d      	ldr	r3, [pc, #116]	; (8000fe0 <MX_ETH_Init+0x88>)
 8000f6a:	2280      	movs	r2, #128	; 0x80
 8000f6c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000f6e:	4b1c      	ldr	r3, [pc, #112]	; (8000fe0 <MX_ETH_Init+0x88>)
 8000f70:	22e1      	movs	r2, #225	; 0xe1
 8000f72:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000f74:	4b1a      	ldr	r3, [pc, #104]	; (8000fe0 <MX_ETH_Init+0x88>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000f7a:	4b19      	ldr	r3, [pc, #100]	; (8000fe0 <MX_ETH_Init+0x88>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000f80:	4b17      	ldr	r3, [pc, #92]	; (8000fe0 <MX_ETH_Init+0x88>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000f86:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <MX_ETH_Init+0x80>)
 8000f88:	4a15      	ldr	r2, [pc, #84]	; (8000fe0 <MX_ETH_Init+0x88>)
 8000f8a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000f8c:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <MX_ETH_Init+0x80>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000f92:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <MX_ETH_Init+0x80>)
 8000f94:	4a13      	ldr	r2, [pc, #76]	; (8000fe4 <MX_ETH_Init+0x8c>)
 8000f96:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000f98:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <MX_ETH_Init+0x80>)
 8000f9a:	4a13      	ldr	r2, [pc, #76]	; (8000fe8 <MX_ETH_Init+0x90>)
 8000f9c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <MX_ETH_Init+0x80>)
 8000fa0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000fa4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000fa6:	480c      	ldr	r0, [pc, #48]	; (8000fd8 <MX_ETH_Init+0x80>)
 8000fa8:	f006 fd98 	bl	8007adc <HAL_ETH_Init>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000fb2:	f000 f997 	bl	80012e4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000fb6:	2238      	movs	r2, #56	; 0x38
 8000fb8:	2100      	movs	r1, #0
 8000fba:	480c      	ldr	r0, [pc, #48]	; (8000fec <MX_ETH_Init+0x94>)
 8000fbc:	f00c fa8e 	bl	800d4dc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000fc0:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <MX_ETH_Init+0x94>)
 8000fc2:	2221      	movs	r2, #33	; 0x21
 8000fc4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000fc6:	4b09      	ldr	r3, [pc, #36]	; (8000fec <MX_ETH_Init+0x94>)
 8000fc8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000fcc:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000fce:	4b07      	ldr	r3, [pc, #28]	; (8000fec <MX_ETH_Init+0x94>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000fd4:	bf00      	nop
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	240003d8 	.word	0x240003d8
 8000fdc:	40028000 	.word	0x40028000
 8000fe0:	24004a3c 	.word	0x24004a3c
 8000fe4:	24000248 	.word	0x24000248
 8000fe8:	240001e8 	.word	0x240001e8
 8000fec:	240002c4 	.word	0x240002c4

08000ff0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ff4:	4b22      	ldr	r3, [pc, #136]	; (8001080 <MX_USART3_UART_Init+0x90>)
 8000ff6:	4a23      	ldr	r2, [pc, #140]	; (8001084 <MX_USART3_UART_Init+0x94>)
 8000ff8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ffa:	4b21      	ldr	r3, [pc, #132]	; (8001080 <MX_USART3_UART_Init+0x90>)
 8000ffc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001000:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001002:	4b1f      	ldr	r3, [pc, #124]	; (8001080 <MX_USART3_UART_Init+0x90>)
 8001004:	2200      	movs	r2, #0
 8001006:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001008:	4b1d      	ldr	r3, [pc, #116]	; (8001080 <MX_USART3_UART_Init+0x90>)
 800100a:	2200      	movs	r2, #0
 800100c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800100e:	4b1c      	ldr	r3, [pc, #112]	; (8001080 <MX_USART3_UART_Init+0x90>)
 8001010:	2200      	movs	r2, #0
 8001012:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001014:	4b1a      	ldr	r3, [pc, #104]	; (8001080 <MX_USART3_UART_Init+0x90>)
 8001016:	220c      	movs	r2, #12
 8001018:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800101a:	4b19      	ldr	r3, [pc, #100]	; (8001080 <MX_USART3_UART_Init+0x90>)
 800101c:	2200      	movs	r2, #0
 800101e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001020:	4b17      	ldr	r3, [pc, #92]	; (8001080 <MX_USART3_UART_Init+0x90>)
 8001022:	2200      	movs	r2, #0
 8001024:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001026:	4b16      	ldr	r3, [pc, #88]	; (8001080 <MX_USART3_UART_Init+0x90>)
 8001028:	2200      	movs	r2, #0
 800102a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800102c:	4b14      	ldr	r3, [pc, #80]	; (8001080 <MX_USART3_UART_Init+0x90>)
 800102e:	2200      	movs	r2, #0
 8001030:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001032:	4b13      	ldr	r3, [pc, #76]	; (8001080 <MX_USART3_UART_Init+0x90>)
 8001034:	2200      	movs	r2, #0
 8001036:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001038:	4811      	ldr	r0, [pc, #68]	; (8001080 <MX_USART3_UART_Init+0x90>)
 800103a:	f00a fe15 	bl	800bc68 <HAL_UART_Init>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001044:	f000 f94e 	bl	80012e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001048:	2100      	movs	r1, #0
 800104a:	480d      	ldr	r0, [pc, #52]	; (8001080 <MX_USART3_UART_Init+0x90>)
 800104c:	f00b fe48 	bl	800cce0 <HAL_UARTEx_SetTxFifoThreshold>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001056:	f000 f945 	bl	80012e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800105a:	2100      	movs	r1, #0
 800105c:	4808      	ldr	r0, [pc, #32]	; (8001080 <MX_USART3_UART_Init+0x90>)
 800105e:	f00b fe7d 	bl	800cd5c <HAL_UARTEx_SetRxFifoThreshold>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001068:	f000 f93c 	bl	80012e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800106c:	4804      	ldr	r0, [pc, #16]	; (8001080 <MX_USART3_UART_Init+0x90>)
 800106e:	f00b fdfe 	bl	800cc6e <HAL_UARTEx_DisableFifoMode>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001078:	f000 f934 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}
 8001080:	24000488 	.word	0x24000488
 8001084:	40004800 	.word	0x40004800

08001088 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800108c:	4b15      	ldr	r3, [pc, #84]	; (80010e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800108e:	4a16      	ldr	r2, [pc, #88]	; (80010e8 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001090:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001092:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001094:	2209      	movs	r2, #9
 8001096:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001098:	4b12      	ldr	r3, [pc, #72]	; (80010e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800109a:	2202      	movs	r2, #2
 800109c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800109e:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80010a4:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010a6:	2202      	movs	r2, #2
 80010a8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80010aa:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80010b0:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80010b6:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80010bc:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010be:	2201      	movs	r2, #1
 80010c0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80010c2:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010c4:	2201      	movs	r2, #1
 80010c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80010c8:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80010ce:	4805      	ldr	r0, [pc, #20]	; (80010e4 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80010d0:	f007 faf1 	bl	80086b6 <HAL_PCD_Init>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80010da:	f000 f903 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	24000518 	.word	0x24000518
 80010e8:	40080000 	.word	0x40080000

080010ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010f2:	4b0d      	ldr	r3, [pc, #52]	; (8001128 <MX_DMA_Init+0x3c>)
 80010f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80010f8:	4a0b      	ldr	r2, [pc, #44]	; (8001128 <MX_DMA_Init+0x3c>)
 80010fa:	f043 0301 	orr.w	r3, r3, #1
 80010fe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001102:	4b09      	ldr	r3, [pc, #36]	; (8001128 <MX_DMA_Init+0x3c>)
 8001104:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001108:	f003 0301 	and.w	r3, r3, #1
 800110c:	607b      	str	r3, [r7, #4]
 800110e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001110:	2200      	movs	r2, #0
 8001112:	2100      	movs	r1, #0
 8001114:	200b      	movs	r0, #11
 8001116:	f004 fbd4 	bl	80058c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800111a:	200b      	movs	r0, #11
 800111c:	f004 fbeb 	bl	80058f6 <HAL_NVIC_EnableIRQ>

}
 8001120:	bf00      	nop
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	58024400 	.word	0x58024400

0800112c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08c      	sub	sp, #48	; 0x30
 8001130:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001132:	f107 031c 	add.w	r3, r7, #28
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]
 8001140:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001142:	4b62      	ldr	r3, [pc, #392]	; (80012cc <MX_GPIO_Init+0x1a0>)
 8001144:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001148:	4a60      	ldr	r2, [pc, #384]	; (80012cc <MX_GPIO_Init+0x1a0>)
 800114a:	f043 0304 	orr.w	r3, r3, #4
 800114e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001152:	4b5e      	ldr	r3, [pc, #376]	; (80012cc <MX_GPIO_Init+0x1a0>)
 8001154:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001158:	f003 0304 	and.w	r3, r3, #4
 800115c:	61bb      	str	r3, [r7, #24]
 800115e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001160:	4b5a      	ldr	r3, [pc, #360]	; (80012cc <MX_GPIO_Init+0x1a0>)
 8001162:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001166:	4a59      	ldr	r2, [pc, #356]	; (80012cc <MX_GPIO_Init+0x1a0>)
 8001168:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800116c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001170:	4b56      	ldr	r3, [pc, #344]	; (80012cc <MX_GPIO_Init+0x1a0>)
 8001172:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800117a:	617b      	str	r3, [r7, #20]
 800117c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800117e:	4b53      	ldr	r3, [pc, #332]	; (80012cc <MX_GPIO_Init+0x1a0>)
 8001180:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001184:	4a51      	ldr	r2, [pc, #324]	; (80012cc <MX_GPIO_Init+0x1a0>)
 8001186:	f043 0301 	orr.w	r3, r3, #1
 800118a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800118e:	4b4f      	ldr	r3, [pc, #316]	; (80012cc <MX_GPIO_Init+0x1a0>)
 8001190:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001194:	f003 0301 	and.w	r3, r3, #1
 8001198:	613b      	str	r3, [r7, #16]
 800119a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800119c:	4b4b      	ldr	r3, [pc, #300]	; (80012cc <MX_GPIO_Init+0x1a0>)
 800119e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011a2:	4a4a      	ldr	r2, [pc, #296]	; (80012cc <MX_GPIO_Init+0x1a0>)
 80011a4:	f043 0302 	orr.w	r3, r3, #2
 80011a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011ac:	4b47      	ldr	r3, [pc, #284]	; (80012cc <MX_GPIO_Init+0x1a0>)
 80011ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ba:	4b44      	ldr	r3, [pc, #272]	; (80012cc <MX_GPIO_Init+0x1a0>)
 80011bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c0:	4a42      	ldr	r2, [pc, #264]	; (80012cc <MX_GPIO_Init+0x1a0>)
 80011c2:	f043 0308 	orr.w	r3, r3, #8
 80011c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011ca:	4b40      	ldr	r3, [pc, #256]	; (80012cc <MX_GPIO_Init+0x1a0>)
 80011cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011d0:	f003 0308 	and.w	r3, r3, #8
 80011d4:	60bb      	str	r3, [r7, #8]
 80011d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011d8:	4b3c      	ldr	r3, [pc, #240]	; (80012cc <MX_GPIO_Init+0x1a0>)
 80011da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011de:	4a3b      	ldr	r2, [pc, #236]	; (80012cc <MX_GPIO_Init+0x1a0>)
 80011e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011e8:	4b38      	ldr	r3, [pc, #224]	; (80012cc <MX_GPIO_Init+0x1a0>)
 80011ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011f2:	607b      	str	r3, [r7, #4]
 80011f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011f6:	4b35      	ldr	r3, [pc, #212]	; (80012cc <MX_GPIO_Init+0x1a0>)
 80011f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011fc:	4a33      	ldr	r2, [pc, #204]	; (80012cc <MX_GPIO_Init+0x1a0>)
 80011fe:	f043 0310 	orr.w	r3, r3, #16
 8001202:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001206:	4b31      	ldr	r3, [pc, #196]	; (80012cc <MX_GPIO_Init+0x1a0>)
 8001208:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800120c:	f003 0310 	and.w	r3, r3, #16
 8001210:	603b      	str	r3, [r7, #0]
 8001212:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8001214:	2200      	movs	r2, #0
 8001216:	f244 0101 	movw	r1, #16385	; 0x4001
 800121a:	482d      	ldr	r0, [pc, #180]	; (80012d0 <MX_GPIO_Init+0x1a4>)
 800121c:	f007 fa32 	bl	8008684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001220:	2200      	movs	r2, #0
 8001222:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001226:	482b      	ldr	r0, [pc, #172]	; (80012d4 <MX_GPIO_Init+0x1a8>)
 8001228:	f007 fa2c 	bl	8008684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800122c:	2200      	movs	r2, #0
 800122e:	2102      	movs	r1, #2
 8001230:	4829      	ldr	r0, [pc, #164]	; (80012d8 <MX_GPIO_Init+0x1ac>)
 8001232:	f007 fa27 	bl	8008684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001236:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800123a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800123c:	2300      	movs	r3, #0
 800123e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001244:	f107 031c 	add.w	r3, r7, #28
 8001248:	4619      	mov	r1, r3
 800124a:	4824      	ldr	r0, [pc, #144]	; (80012dc <MX_GPIO_Init+0x1b0>)
 800124c:	f007 f86a 	bl	8008324 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8001250:	f244 0301 	movw	r3, #16385	; 0x4001
 8001254:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001256:	2301      	movs	r3, #1
 8001258:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125e:	2300      	movs	r3, #0
 8001260:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001262:	f107 031c 	add.w	r3, r7, #28
 8001266:	4619      	mov	r1, r3
 8001268:	4819      	ldr	r0, [pc, #100]	; (80012d0 <MX_GPIO_Init+0x1a4>)
 800126a:	f007 f85b 	bl	8008324 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 800126e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001272:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001274:	2301      	movs	r3, #1
 8001276:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127c:	2300      	movs	r3, #0
 800127e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001280:	f107 031c 	add.w	r3, r7, #28
 8001284:	4619      	mov	r1, r3
 8001286:	4813      	ldr	r0, [pc, #76]	; (80012d4 <MX_GPIO_Init+0x1a8>)
 8001288:	f007 f84c 	bl	8008324 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 800128c:	2380      	movs	r3, #128	; 0x80
 800128e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001290:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001294:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 800129a:	f107 031c 	add.w	r3, r7, #28
 800129e:	4619      	mov	r1, r3
 80012a0:	480f      	ldr	r0, [pc, #60]	; (80012e0 <MX_GPIO_Init+0x1b4>)
 80012a2:	f007 f83f 	bl	8008324 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80012a6:	2302      	movs	r3, #2
 80012a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012aa:	2301      	movs	r3, #1
 80012ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b2:	2300      	movs	r3, #0
 80012b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012b6:	f107 031c 	add.w	r3, r7, #28
 80012ba:	4619      	mov	r1, r3
 80012bc:	4806      	ldr	r0, [pc, #24]	; (80012d8 <MX_GPIO_Init+0x1ac>)
 80012be:	f007 f831 	bl	8008324 <HAL_GPIO_Init>

}
 80012c2:	bf00      	nop
 80012c4:	3730      	adds	r7, #48	; 0x30
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	58024400 	.word	0x58024400
 80012d0:	58020400 	.word	0x58020400
 80012d4:	58020c00 	.word	0x58020c00
 80012d8:	58021000 	.word	0x58021000
 80012dc:	58020800 	.word	0x58020800
 80012e0:	58021800 	.word	0x58021800

080012e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012e8:	b672      	cpsid	i
}
 80012ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012ec:	e7fe      	b.n	80012ec <Error_Handler+0x8>
	...

080012f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f6:	4b0a      	ldr	r3, [pc, #40]	; (8001320 <HAL_MspInit+0x30>)
 80012f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012fc:	4a08      	ldr	r2, [pc, #32]	; (8001320 <HAL_MspInit+0x30>)
 80012fe:	f043 0302 	orr.w	r3, r3, #2
 8001302:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001306:	4b06      	ldr	r3, [pc, #24]	; (8001320 <HAL_MspInit+0x30>)
 8001308:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800130c:	f003 0302 	and.w	r3, r3, #2
 8001310:	607b      	str	r3, [r7, #4]
 8001312:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	58024400 	.word	0x58024400

08001324 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b0b8      	sub	sp, #224	; 0xe0
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800133c:	f107 0310 	add.w	r3, r7, #16
 8001340:	22bc      	movs	r2, #188	; 0xbc
 8001342:	2100      	movs	r1, #0
 8001344:	4618      	mov	r0, r3
 8001346:	f00c f8c9 	bl	800d4dc <memset>
  if(hadc->Instance==ADC1)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a42      	ldr	r2, [pc, #264]	; (8001458 <HAL_ADC_MspInit+0x134>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d17d      	bne.n	8001450 <HAL_ADC_MspInit+0x12c>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001354:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001358:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 800135a:	2301      	movs	r3, #1
 800135c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 18;
 800135e:	2312      	movs	r3, #18
 8001360:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 3;
 8001362:	2303      	movs	r3, #3
 8001364:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001366:	2302      	movs	r3, #2
 8001368:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800136a:	2302      	movs	r3, #2
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800136e:	23c0      	movs	r3, #192	; 0xc0
 8001370:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001372:	2320      	movs	r3, #32
 8001374:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 6144.0;
 8001376:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800137a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800137c:	2300      	movs	r3, #0
 800137e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001382:	f107 0310 	add.w	r3, r7, #16
 8001386:	4618      	mov	r0, r3
 8001388:	f008 fae2 	bl	8009950 <HAL_RCCEx_PeriphCLKConfig>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 8001392:	f7ff ffa7 	bl	80012e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001396:	4b31      	ldr	r3, [pc, #196]	; (800145c <HAL_ADC_MspInit+0x138>)
 8001398:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800139c:	4a2f      	ldr	r2, [pc, #188]	; (800145c <HAL_ADC_MspInit+0x138>)
 800139e:	f043 0320 	orr.w	r3, r3, #32
 80013a2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80013a6:	4b2d      	ldr	r3, [pc, #180]	; (800145c <HAL_ADC_MspInit+0x138>)
 80013a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80013ac:	f003 0320 	and.w	r3, r3, #32
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b4:	4b29      	ldr	r3, [pc, #164]	; (800145c <HAL_ADC_MspInit+0x138>)
 80013b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ba:	4a28      	ldr	r2, [pc, #160]	; (800145c <HAL_ADC_MspInit+0x138>)
 80013bc:	f043 0301 	orr.w	r3, r3, #1
 80013c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013c4:	4b25      	ldr	r3, [pc, #148]	; (800145c <HAL_ADC_MspInit+0x138>)
 80013c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	60bb      	str	r3, [r7, #8]
 80013d0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013d2:	2340      	movs	r3, #64	; 0x40
 80013d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013d8:	2303      	movs	r3, #3
 80013da:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013de:	2300      	movs	r3, #0
 80013e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013e8:	4619      	mov	r1, r3
 80013ea:	481d      	ldr	r0, [pc, #116]	; (8001460 <HAL_ADC_MspInit+0x13c>)
 80013ec:	f006 ff9a 	bl	8008324 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 80013f0:	4b1c      	ldr	r3, [pc, #112]	; (8001464 <HAL_ADC_MspInit+0x140>)
 80013f2:	4a1d      	ldr	r2, [pc, #116]	; (8001468 <HAL_ADC_MspInit+0x144>)
 80013f4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80013f6:	4b1b      	ldr	r3, [pc, #108]	; (8001464 <HAL_ADC_MspInit+0x140>)
 80013f8:	2209      	movs	r2, #9
 80013fa:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013fc:	4b19      	ldr	r3, [pc, #100]	; (8001464 <HAL_ADC_MspInit+0x140>)
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001402:	4b18      	ldr	r3, [pc, #96]	; (8001464 <HAL_ADC_MspInit+0x140>)
 8001404:	2200      	movs	r2, #0
 8001406:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001408:	4b16      	ldr	r3, [pc, #88]	; (8001464 <HAL_ADC_MspInit+0x140>)
 800140a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800140e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001410:	4b14      	ldr	r3, [pc, #80]	; (8001464 <HAL_ADC_MspInit+0x140>)
 8001412:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001416:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001418:	4b12      	ldr	r3, [pc, #72]	; (8001464 <HAL_ADC_MspInit+0x140>)
 800141a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800141e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001420:	4b10      	ldr	r3, [pc, #64]	; (8001464 <HAL_ADC_MspInit+0x140>)
 8001422:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001426:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001428:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <HAL_ADC_MspInit+0x140>)
 800142a:	2200      	movs	r2, #0
 800142c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800142e:	4b0d      	ldr	r3, [pc, #52]	; (8001464 <HAL_ADC_MspInit+0x140>)
 8001430:	2200      	movs	r2, #0
 8001432:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001434:	480b      	ldr	r0, [pc, #44]	; (8001464 <HAL_ADC_MspInit+0x140>)
 8001436:	f004 fa79 	bl	800592c <HAL_DMA_Init>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <HAL_ADC_MspInit+0x120>
    {
      Error_Handler();
 8001440:	f7ff ff50 	bl	80012e4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4a07      	ldr	r2, [pc, #28]	; (8001464 <HAL_ADC_MspInit+0x140>)
 8001448:	64da      	str	r2, [r3, #76]	; 0x4c
 800144a:	4a06      	ldr	r2, [pc, #24]	; (8001464 <HAL_ADC_MspInit+0x140>)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001450:	bf00      	nop
 8001452:	37e0      	adds	r7, #224	; 0xe0
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40022000 	.word	0x40022000
 800145c:	58024400 	.word	0x58024400
 8001460:	58020000 	.word	0x58020000
 8001464:	24000360 	.word	0x24000360
 8001468:	40020010 	.word	0x40020010

0800146c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08e      	sub	sp, #56	; 0x38
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001474:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a59      	ldr	r2, [pc, #356]	; (80015f0 <HAL_ETH_MspInit+0x184>)
 800148a:	4293      	cmp	r3, r2
 800148c:	f040 80ab 	bne.w	80015e6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001490:	4b58      	ldr	r3, [pc, #352]	; (80015f4 <HAL_ETH_MspInit+0x188>)
 8001492:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001496:	4a57      	ldr	r2, [pc, #348]	; (80015f4 <HAL_ETH_MspInit+0x188>)
 8001498:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800149c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80014a0:	4b54      	ldr	r3, [pc, #336]	; (80015f4 <HAL_ETH_MspInit+0x188>)
 80014a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014aa:	623b      	str	r3, [r7, #32]
 80014ac:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80014ae:	4b51      	ldr	r3, [pc, #324]	; (80015f4 <HAL_ETH_MspInit+0x188>)
 80014b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014b4:	4a4f      	ldr	r2, [pc, #316]	; (80015f4 <HAL_ETH_MspInit+0x188>)
 80014b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014ba:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80014be:	4b4d      	ldr	r3, [pc, #308]	; (80015f4 <HAL_ETH_MspInit+0x188>)
 80014c0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014c8:	61fb      	str	r3, [r7, #28]
 80014ca:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80014cc:	4b49      	ldr	r3, [pc, #292]	; (80015f4 <HAL_ETH_MspInit+0x188>)
 80014ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014d2:	4a48      	ldr	r2, [pc, #288]	; (80015f4 <HAL_ETH_MspInit+0x188>)
 80014d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014d8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80014dc:	4b45      	ldr	r3, [pc, #276]	; (80015f4 <HAL_ETH_MspInit+0x188>)
 80014de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e6:	61bb      	str	r3, [r7, #24]
 80014e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ea:	4b42      	ldr	r3, [pc, #264]	; (80015f4 <HAL_ETH_MspInit+0x188>)
 80014ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014f0:	4a40      	ldr	r2, [pc, #256]	; (80015f4 <HAL_ETH_MspInit+0x188>)
 80014f2:	f043 0304 	orr.w	r3, r3, #4
 80014f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014fa:	4b3e      	ldr	r3, [pc, #248]	; (80015f4 <HAL_ETH_MspInit+0x188>)
 80014fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001500:	f003 0304 	and.w	r3, r3, #4
 8001504:	617b      	str	r3, [r7, #20]
 8001506:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001508:	4b3a      	ldr	r3, [pc, #232]	; (80015f4 <HAL_ETH_MspInit+0x188>)
 800150a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800150e:	4a39      	ldr	r2, [pc, #228]	; (80015f4 <HAL_ETH_MspInit+0x188>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001518:	4b36      	ldr	r3, [pc, #216]	; (80015f4 <HAL_ETH_MspInit+0x188>)
 800151a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800151e:	f003 0301 	and.w	r3, r3, #1
 8001522:	613b      	str	r3, [r7, #16]
 8001524:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001526:	4b33      	ldr	r3, [pc, #204]	; (80015f4 <HAL_ETH_MspInit+0x188>)
 8001528:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800152c:	4a31      	ldr	r2, [pc, #196]	; (80015f4 <HAL_ETH_MspInit+0x188>)
 800152e:	f043 0302 	orr.w	r3, r3, #2
 8001532:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001536:	4b2f      	ldr	r3, [pc, #188]	; (80015f4 <HAL_ETH_MspInit+0x188>)
 8001538:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800153c:	f003 0302 	and.w	r3, r3, #2
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001544:	4b2b      	ldr	r3, [pc, #172]	; (80015f4 <HAL_ETH_MspInit+0x188>)
 8001546:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800154a:	4a2a      	ldr	r2, [pc, #168]	; (80015f4 <HAL_ETH_MspInit+0x188>)
 800154c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001550:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001554:	4b27      	ldr	r3, [pc, #156]	; (80015f4 <HAL_ETH_MspInit+0x188>)
 8001556:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800155a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800155e:	60bb      	str	r3, [r7, #8]
 8001560:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001562:	2332      	movs	r3, #50	; 0x32
 8001564:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001566:	2302      	movs	r3, #2
 8001568:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156e:	2300      	movs	r3, #0
 8001570:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001572:	230b      	movs	r3, #11
 8001574:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001576:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800157a:	4619      	mov	r1, r3
 800157c:	481e      	ldr	r0, [pc, #120]	; (80015f8 <HAL_ETH_MspInit+0x18c>)
 800157e:	f006 fed1 	bl	8008324 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001582:	2386      	movs	r3, #134	; 0x86
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001586:	2302      	movs	r3, #2
 8001588:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158e:	2300      	movs	r3, #0
 8001590:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001592:	230b      	movs	r3, #11
 8001594:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001596:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800159a:	4619      	mov	r1, r3
 800159c:	4817      	ldr	r0, [pc, #92]	; (80015fc <HAL_ETH_MspInit+0x190>)
 800159e:	f006 fec1 	bl	8008324 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80015a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a8:	2302      	movs	r3, #2
 80015aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b0:	2300      	movs	r3, #0
 80015b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015b4:	230b      	movs	r3, #11
 80015b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015bc:	4619      	mov	r1, r3
 80015be:	4810      	ldr	r0, [pc, #64]	; (8001600 <HAL_ETH_MspInit+0x194>)
 80015c0:	f006 feb0 	bl	8008324 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80015c4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ca:	2302      	movs	r3, #2
 80015cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d2:	2300      	movs	r3, #0
 80015d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015d6:	230b      	movs	r3, #11
 80015d8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015de:	4619      	mov	r1, r3
 80015e0:	4808      	ldr	r0, [pc, #32]	; (8001604 <HAL_ETH_MspInit+0x198>)
 80015e2:	f006 fe9f 	bl	8008324 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80015e6:	bf00      	nop
 80015e8:	3738      	adds	r7, #56	; 0x38
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40028000 	.word	0x40028000
 80015f4:	58024400 	.word	0x58024400
 80015f8:	58020800 	.word	0x58020800
 80015fc:	58020000 	.word	0x58020000
 8001600:	58020400 	.word	0x58020400
 8001604:	58021800 	.word	0x58021800

08001608 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b0b8      	sub	sp, #224	; 0xe0
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001610:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001620:	f107 0310 	add.w	r3, r7, #16
 8001624:	22bc      	movs	r2, #188	; 0xbc
 8001626:	2100      	movs	r1, #0
 8001628:	4618      	mov	r0, r3
 800162a:	f00b ff57 	bl	800d4dc <memset>
  if(huart->Instance==USART3)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a25      	ldr	r2, [pc, #148]	; (80016c8 <HAL_UART_MspInit+0xc0>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d142      	bne.n	80016be <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001638:	2302      	movs	r3, #2
 800163a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800163c:	2300      	movs	r3, #0
 800163e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001642:	f107 0310 	add.w	r3, r7, #16
 8001646:	4618      	mov	r0, r3
 8001648:	f008 f982 	bl	8009950 <HAL_RCCEx_PeriphCLKConfig>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001652:	f7ff fe47 	bl	80012e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001656:	4b1d      	ldr	r3, [pc, #116]	; (80016cc <HAL_UART_MspInit+0xc4>)
 8001658:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800165c:	4a1b      	ldr	r2, [pc, #108]	; (80016cc <HAL_UART_MspInit+0xc4>)
 800165e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001662:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001666:	4b19      	ldr	r3, [pc, #100]	; (80016cc <HAL_UART_MspInit+0xc4>)
 8001668:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800166c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001674:	4b15      	ldr	r3, [pc, #84]	; (80016cc <HAL_UART_MspInit+0xc4>)
 8001676:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800167a:	4a14      	ldr	r2, [pc, #80]	; (80016cc <HAL_UART_MspInit+0xc4>)
 800167c:	f043 0308 	orr.w	r3, r3, #8
 8001680:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001684:	4b11      	ldr	r3, [pc, #68]	; (80016cc <HAL_UART_MspInit+0xc4>)
 8001686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800168a:	f003 0308 	and.w	r3, r3, #8
 800168e:	60bb      	str	r3, [r7, #8]
 8001690:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001692:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001696:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169a:	2302      	movs	r3, #2
 800169c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a6:	2300      	movs	r3, #0
 80016a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80016ac:	2307      	movs	r3, #7
 80016ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016b2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80016b6:	4619      	mov	r1, r3
 80016b8:	4805      	ldr	r0, [pc, #20]	; (80016d0 <HAL_UART_MspInit+0xc8>)
 80016ba:	f006 fe33 	bl	8008324 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80016be:	bf00      	nop
 80016c0:	37e0      	adds	r7, #224	; 0xe0
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40004800 	.word	0x40004800
 80016cc:	58024400 	.word	0x58024400
 80016d0:	58020c00 	.word	0x58020c00

080016d4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b0b8      	sub	sp, #224	; 0xe0
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016dc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	60da      	str	r2, [r3, #12]
 80016ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016ec:	f107 0310 	add.w	r3, r7, #16
 80016f0:	22bc      	movs	r2, #188	; 0xbc
 80016f2:	2100      	movs	r1, #0
 80016f4:	4618      	mov	r0, r3
 80016f6:	f00b fef1 	bl	800d4dc <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a2f      	ldr	r2, [pc, #188]	; (80017bc <HAL_PCD_MspInit+0xe8>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d156      	bne.n	80017b2 <HAL_PCD_MspInit+0xde>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001704:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001708:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800170a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800170e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001712:	f107 0310 	add.w	r3, r7, #16
 8001716:	4618      	mov	r0, r3
 8001718:	f008 f91a 	bl	8009950 <HAL_RCCEx_PeriphCLKConfig>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8001722:	f7ff fddf 	bl	80012e4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001726:	f007 f949 	bl	80089bc <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800172a:	4b25      	ldr	r3, [pc, #148]	; (80017c0 <HAL_PCD_MspInit+0xec>)
 800172c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001730:	4a23      	ldr	r2, [pc, #140]	; (80017c0 <HAL_PCD_MspInit+0xec>)
 8001732:	f043 0301 	orr.w	r3, r3, #1
 8001736:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800173a:	4b21      	ldr	r3, [pc, #132]	; (80017c0 <HAL_PCD_MspInit+0xec>)
 800173c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001740:	f003 0301 	and.w	r3, r3, #1
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001748:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800174c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001750:	2302      	movs	r3, #2
 8001752:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175c:	2300      	movs	r3, #0
 800175e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001762:	230a      	movs	r3, #10
 8001764:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001768:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800176c:	4619      	mov	r1, r3
 800176e:	4815      	ldr	r0, [pc, #84]	; (80017c4 <HAL_PCD_MspInit+0xf0>)
 8001770:	f006 fdd8 	bl	8008324 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001774:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001778:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800177c:	2300      	movs	r3, #0
 800177e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001788:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800178c:	4619      	mov	r1, r3
 800178e:	480d      	ldr	r0, [pc, #52]	; (80017c4 <HAL_PCD_MspInit+0xf0>)
 8001790:	f006 fdc8 	bl	8008324 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001794:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <HAL_PCD_MspInit+0xec>)
 8001796:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800179a:	4a09      	ldr	r2, [pc, #36]	; (80017c0 <HAL_PCD_MspInit+0xec>)
 800179c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80017a0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80017a4:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <HAL_PCD_MspInit+0xec>)
 80017a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80017aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80017ae:	60bb      	str	r3, [r7, #8]
 80017b0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80017b2:	bf00      	nop
 80017b4:	37e0      	adds	r7, #224	; 0xe0
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40080000 	.word	0x40080000
 80017c0:	58024400 	.word	0x58024400
 80017c4:	58020000 	.word	0x58020000

080017c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017cc:	e7fe      	b.n	80017cc <NMI_Handler+0x4>

080017ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017d2:	e7fe      	b.n	80017d2 <HardFault_Handler+0x4>

080017d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017d8:	e7fe      	b.n	80017d8 <MemManage_Handler+0x4>

080017da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017da:	b480      	push	{r7}
 80017dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017de:	e7fe      	b.n	80017de <BusFault_Handler+0x4>

080017e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017e4:	e7fe      	b.n	80017e4 <UsageFault_Handler+0x4>

080017e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr

08001810 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001814:	f002 fc38 	bl	8004088 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001818:	bf00      	nop
 800181a:	bd80      	pop	{r7, pc}

0800181c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001820:	4802      	ldr	r0, [pc, #8]	; (800182c <DMA1_Stream0_IRQHandler+0x10>)
 8001822:	f004 fe49 	bl	80064b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	24000360 	.word	0x24000360

08001830 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
	return 1;
 8001834:	2301      	movs	r3, #1
}
 8001836:	4618      	mov	r0, r3
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <_kill>:

int _kill(int pid, int sig)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800184a:	f00b fe1d 	bl	800d488 <__errno>
 800184e:	4603      	mov	r3, r0
 8001850:	2216      	movs	r2, #22
 8001852:	601a      	str	r2, [r3, #0]
	return -1;
 8001854:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001858:	4618      	mov	r0, r3
 800185a:	3708      	adds	r7, #8
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <_exit>:

void _exit (int status)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001868:	f04f 31ff 	mov.w	r1, #4294967295
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f7ff ffe7 	bl	8001840 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001872:	e7fe      	b.n	8001872 <_exit+0x12>

08001874 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001880:	2300      	movs	r3, #0
 8001882:	617b      	str	r3, [r7, #20]
 8001884:	e00a      	b.n	800189c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001886:	f3af 8000 	nop.w
 800188a:	4601      	mov	r1, r0
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	1c5a      	adds	r2, r3, #1
 8001890:	60ba      	str	r2, [r7, #8]
 8001892:	b2ca      	uxtb	r2, r1
 8001894:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	3301      	adds	r3, #1
 800189a:	617b      	str	r3, [r7, #20]
 800189c:	697a      	ldr	r2, [r7, #20]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	dbf0      	blt.n	8001886 <_read+0x12>
	}

return len;
 80018a4:	687b      	ldr	r3, [r7, #4]
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3718      	adds	r7, #24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b086      	sub	sp, #24
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	60f8      	str	r0, [r7, #12]
 80018b6:	60b9      	str	r1, [r7, #8]
 80018b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ba:	2300      	movs	r3, #0
 80018bc:	617b      	str	r3, [r7, #20]
 80018be:	e009      	b.n	80018d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	1c5a      	adds	r2, r3, #1
 80018c4:	60ba      	str	r2, [r7, #8]
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	3301      	adds	r3, #1
 80018d2:	617b      	str	r3, [r7, #20]
 80018d4:	697a      	ldr	r2, [r7, #20]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	429a      	cmp	r2, r3
 80018da:	dbf1      	blt.n	80018c0 <_write+0x12>
	}
	return len;
 80018dc:	687b      	ldr	r3, [r7, #4]
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3718      	adds	r7, #24
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <_close>:

int _close(int file)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b083      	sub	sp, #12
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
	return -1;
 80018ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr

080018fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018fe:	b480      	push	{r7}
 8001900:	b083      	sub	sp, #12
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
 8001906:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800190e:	605a      	str	r2, [r3, #4]
	return 0;
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr

0800191e <_isatty>:

int _isatty(int file)
{
 800191e:	b480      	push	{r7}
 8001920:	b083      	sub	sp, #12
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
	return 1;
 8001926:	2301      	movs	r3, #1
}
 8001928:	4618      	mov	r0, r3
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001934:	b480      	push	{r7}
 8001936:	b085      	sub	sp, #20
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
	return 0;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	3714      	adds	r7, #20
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
	...

08001950 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b086      	sub	sp, #24
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001958:	4a14      	ldr	r2, [pc, #80]	; (80019ac <_sbrk+0x5c>)
 800195a:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <_sbrk+0x60>)
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001964:	4b13      	ldr	r3, [pc, #76]	; (80019b4 <_sbrk+0x64>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d102      	bne.n	8001972 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800196c:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <_sbrk+0x64>)
 800196e:	4a12      	ldr	r2, [pc, #72]	; (80019b8 <_sbrk+0x68>)
 8001970:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001972:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <_sbrk+0x64>)
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4413      	add	r3, r2
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	429a      	cmp	r2, r3
 800197e:	d207      	bcs.n	8001990 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001980:	f00b fd82 	bl	800d488 <__errno>
 8001984:	4603      	mov	r3, r0
 8001986:	220c      	movs	r2, #12
 8001988:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800198a:	f04f 33ff 	mov.w	r3, #4294967295
 800198e:	e009      	b.n	80019a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001990:	4b08      	ldr	r3, [pc, #32]	; (80019b4 <_sbrk+0x64>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001996:	4b07      	ldr	r3, [pc, #28]	; (80019b4 <_sbrk+0x64>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4413      	add	r3, r2
 800199e:	4a05      	ldr	r2, [pc, #20]	; (80019b4 <_sbrk+0x64>)
 80019a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019a2:	68fb      	ldr	r3, [r7, #12]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3718      	adds	r7, #24
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	24080000 	.word	0x24080000
 80019b0:	00000400 	.word	0x00000400
 80019b4:	24004a44 	.word	0x24004a44
 80019b8:	24004a60 	.word	0x24004a60

080019bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80019c0:	4b37      	ldr	r3, [pc, #220]	; (8001aa0 <SystemInit+0xe4>)
 80019c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019c6:	4a36      	ldr	r2, [pc, #216]	; (8001aa0 <SystemInit+0xe4>)
 80019c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80019d0:	4b34      	ldr	r3, [pc, #208]	; (8001aa4 <SystemInit+0xe8>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 030f 	and.w	r3, r3, #15
 80019d8:	2b06      	cmp	r3, #6
 80019da:	d807      	bhi.n	80019ec <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80019dc:	4b31      	ldr	r3, [pc, #196]	; (8001aa4 <SystemInit+0xe8>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f023 030f 	bic.w	r3, r3, #15
 80019e4:	4a2f      	ldr	r2, [pc, #188]	; (8001aa4 <SystemInit+0xe8>)
 80019e6:	f043 0307 	orr.w	r3, r3, #7
 80019ea:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80019ec:	4b2e      	ldr	r3, [pc, #184]	; (8001aa8 <SystemInit+0xec>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a2d      	ldr	r2, [pc, #180]	; (8001aa8 <SystemInit+0xec>)
 80019f2:	f043 0301 	orr.w	r3, r3, #1
 80019f6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80019f8:	4b2b      	ldr	r3, [pc, #172]	; (8001aa8 <SystemInit+0xec>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80019fe:	4b2a      	ldr	r3, [pc, #168]	; (8001aa8 <SystemInit+0xec>)
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	4929      	ldr	r1, [pc, #164]	; (8001aa8 <SystemInit+0xec>)
 8001a04:	4b29      	ldr	r3, [pc, #164]	; (8001aac <SystemInit+0xf0>)
 8001a06:	4013      	ands	r3, r2
 8001a08:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a0a:	4b26      	ldr	r3, [pc, #152]	; (8001aa4 <SystemInit+0xe8>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0308 	and.w	r3, r3, #8
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d007      	beq.n	8001a26 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a16:	4b23      	ldr	r3, [pc, #140]	; (8001aa4 <SystemInit+0xe8>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f023 030f 	bic.w	r3, r3, #15
 8001a1e:	4a21      	ldr	r2, [pc, #132]	; (8001aa4 <SystemInit+0xe8>)
 8001a20:	f043 0307 	orr.w	r3, r3, #7
 8001a24:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001a26:	4b20      	ldr	r3, [pc, #128]	; (8001aa8 <SystemInit+0xec>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001a2c:	4b1e      	ldr	r3, [pc, #120]	; (8001aa8 <SystemInit+0xec>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001a32:	4b1d      	ldr	r3, [pc, #116]	; (8001aa8 <SystemInit+0xec>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001a38:	4b1b      	ldr	r3, [pc, #108]	; (8001aa8 <SystemInit+0xec>)
 8001a3a:	4a1d      	ldr	r2, [pc, #116]	; (8001ab0 <SystemInit+0xf4>)
 8001a3c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001a3e:	4b1a      	ldr	r3, [pc, #104]	; (8001aa8 <SystemInit+0xec>)
 8001a40:	4a1c      	ldr	r2, [pc, #112]	; (8001ab4 <SystemInit+0xf8>)
 8001a42:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001a44:	4b18      	ldr	r3, [pc, #96]	; (8001aa8 <SystemInit+0xec>)
 8001a46:	4a1c      	ldr	r2, [pc, #112]	; (8001ab8 <SystemInit+0xfc>)
 8001a48:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001a4a:	4b17      	ldr	r3, [pc, #92]	; (8001aa8 <SystemInit+0xec>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001a50:	4b15      	ldr	r3, [pc, #84]	; (8001aa8 <SystemInit+0xec>)
 8001a52:	4a19      	ldr	r2, [pc, #100]	; (8001ab8 <SystemInit+0xfc>)
 8001a54:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001a56:	4b14      	ldr	r3, [pc, #80]	; (8001aa8 <SystemInit+0xec>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001a5c:	4b12      	ldr	r3, [pc, #72]	; (8001aa8 <SystemInit+0xec>)
 8001a5e:	4a16      	ldr	r2, [pc, #88]	; (8001ab8 <SystemInit+0xfc>)
 8001a60:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001a62:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <SystemInit+0xec>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a68:	4b0f      	ldr	r3, [pc, #60]	; (8001aa8 <SystemInit+0xec>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a0e      	ldr	r2, [pc, #56]	; (8001aa8 <SystemInit+0xec>)
 8001a6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a72:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001a74:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <SystemInit+0xec>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001a7a:	4b10      	ldr	r3, [pc, #64]	; (8001abc <SystemInit+0x100>)
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	4b10      	ldr	r3, [pc, #64]	; (8001ac0 <SystemInit+0x104>)
 8001a80:	4013      	ands	r3, r2
 8001a82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a86:	d202      	bcs.n	8001a8e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001a88:	4b0e      	ldr	r3, [pc, #56]	; (8001ac4 <SystemInit+0x108>)
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001a8e:	4b0e      	ldr	r3, [pc, #56]	; (8001ac8 <SystemInit+0x10c>)
 8001a90:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001a94:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001a96:	bf00      	nop
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	e000ed00 	.word	0xe000ed00
 8001aa4:	52002000 	.word	0x52002000
 8001aa8:	58024400 	.word	0x58024400
 8001aac:	eaf6ed7f 	.word	0xeaf6ed7f
 8001ab0:	02020200 	.word	0x02020200
 8001ab4:	01ff0000 	.word	0x01ff0000
 8001ab8:	01010280 	.word	0x01010280
 8001abc:	5c001000 	.word	0x5c001000
 8001ac0:	ffff0000 	.word	0xffff0000
 8001ac4:	51008108 	.word	0x51008108
 8001ac8:	52004000 	.word	0x52004000

08001acc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001acc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b04 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ad0:	f7ff ff74 	bl	80019bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ad4:	480c      	ldr	r0, [pc, #48]	; (8001b08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ad6:	490d      	ldr	r1, [pc, #52]	; (8001b0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ad8:	4a0d      	ldr	r2, [pc, #52]	; (8001b10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ada:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001adc:	e002      	b.n	8001ae4 <LoopCopyDataInit>

08001ade <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ade:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ae0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ae2:	3304      	adds	r3, #4

08001ae4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ae4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ae6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ae8:	d3f9      	bcc.n	8001ade <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aea:	4a0a      	ldr	r2, [pc, #40]	; (8001b14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001aec:	4c0a      	ldr	r4, [pc, #40]	; (8001b18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001aee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001af0:	e001      	b.n	8001af6 <LoopFillZerobss>

08001af2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001af2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001af4:	3204      	adds	r2, #4

08001af6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001af6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001af8:	d3fb      	bcc.n	8001af2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001afa:	f00b fccb 	bl	800d494 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001afe:	f7ff f909 	bl	8000d14 <main>
  bx  lr
 8001b02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b04:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001b08:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001b0c:	240001e8 	.word	0x240001e8
  ldr r2, =_sidata
 8001b10:	08014f34 	.word	0x08014f34
  ldr r2, =_sbss
 8001b14:	240002a8 	.word	0x240002a8
  ldr r4, =_ebss
 8001b18:	24004a5c 	.word	0x24004a5c

08001b1c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b1c:	e7fe      	b.n	8001b1c <ADC3_IRQHandler>

08001b1e <arm_sqrt_f32>:
   * <code>in</code> is negative value and returns zero output for negative values.
   */
  static __INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b082      	sub	sp, #8
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	ed87 0a01 	vstr	s0, [r7, #4]
 8001b28:	6038      	str	r0, [r7, #0]
    if(in >= 0.0f)
 8001b2a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b36:	db0a      	blt.n	8001b4e <arm_sqrt_f32+0x30>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 8001b38:	ed97 0a01 	vldr	s0, [r7, #4]
 8001b3c:	f010 f840 	bl	8011bc0 <sqrtf>
 8001b40:	eef0 7a40 	vmov.f32	s15, s0
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	edc3 7a00 	vstr	s15, [r3]
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	e005      	b.n	8001b5a <arm_sqrt_f32+0x3c>
    }
    else
    {
      *pOut = 0.0f;
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	f04f 0200 	mov.w	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8001b56:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <arm_cmplx_mag_f32>:

void arm_cmplx_mag_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t numSamples)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b088      	sub	sp, #32
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	60f8      	str	r0, [r7, #12]
 8001b6a:	60b9      	str	r1, [r7, #8]
 8001b6c:	607a      	str	r2, [r7, #4]

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  uint32_t blkCnt;                               /* loop counter */

  /*loop Unrolling */
  blkCnt = numSamples >> 2u;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	089b      	lsrs	r3, r3, #2
 8001b72:	61fb      	str	r3, [r7, #28]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8001b74:	e072      	b.n	8001c5c <arm_cmplx_mag_f32+0xfa>
  {

    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
    realIn = *pSrc++;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	1d1a      	adds	r2, r3, #4
 8001b7a:	60fa      	str	r2, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	1d1a      	adds	r2, r3, #4
 8001b84:	60fa      	str	r2, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	617b      	str	r3, [r7, #20]
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8001b8a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b8e:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001b92:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b96:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001b9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	1d1a      	adds	r2, r3, #4
 8001ba2:	60ba      	str	r2, [r7, #8]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	eeb0 0a67 	vmov.f32	s0, s15
 8001baa:	f7ff ffb8 	bl	8001b1e <arm_sqrt_f32>

    realIn = *pSrc++;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	1d1a      	adds	r2, r3, #4
 8001bb2:	60fa      	str	r2, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	1d1a      	adds	r2, r3, #4
 8001bbc:	60fa      	str	r2, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	617b      	str	r3, [r7, #20]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8001bc2:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bc6:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001bca:	edd7 7a05 	vldr	s15, [r7, #20]
 8001bce:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001bd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	1d1a      	adds	r2, r3, #4
 8001bda:	60ba      	str	r2, [r7, #8]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	eeb0 0a67 	vmov.f32	s0, s15
 8001be2:	f7ff ff9c 	bl	8001b1e <arm_sqrt_f32>

    realIn = *pSrc++;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	1d1a      	adds	r2, r3, #4
 8001bea:	60fa      	str	r2, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	1d1a      	adds	r2, r3, #4
 8001bf4:	60fa      	str	r2, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	617b      	str	r3, [r7, #20]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8001bfa:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bfe:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001c02:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c06:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001c0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	1d1a      	adds	r2, r3, #4
 8001c12:	60ba      	str	r2, [r7, #8]
 8001c14:	4618      	mov	r0, r3
 8001c16:	eeb0 0a67 	vmov.f32	s0, s15
 8001c1a:	f7ff ff80 	bl	8001b1e <arm_sqrt_f32>

    realIn = *pSrc++;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	1d1a      	adds	r2, r3, #4
 8001c22:	60fa      	str	r2, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	1d1a      	adds	r2, r3, #4
 8001c2c:	60fa      	str	r2, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	617b      	str	r3, [r7, #20]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8001c32:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c36:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001c3a:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c3e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001c42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c46:	68bb      	ldr	r3, [r7, #8]
 8001c48:	1d1a      	adds	r2, r3, #4
 8001c4a:	60ba      	str	r2, [r7, #8]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c52:	f7ff ff64 	bl	8001b1e <arm_sqrt_f32>


    /* Decrement the loop counter */
    blkCnt--;
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	61fb      	str	r3, [r7, #28]
  while(blkCnt > 0u)
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d189      	bne.n	8001b76 <arm_cmplx_mag_f32+0x14>
  }

  /* If the numSamples is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = numSamples % 0x4u;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f003 0303 	and.w	r3, r3, #3
 8001c68:	61fb      	str	r3, [r7, #28]

  while(blkCnt > 0u)
 8001c6a:	e01e      	b.n	8001caa <arm_cmplx_mag_f32+0x148>
  {
    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
    realIn = *pSrc++;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	1d1a      	adds	r2, r3, #4
 8001c70:	60fa      	str	r2, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	1d1a      	adds	r2, r3, #4
 8001c7a:	60fa      	str	r2, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	617b      	str	r3, [r7, #20]
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8001c80:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c84:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001c88:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c8c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001c90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	1d1a      	adds	r2, r3, #4
 8001c98:	60ba      	str	r2, [r7, #8]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	eeb0 0a67 	vmov.f32	s0, s15
 8001ca0:	f7ff ff3d 	bl	8001b1e <arm_sqrt_f32>

    /* Decrement the loop counter */
    blkCnt--;
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	61fb      	str	r3, [r7, #28]
  while(blkCnt > 0u)
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d1dd      	bne.n	8001c6c <arm_cmplx_mag_f32+0x10a>
    numSamples--;
  }

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

}
 8001cb0:	bf00      	nop
 8001cb2:	bf00      	nop
 8001cb4:	3720      	adds	r7, #32
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <arm_max_f32>:
void arm_max_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult,
  uint32_t * pIndex)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b08b      	sub	sp, #44	; 0x2c
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	60f8      	str	r0, [r7, #12]
 8001cc2:	60b9      	str	r1, [r7, #8]
 8001cc4:	607a      	str	r2, [r7, #4]
 8001cc6:	603b      	str	r3, [r7, #0]
  /* Run the below code for Cortex-M4 and Cortex-M3 */
  float32_t maxVal1, maxVal2, out;               /* Temporary variables to store the output value. */
  uint32_t blkCnt, outIndex, count;              /* loop counter */

  /* Initialise the count value. */
  count = 0u;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	61bb      	str	r3, [r7, #24]
  /* Initialise the index value to zero. */
  outIndex = 0u;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	61fb      	str	r3, [r7, #28]
  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	1d1a      	adds	r2, r3, #4
 8001cd4:	60fa      	str	r2, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Loop unrolling */
  blkCnt = (blockSize - 1u) >> 2u;
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	089b      	lsrs	r3, r3, #2
 8001ce0:	623b      	str	r3, [r7, #32]

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  while(blkCnt > 0u)
 8001ce2:	e051      	b.n	8001d88 <arm_max_f32+0xce>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	1d1a      	adds	r2, r3, #4
 8001ce8:	60fa      	str	r2, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	617b      	str	r3, [r7, #20]

    maxVal2 = *pSrc++;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	1d1a      	adds	r2, r3, #4
 8001cf2:	60fa      	str	r2, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if(out < maxVal1)
 8001cf8:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001cfc:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d08:	d504      	bpl.n	8001d14 <arm_max_f32+0x5a>
    {
      /* Update the maximum value and its index */
      out = maxVal1;
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 1u;
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	3301      	adds	r3, #1
 8001d12:	61fb      	str	r3, [r7, #28]
    }

    maxVal1 = *pSrc++;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	1d1a      	adds	r2, r3, #4
 8001d18:	60fa      	str	r2, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	617b      	str	r3, [r7, #20]

    /* compare for the maximum value */
    if(out < maxVal2)
 8001d1e:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001d22:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d26:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d2e:	d504      	bpl.n	8001d3a <arm_max_f32+0x80>
    {
      /* Update the maximum value and its index */
      out = maxVal2;
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 2u;
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	3302      	adds	r3, #2
 8001d38:	61fb      	str	r3, [r7, #28]
    }

    maxVal2 = *pSrc++;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	1d1a      	adds	r2, r3, #4
 8001d3e:	60fa      	str	r2, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if(out < maxVal1)
 8001d44:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001d48:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d54:	d504      	bpl.n	8001d60 <arm_max_f32+0xa6>
    {
      /* Update the maximum value and its index */
      out = maxVal1;
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 3u;
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	3303      	adds	r3, #3
 8001d5e:	61fb      	str	r3, [r7, #28]
    }

    /* compare for the maximum value */
    if(out < maxVal2)
 8001d60:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001d64:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d70:	d504      	bpl.n	8001d7c <arm_max_f32+0xc2>
    {
      /* Update the maximum value and its index */
      out = maxVal2;
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 4u;
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	3304      	adds	r3, #4
 8001d7a:	61fb      	str	r3, [r7, #28]
    }

    count += 4u;
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	3304      	adds	r3, #4
 8001d80:	61bb      	str	r3, [r7, #24]

    /* Decrement the loop counter */
    blkCnt--;
 8001d82:	6a3b      	ldr	r3, [r7, #32]
 8001d84:	3b01      	subs	r3, #1
 8001d86:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0u)
 8001d88:	6a3b      	ldr	r3, [r7, #32]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1aa      	bne.n	8001ce4 <arm_max_f32+0x2a>
  }

  /* if (blockSize - 1u) is not multiple of 4 */
  blkCnt = (blockSize - 1u) % 4u;
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	3b01      	subs	r3, #1
 8001d92:	f003 0303 	and.w	r3, r3, #3
 8001d96:	623b      	str	r3, [r7, #32]

  blkCnt = (blockSize - 1u);

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 8001d98:	e016      	b.n	8001dc8 <arm_max_f32+0x10e>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	1d1a      	adds	r2, r3, #4
 8001d9e:	60fa      	str	r2, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	617b      	str	r3, [r7, #20]

    /* compare for the maximum value */
    if(out < maxVal1)
 8001da4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001da8:	edd7 7a05 	vldr	s15, [r7, #20]
 8001dac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db4:	d505      	bpl.n	8001dc2 <arm_max_f32+0x108>
    {
      /* Update the maximum value and it's index */
      out = maxVal1;
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = blockSize - blkCnt;
 8001dba:	68ba      	ldr	r2, [r7, #8]
 8001dbc:	6a3b      	ldr	r3, [r7, #32]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	61fb      	str	r3, [r7, #28]
    }


    /* Decrement the loop counter */
    blkCnt--;
 8001dc2:	6a3b      	ldr	r3, [r7, #32]
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0u)
 8001dc8:	6a3b      	ldr	r3, [r7, #32]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1e5      	bne.n	8001d9a <arm_max_f32+0xe0>

  }

  /* Store the maximum value and it's index into destination pointers */
  *pResult = out;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dd2:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	69fa      	ldr	r2, [r7, #28]
 8001dd8:	601a      	str	r2, [r3, #0]
}
 8001dda:	bf00      	nop
 8001ddc:	372c      	adds	r7, #44	; 0x2c
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <arm_cfft_radix8by2_f32>:
* \endcode
* 
*/

void arm_cfft_radix8by2_f32( arm_cfft_instance_f32 * S, float32_t * p1) 
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b0a0      	sub	sp, #128	; 0x80
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
 8001dee:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	881b      	ldrh	r3, [r3, #0]
 8001df4:	66bb      	str	r3, [r7, #104]	; 0x68
    float32_t * pCol1, * pCol2, * pMid1, * pMid2;
    float32_t * p2 = p1 + L;
 8001df6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	683a      	ldr	r2, [r7, #0]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	677b      	str	r3, [r7, #116]	; 0x74
    const float32_t * tw = (float32_t *) S->pTwiddle;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	673b      	str	r3, [r7, #112]	; 0x70
    float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
    float32_t m0, m1, m2, m3;
    uint32_t l;

    pCol1 = p1;
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	667b      	str	r3, [r7, #100]	; 0x64
    pCol2 = p2;
 8001e0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e0c:	663b      	str	r3, [r7, #96]	; 0x60

    //    Define new length
    L >>= 1;
 8001e0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e10:	085b      	lsrs	r3, r3, #1
 8001e12:	66bb      	str	r3, [r7, #104]	; 0x68
    //    Initialize mid pointers
    pMid1 = p1 + L;
 8001e14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	683a      	ldr	r2, [r7, #0]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	67fb      	str	r3, [r7, #124]	; 0x7c
    pMid2 = p2 + L;
 8001e1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001e24:	4413      	add	r3, r2
 8001e26:	67bb      	str	r3, [r7, #120]	; 0x78

    // do two dot Fourier transform
    for ( l = L >> 2; l > 0; l-- ) 
 8001e28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e2a:	089b      	lsrs	r3, r3, #2
 8001e2c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001e2e:	e1b6      	b.n	800219e <arm_cfft_radix8by2_f32+0x3b8>
    {
        t1[0] = p1[0];
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	63bb      	str	r3, [r7, #56]	; 0x38
        t1[1] = p1[1];
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        t1[2] = p1[2];
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	643b      	str	r3, [r7, #64]	; 0x40
        t1[3] = p1[3];
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	647b      	str	r3, [r7, #68]	; 0x44

        t2[0] = p2[0];
 8001e48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	62bb      	str	r3, [r7, #40]	; 0x28
        t2[1] = p2[1];
 8001e4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	62fb      	str	r3, [r7, #44]	; 0x2c
        t2[2] = p2[2];
 8001e54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	633b      	str	r3, [r7, #48]	; 0x30
        t2[3] = p2[3];
 8001e5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	637b      	str	r3, [r7, #52]	; 0x34

        t3[0] = pMid1[0];
 8001e60:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	61bb      	str	r3, [r7, #24]
        t3[1] = pMid1[1];
 8001e66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	61fb      	str	r3, [r7, #28]
        t3[2] = pMid1[2];
 8001e6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	623b      	str	r3, [r7, #32]
        t3[3] = pMid1[3];
 8001e72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	627b      	str	r3, [r7, #36]	; 0x24

        t4[0] = pMid2[0];
 8001e78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	60bb      	str	r3, [r7, #8]
        t4[1] = pMid2[1];
 8001e7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	60fb      	str	r3, [r7, #12]
        t4[2] = pMid2[2];
 8001e84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	613b      	str	r3, [r7, #16]
        t4[3] = pMid2[3];
 8001e8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	617b      	str	r3, [r7, #20]

        *p1++ = t1[0] + t2[0];
 8001e90:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001e94:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	1d1a      	adds	r2, r3, #4
 8001e9c:	603a      	str	r2, [r7, #0]
 8001e9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ea2:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[1] + t2[1];
 8001ea6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001eaa:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	1d1a      	adds	r2, r3, #4
 8001eb2:	603a      	str	r2, [r7, #0]
 8001eb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eb8:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[2] + t2[2];
 8001ebc:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001ec0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	1d1a      	adds	r2, r3, #4
 8001ec8:	603a      	str	r2, [r7, #0]
 8001eca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ece:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[3] + t2[3];    // col 1
 8001ed2:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001ed6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	1d1a      	adds	r2, r3, #4
 8001ede:	603a      	str	r2, [r7, #0]
 8001ee0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ee4:	edc3 7a00 	vstr	s15, [r3]

        t2[0] = t1[0] - t2[0];
 8001ee8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001eec:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001ef0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ef4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        t2[1] = t1[1] - t2[1];
 8001ef8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001efc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001f00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f04:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        t2[2] = t1[2] - t2[2];
 8001f08:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001f0c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001f10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f14:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        t2[3] = t1[3] - t2[3];    // for col 2
 8001f18:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8001f1c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8001f20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f24:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

        *pMid1++ = t3[0] + t4[0];
 8001f28:	ed97 7a06 	vldr	s14, [r7, #24]
 8001f2c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f32:	1d1a      	adds	r2, r3, #4
 8001f34:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001f36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f3a:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[1] + t4[1];
 8001f3e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001f42:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f48:	1d1a      	adds	r2, r3, #4
 8001f4a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001f4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f50:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[2] + t4[2];
 8001f54:	ed97 7a08 	vldr	s14, [r7, #32]
 8001f58:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f5e:	1d1a      	adds	r2, r3, #4
 8001f60:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001f62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f66:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[3] + t4[3]; // col 1
 8001f6a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001f6e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001f74:	1d1a      	adds	r2, r3, #4
 8001f76:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001f78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f7c:	edc3 7a00 	vstr	s15, [r3]

        t4[0] = t4[0] - t3[0];
 8001f80:	ed97 7a02 	vldr	s14, [r7, #8]
 8001f84:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f8c:	edc7 7a02 	vstr	s15, [r7, #8]
        t4[1] = t4[1] - t3[1];
 8001f90:	ed97 7a03 	vldr	s14, [r7, #12]
 8001f94:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f9c:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[2] = t4[2] - t3[2];
 8001fa0:	ed97 7a04 	vldr	s14, [r7, #16]
 8001fa4:	edd7 7a08 	vldr	s15, [r7, #32]
 8001fa8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fac:	edc7 7a04 	vstr	s15, [r7, #16]
        t4[3] = t4[3] - t3[3];    // for col 2
 8001fb0:	ed97 7a05 	vldr	s14, [r7, #20]
 8001fb4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001fb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fbc:	edc7 7a05 	vstr	s15, [r7, #20]

        twR = *tw++;
 8001fc0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fc2:	1d1a      	adds	r2, r3, #4
 8001fc4:	673a      	str	r2, [r7, #112]	; 0x70
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 8001fca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fcc:	1d1a      	adds	r2, r3, #4
 8001fce:	673a      	str	r2, [r7, #112]	; 0x70
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	65bb      	str	r3, [r7, #88]	; 0x58

        // multiply by twiddle factors
        m0 = t2[0] * twR;
 8001fd4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001fd8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001fdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fe0:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t2[1] * twI;
 8001fe4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001fe8:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001fec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ff0:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t2[1] * twR;
 8001ff4:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001ff8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001ffc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002000:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t2[0] * twI;
 8002004:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002008:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800200c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002010:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        // R  =  R  *  Tr - I * Ti
        *p2++ = m0 + m1;
 8002014:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002016:	1d1a      	adds	r2, r3, #4
 8002018:	677a      	str	r2, [r7, #116]	; 0x74
 800201a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800201e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002022:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002026:	edc3 7a00 	vstr	s15, [r3]
        // I  =  I  *  Tr + R * Ti
        *p2++ = m2 - m3;
 800202a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800202c:	1d1a      	adds	r2, r3, #4
 800202e:	677a      	str	r2, [r7, #116]	; 0x74
 8002030:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002034:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002038:	ee77 7a67 	vsub.f32	s15, s14, s15
 800203c:	edc3 7a00 	vstr	s15, [r3]
        
        // use vertical symmetry
        //  0.9988 - 0.0491i <==> -0.0491 - 0.9988i
        m0 = t4[0] * twI;
 8002040:	edd7 7a02 	vldr	s15, [r7, #8]
 8002044:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002048:	ee67 7a27 	vmul.f32	s15, s14, s15
 800204c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t4[1] * twR;
 8002050:	edd7 7a03 	vldr	s15, [r7, #12]
 8002054:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002058:	ee67 7a27 	vmul.f32	s15, s14, s15
 800205c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t4[1] * twI;
 8002060:	edd7 7a03 	vldr	s15, [r7, #12]
 8002064:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002068:	ee67 7a27 	vmul.f32	s15, s14, s15
 800206c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t4[0] * twR;
 8002070:	edd7 7a02 	vldr	s15, [r7, #8]
 8002074:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002078:	ee67 7a27 	vmul.f32	s15, s14, s15
 800207c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        *pMid2++ = m0 - m1;
 8002080:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002082:	1d1a      	adds	r2, r3, #4
 8002084:	67ba      	str	r2, [r7, #120]	; 0x78
 8002086:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800208a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800208e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002092:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 8002096:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002098:	1d1a      	adds	r2, r3, #4
 800209a:	67ba      	str	r2, [r7, #120]	; 0x78
 800209c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80020a0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80020a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020a8:	edc3 7a00 	vstr	s15, [r3]

        twR = *tw++;
 80020ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020ae:	1d1a      	adds	r2, r3, #4
 80020b0:	673a      	str	r2, [r7, #112]	; 0x70
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 80020b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020b8:	1d1a      	adds	r2, r3, #4
 80020ba:	673a      	str	r2, [r7, #112]	; 0x70
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	65bb      	str	r3, [r7, #88]	; 0x58
        
        m0 = t2[2] * twR;
 80020c0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80020c4:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80020c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020cc:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t2[3] * twI;
 80020d0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80020d4:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80020d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020dc:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t2[3] * twR;
 80020e0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80020e4:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80020e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ec:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t2[2] * twI;
 80020f0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80020f4:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80020f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020fc:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        *p2++ = m0 + m1;
 8002100:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002102:	1d1a      	adds	r2, r3, #4
 8002104:	677a      	str	r2, [r7, #116]	; 0x74
 8002106:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800210a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800210e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002112:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 8002116:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002118:	1d1a      	adds	r2, r3, #4
 800211a:	677a      	str	r2, [r7, #116]	; 0x74
 800211c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002120:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002124:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002128:	edc3 7a00 	vstr	s15, [r3]
        
        m0 = t4[2] * twI;
 800212c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002130:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002134:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002138:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t4[3] * twR;
 800213c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002140:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002144:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002148:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t4[3] * twI;
 800214c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002150:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002154:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002158:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t4[2] * twR;
 800215c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002160:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002164:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002168:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        *pMid2++ = m0 - m1;
 800216c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800216e:	1d1a      	adds	r2, r3, #4
 8002170:	67ba      	str	r2, [r7, #120]	; 0x78
 8002172:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002176:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800217a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800217e:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 8002182:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002184:	1d1a      	adds	r2, r3, #4
 8002186:	67ba      	str	r2, [r7, #120]	; 0x78
 8002188:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800218c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002190:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002194:	edc3 7a00 	vstr	s15, [r3]
    for ( l = L >> 2; l > 0; l-- ) 
 8002198:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800219a:	3b01      	subs	r3, #1
 800219c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800219e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f47f ae45 	bne.w	8001e30 <arm_cfft_radix8by2_f32+0x4a>
    }

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 2u);
 80021a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021a8:	b299      	uxth	r1, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685a      	ldr	r2, [r3, #4]
 80021ae:	2302      	movs	r3, #2
 80021b0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80021b2:	f000 fef1 	bl	8002f98 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 2u);
 80021b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021b8:	b299      	uxth	r1, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	2302      	movs	r3, #2
 80021c0:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80021c2:	f000 fee9 	bl	8002f98 <arm_radix8_butterfly_f32>
}
 80021c6:	bf00      	nop
 80021c8:	3780      	adds	r7, #128	; 0x80
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32( arm_cfft_instance_f32 * S, float32_t * p1) 
{
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b0ac      	sub	sp, #176	; 0xb0
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
 80021d6:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	881b      	ldrh	r3, [r3, #0]
 80021dc:	085b      	lsrs	r3, r3, #1
 80021de:	b29b      	uxth	r3, r3
 80021e0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 80021e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	4413      	add	r3, r2
 80021ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 80021f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80021fc:	4413      	add	r3, r2
 80021fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 8002202:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800220c:	4413      	add	r3, r2
 800220e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         // points to real values by default
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 8002216:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800221a:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 800221c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002220:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 8002222:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002226:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     // points to imaginary values by default
 8002228:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800222c:	3b04      	subs	r3, #4
 800222e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 8002232:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002236:	3b04      	subs	r3, #4
 8002238:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 800223c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002240:	3b04      	subs	r3, #4
 8002242:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 8002246:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8002250:	4413      	add	r3, r2
 8002252:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800225e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002262:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002266:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800226a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 800226e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002272:	085b      	lsrs	r3, r3, #1
 8002274:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    // do four dot Fourier transform

    twMod2 = 2;
 8002278:	2302      	movs	r3, #2
 800227a:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 800227c:	2304      	movs	r3, #4
 800227e:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 8002280:	2306      	movs	r3, #6
 8002282:	667b      	str	r3, [r7, #100]	; 0x64

    // TOP
    p1ap3_0 = p1[0] + p3[0];
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	ed93 7a00 	vldr	s14, [r3]
 800228a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800228e:	edd3 7a00 	vldr	s15, [r3]
 8002292:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002296:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	ed93 7a00 	vldr	s14, [r3]
 80022a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022a4:	edd3 7a00 	vldr	s15, [r3]
 80022a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022ac:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	3304      	adds	r3, #4
 80022b4:	ed93 7a00 	vldr	s14, [r3]
 80022b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022bc:	3304      	adds	r3, #4
 80022be:	edd3 7a00 	vldr	s15, [r3]
 80022c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022c6:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	3304      	adds	r3, #4
 80022ce:	ed93 7a00 	vldr	s14, [r3]
 80022d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022d6:	3304      	adds	r3, #4
 80022d8:	edd3 7a00 	vldr	s15, [r3]
 80022dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022e0:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 80022e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80022e8:	3304      	adds	r3, #4
 80022ea:	ed93 7a00 	vldr	s14, [r3]
 80022ee:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80022f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80022fa:	3304      	adds	r3, #4
 80022fc:	edd3 7a00 	vldr	s15, [r3]
 8002300:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002304:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8002308:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800230c:	edd3 7a00 	vldr	s15, [r3]
 8002310:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002314:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002318:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800231c:	edd3 7a00 	vldr	s15, [r3]
 8002320:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002324:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8002328:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800232c:	edd3 7a00 	vldr	s15, [r3]
 8002330:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8002334:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002338:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800233c:	edd3 7a00 	vldr	s15, [r3]
 8002340:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002344:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8002348:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800234c:	3304      	adds	r3, #4
 800234e:	edd3 7a00 	vldr	s15, [r3]
 8002352:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002356:	ee37 7a67 	vsub.f32	s14, s14, s15
 800235a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800235e:	3304      	adds	r3, #4
 8002360:	edd3 7a00 	vldr	s15, [r3]
 8002364:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002368:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 800236c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002370:	3304      	adds	r3, #4
 8002372:	edd3 7a00 	vldr	s15, [r3]
 8002376:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800237a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800237e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002382:	3304      	adds	r3, #4
 8002384:	edd3 7a00 	vldr	s15, [r3]
 8002388:	ee77 7a27 	vadd.f32	s15, s14, s15
 800238c:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8002390:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002394:	ed93 7a00 	vldr	s14, [r3]
 8002398:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800239c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023a4:	edd3 7a00 	vldr	s15, [r3]
 80023a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023ac:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 80023b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80023b4:	ed93 7a00 	vldr	s14, [r3]
 80023b8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80023bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023c4:	edd3 7a00 	vldr	s15, [r3]
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	1d1a      	adds	r2, r3, #4
 80023cc:	603a      	str	r2, [r7, #0]
 80023ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023d2:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 80023d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80023da:	3304      	adds	r3, #4
 80023dc:	ed93 7a00 	vldr	s14, [r3]
 80023e0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80023e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023ec:	3304      	adds	r3, #4
 80023ee:	edd3 7a00 	vldr	s15, [r3]
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	1d1a      	adds	r2, r3, #4
 80023f6:	603a      	str	r2, [r7, #0]
 80023f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023fc:	edc3 7a00 	vstr	s15, [r3]

    // Twiddle factors are ones
    *p2++ = t2[0];
 8002400:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002404:	1d1a      	adds	r2, r3, #4
 8002406:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800240a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800240c:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 800240e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002412:	1d1a      	adds	r2, r3, #4
 8002414:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8002418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800241a:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 800241c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002420:	1d1a      	adds	r2, r3, #4
 8002422:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002426:	69fa      	ldr	r2, [r7, #28]
 8002428:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 800242a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800242e:	1d1a      	adds	r2, r3, #4
 8002430:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002434:	6a3a      	ldr	r2, [r7, #32]
 8002436:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 8002438:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800243c:	1d1a      	adds	r2, r3, #4
 800243e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002442:	68fa      	ldr	r2, [r7, #12]
 8002444:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 8002446:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800244a:	1d1a      	adds	r2, r3, #4
 800244c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 8002454:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800245c:	4413      	add	r3, r2
 800245e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 8002462:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800246a:	4413      	add	r3, r2
 800246c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 8002470:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002478:	4413      	add	r3, r2
 800247a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- ) 
 800247e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002482:	3b02      	subs	r3, #2
 8002484:	085b      	lsrs	r3, r3, #1
 8002486:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800248a:	e31a      	b.n	8002ac2 <arm_cfft_radix8by4_f32+0x8f4>
    {
        // TOP
        p1ap3_0 = p1[0] + p3[0];
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	ed93 7a00 	vldr	s14, [r3]
 8002492:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002496:	edd3 7a00 	vldr	s15, [r3]
 800249a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800249e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        p1sp3_0 = p1[0] - p3[0];
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	ed93 7a00 	vldr	s14, [r3]
 80024a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024ac:	edd3 7a00 	vldr	s15, [r3]
 80024b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024b4:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        p1ap3_1 = p1[1] + p3[1];
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	3304      	adds	r3, #4
 80024bc:	ed93 7a00 	vldr	s14, [r3]
 80024c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024c4:	3304      	adds	r3, #4
 80024c6:	edd3 7a00 	vldr	s15, [r3]
 80024ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024ce:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        p1sp3_1 = p1[1] - p3[1];
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	3304      	adds	r3, #4
 80024d6:	ed93 7a00 	vldr	s14, [r3]
 80024da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024de:	3304      	adds	r3, #4
 80024e0:	edd3 7a00 	vldr	s15, [r3]
 80024e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024e8:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        // col 2
        t2[0] = p1sp3_0 + p2[1] - p4[1];
 80024ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024f0:	3304      	adds	r3, #4
 80024f2:	ed93 7a00 	vldr	s14, [r3]
 80024f6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80024fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002502:	3304      	adds	r3, #4
 8002504:	edd3 7a00 	vldr	s15, [r3]
 8002508:	ee77 7a67 	vsub.f32	s15, s14, s15
 800250c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        t2[1] = p1sp3_1 - p2[0] + p4[0];
 8002510:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002514:	edd3 7a00 	vldr	s15, [r3]
 8002518:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800251c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002520:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002524:	edd3 7a00 	vldr	s15, [r3]
 8002528:	ee77 7a27 	vadd.f32	s15, s14, s15
 800252c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        // col 3
        t3[0] = p1ap3_0 - p2[0] - p4[0];
 8002530:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002534:	edd3 7a00 	vldr	s15, [r3]
 8002538:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800253c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002540:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002544:	edd3 7a00 	vldr	s15, [r3]
 8002548:	ee77 7a67 	vsub.f32	s15, s14, s15
 800254c:	edc7 7a07 	vstr	s15, [r7, #28]
        t3[1] = p1ap3_1 - p2[1] - p4[1];
 8002550:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002554:	3304      	adds	r3, #4
 8002556:	edd3 7a00 	vldr	s15, [r3]
 800255a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800255e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002562:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002566:	3304      	adds	r3, #4
 8002568:	edd3 7a00 	vldr	s15, [r3]
 800256c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002570:	edc7 7a08 	vstr	s15, [r7, #32]
        // col 4
        t4[0] = p1sp3_0 - p2[1] + p4[1];
 8002574:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002578:	3304      	adds	r3, #4
 800257a:	edd3 7a00 	vldr	s15, [r3]
 800257e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002582:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002586:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800258a:	3304      	adds	r3, #4
 800258c:	edd3 7a00 	vldr	s15, [r3]
 8002590:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002594:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[1] = p1sp3_1 + p2[0] - p4[0];
 8002598:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800259c:	ed93 7a00 	vldr	s14, [r3]
 80025a0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80025a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80025ac:	edd3 7a00 	vldr	s15, [r3]
 80025b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025b4:	edc7 7a04 	vstr	s15, [r7, #16]
        // col 1 - top
        *p1++ = p1ap3_0 + p2[0] + p4[0];
 80025b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025bc:	ed93 7a00 	vldr	s14, [r3]
 80025c0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80025c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80025cc:	edd3 7a00 	vldr	s15, [r3]
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	1d1a      	adds	r2, r3, #4
 80025d4:	603a      	str	r2, [r7, #0]
 80025d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025da:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = p1ap3_1 + p2[1] + p4[1];
 80025de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025e2:	3304      	adds	r3, #4
 80025e4:	ed93 7a00 	vldr	s14, [r3]
 80025e8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80025ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80025f4:	3304      	adds	r3, #4
 80025f6:	edd3 7a00 	vldr	s15, [r3]
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	1d1a      	adds	r2, r3, #4
 80025fe:	603a      	str	r2, [r7, #0]
 8002600:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002604:	edc3 7a00 	vstr	s15, [r3]

        // BOTTOM
        p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8002608:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800260c:	3b04      	subs	r3, #4
 800260e:	ed93 7a00 	vldr	s14, [r3]
 8002612:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002616:	3b04      	subs	r3, #4
 8002618:	edd3 7a00 	vldr	s15, [r3]
 800261c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002620:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 8002624:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002628:	3b04      	subs	r3, #4
 800262a:	ed93 7a00 	vldr	s14, [r3]
 800262e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002632:	3b04      	subs	r3, #4
 8002634:	edd3 7a00 	vldr	s15, [r3]
 8002638:	ee77 7a67 	vsub.f32	s15, s14, s15
 800263c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        p1ap3_0 = pEnd1[0] + pEnd3[0];
 8002640:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002644:	ed93 7a00 	vldr	s14, [r3]
 8002648:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800264c:	edd3 7a00 	vldr	s15, [r3]
 8002650:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002654:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        p1sp3_0 = pEnd1[0] - pEnd3[0];
 8002658:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800265c:	ed93 7a00 	vldr	s14, [r3]
 8002660:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002664:	edd3 7a00 	vldr	s15, [r3]
 8002668:	ee77 7a67 	vsub.f32	s15, s14, s15
 800266c:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        // col 2
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
 8002670:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002674:	ed93 7a00 	vldr	s14, [r3]
 8002678:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800267c:	edd3 7a00 	vldr	s15, [r3]
 8002680:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002684:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002688:	ee77 7a27 	vadd.f32	s15, s14, s15
 800268c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8002690:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002694:	ed93 7a00 	vldr	s14, [r3]
 8002698:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800269c:	edd3 7a00 	vldr	s15, [r3]
 80026a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80026a8:	3b04      	subs	r3, #4
 80026aa:	edd3 7a00 	vldr	s15, [r3]
 80026ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80026b6:	3b04      	subs	r3, #4
 80026b8:	edd3 7a00 	vldr	s15, [r3]
 80026bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026c0:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        // col 3
        t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 80026c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80026c8:	3b04      	subs	r3, #4
 80026ca:	edd3 7a00 	vldr	s15, [r3]
 80026ce:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80026d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80026da:	3b04      	subs	r3, #4
 80026dc:	edd3 7a00 	vldr	s15, [r3]
 80026e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026e4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        t3[3] = p1ap3_0 - pEnd2[0]  - pEnd4[0];
 80026e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80026ec:	edd3 7a00 	vldr	s15, [r3]
 80026f0:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80026f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026f8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80026fc:	edd3 7a00 	vldr	s15, [r3]
 8002700:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002704:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        // col 4
        t4[2] = pEnd2[0]  - pEnd4[0]  - p1sp3_1;
 8002708:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800270c:	ed93 7a00 	vldr	s14, [r3]
 8002710:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002714:	edd3 7a00 	vldr	s15, [r3]
 8002718:	ee37 7a67 	vsub.f32	s14, s14, s15
 800271c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002720:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002724:	edc7 7a05 	vstr	s15, [r7, #20]
        t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8002728:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800272c:	3b04      	subs	r3, #4
 800272e:	ed93 7a00 	vldr	s14, [r3]
 8002732:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002736:	3b04      	subs	r3, #4
 8002738:	edd3 7a00 	vldr	s15, [r3]
 800273c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002740:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002744:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002748:	edc7 7a06 	vstr	s15, [r7, #24]
        // col 1 - Bottom
        *pEnd1-- = p1ap3_0 + pEnd2[0] + pEnd4[0];
 800274c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002750:	ed93 7a00 	vldr	s14, [r3]
 8002754:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002758:	ee37 7a27 	vadd.f32	s14, s14, s15
 800275c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002760:	edd3 7a00 	vldr	s15, [r3]
 8002764:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002768:	1f1a      	subs	r2, r3, #4
 800276a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800276e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002772:	edc3 7a00 	vstr	s15, [r3]
        *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8002776:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800277a:	3b04      	subs	r3, #4
 800277c:	ed93 7a00 	vldr	s14, [r3]
 8002780:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002784:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002788:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800278c:	3b04      	subs	r3, #4
 800278e:	edd3 7a00 	vldr	s15, [r3]
 8002792:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002796:	1f1a      	subs	r2, r3, #4
 8002798:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800279c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027a0:	edc3 7a00 	vstr	s15, [r3]

        // COL 2
        // read twiddle factors
        twR = *tw2++;
 80027a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80027a8:	1d1a      	adds	r2, r3, #4
 80027aa:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	653b      	str	r3, [r7, #80]	; 0x50
        twI = *tw2++;
 80027b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80027b6:	1d1a      	adds	r2, r3, #4
 80027b8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	64fb      	str	r3, [r7, #76]	; 0x4c
        // multiply by twiddle factors
        //  let    Z1 = a + i(b),   Z2 = c + i(d)
        //   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d)
        
        // Top
        m0 = t2[0] * twR;
 80027c0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80027c4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80027c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027cc:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t2[1] * twI;
 80027d0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80027d4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80027d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027dc:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t2[1] * twR;
 80027e0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80027e4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80027e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ec:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t2[0] * twI;
 80027f0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80027f4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80027f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027fc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *p2++ = m0 + m1;
 8002800:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002804:	1d1a      	adds	r2, r3, #4
 8002806:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800280a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800280e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002812:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002816:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 800281a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800281e:	1d1a      	adds	r2, r3, #4
 8002820:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8002824:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002828:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800282c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002830:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 2
        // 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i
        // Bottom
        m0 = t2[3] * twI;
 8002834:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002838:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800283c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002840:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t2[2] * twR;
 8002844:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002848:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800284c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002850:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t2[2] * twI;
 8002854:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002858:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800285c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002860:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t2[3] * twR;
 8002864:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002868:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800286c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002870:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *pEnd2-- = m0 - m1;
 8002874:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002878:	1f1a      	subs	r2, r3, #4
 800287a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800287e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002882:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002886:	ee77 7a67 	vsub.f32	s15, s14, s15
 800288a:	edc3 7a00 	vstr	s15, [r3]
        *pEnd2-- = m2 + m3;
 800288e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002892:	1f1a      	subs	r2, r3, #4
 8002894:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002898:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800289c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80028a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028a4:	edc3 7a00 	vstr	s15, [r3]

        // COL 3
        twR = tw3[0];
 80028a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw3[1];
 80028b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw3 += twMod3;
 80028b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80028c0:	4413      	add	r3, r2
 80028c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        // Top
        m0 = t3[0] * twR;
 80028c6:	edd7 7a07 	vldr	s15, [r7, #28]
 80028ca:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80028ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028d2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t3[1] * twI;
 80028d6:	edd7 7a08 	vldr	s15, [r7, #32]
 80028da:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80028de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028e2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t3[1] * twR;
 80028e6:	edd7 7a08 	vldr	s15, [r7, #32]
 80028ea:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80028ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028f2:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t3[0] * twI;
 80028f6:	edd7 7a07 	vldr	s15, [r7, #28]
 80028fa:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80028fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002902:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *p3++ = m0 + m1;
 8002906:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800290a:	1d1a      	adds	r2, r3, #4
 800290c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002910:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002914:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002918:	ee77 7a27 	vadd.f32	s15, s14, s15
 800291c:	edc3 7a00 	vstr	s15, [r3]
        *p3++ = m2 - m3;
 8002920:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002924:	1d1a      	adds	r2, r3, #4
 8002926:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800292a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800292e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002932:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002936:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 3
        // 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i
        // Bottom
        m0 = -t3[3] * twR;
 800293a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800293e:	eef1 7a67 	vneg.f32	s15, s15
 8002942:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800294a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t3[2] * twI;
 800294e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002952:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800295a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t3[2] * twR;
 800295e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002962:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800296a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t3[3] * twI;
 800296e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8002972:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800297a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *pEnd3-- = m0 - m1;
 800297e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002982:	1f1a      	subs	r2, r3, #4
 8002984:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002988:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800298c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002990:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002994:	edc3 7a00 	vstr	s15, [r3]
        *pEnd3-- = m3 - m2;
 8002998:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800299c:	1f1a      	subs	r2, r3, #4
 800299e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80029a2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80029a6:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 80029aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029ae:	edc3 7a00 	vstr	s15, [r3]
        
        // COL 4
        twR = tw4[0];
 80029b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw4[1];
 80029ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw4 += twMod4;
 80029c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80029ca:	4413      	add	r3, r2
 80029cc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        // Top
        m0 = t4[0] * twR;
 80029d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80029d4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80029d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029dc:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t4[1] * twI;
 80029e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80029e4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80029e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029ec:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t4[1] * twR;
 80029f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80029f4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80029f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029fc:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t4[0] * twI;
 8002a00:	edd7 7a03 	vldr	s15, [r7, #12]
 8002a04:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002a08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a0c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *p4++ = m0 + m1;
 8002a10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a14:	1d1a      	adds	r2, r3, #4
 8002a16:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002a1a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002a1e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002a22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a26:	edc3 7a00 	vstr	s15, [r3]
        *p4++ = m2 - m3;
 8002a2a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a2e:	1d1a      	adds	r2, r3, #4
 8002a30:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002a34:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002a38:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002a3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a40:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 4
        // 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i
        // Bottom
        m0 = t4[3] * twI;
 8002a44:	edd7 7a06 	vldr	s15, [r7, #24]
 8002a48:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002a4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a50:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t4[2] * twR;
 8002a54:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a58:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002a5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a60:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t4[2] * twI;
 8002a64:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a68:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002a6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a70:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t4[3] * twR;
 8002a74:	edd7 7a06 	vldr	s15, [r7, #24]
 8002a78:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002a7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a80:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *pEnd4-- = m0 - m1;
 8002a84:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002a88:	1f1a      	subs	r2, r3, #4
 8002a8a:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8002a8e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002a92:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002a96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a9a:	edc3 7a00 	vstr	s15, [r3]
        *pEnd4-- = m2 + m3;
 8002a9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002aa2:	1f1a      	subs	r2, r3, #4
 8002aa4:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8002aa8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002aac:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002ab0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ab4:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- ) 
 8002ab8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002abc:	3b01      	subs	r3, #1
 8002abe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002ac2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f47f ace0 	bne.w	800248c <arm_cfft_radix8by4_f32+0x2be>
    }

    //MIDDLE
    // Twiddle factors are 
    //  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i
    p1ap3_0 = p1[0] + p3[0];
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	ed93 7a00 	vldr	s14, [r3]
 8002ad2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ad6:	edd3 7a00 	vldr	s15, [r3]
 8002ada:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ade:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	ed93 7a00 	vldr	s14, [r3]
 8002ae8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002aec:	edd3 7a00 	vldr	s15, [r3]
 8002af0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002af4:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	3304      	adds	r3, #4
 8002afc:	ed93 7a00 	vldr	s14, [r3]
 8002b00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b04:	3304      	adds	r3, #4
 8002b06:	edd3 7a00 	vldr	s15, [r3]
 8002b0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b0e:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	3304      	adds	r3, #4
 8002b16:	ed93 7a00 	vldr	s14, [r3]
 8002b1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b1e:	3304      	adds	r3, #4
 8002b20:	edd3 7a00 	vldr	s15, [r3]
 8002b24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b28:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8002b2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b30:	3304      	adds	r3, #4
 8002b32:	ed93 7a00 	vldr	s14, [r3]
 8002b36:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002b3a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b3e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b42:	3304      	adds	r3, #4
 8002b44:	edd3 7a00 	vldr	s15, [r3]
 8002b48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b4c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8002b50:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b54:	edd3 7a00 	vldr	s15, [r3]
 8002b58:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002b5c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b64:	edd3 7a00 	vldr	s15, [r3]
 8002b68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b6c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8002b70:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b74:	edd3 7a00 	vldr	s15, [r3]
 8002b78:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8002b7c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b84:	edd3 7a00 	vldr	s15, [r3]
 8002b88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b8c:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8002b90:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b94:	3304      	adds	r3, #4
 8002b96:	edd3 7a00 	vldr	s15, [r3]
 8002b9a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8002b9e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ba2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ba6:	3304      	adds	r3, #4
 8002ba8:	edd3 7a00 	vldr	s15, [r3]
 8002bac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bb0:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8002bb4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002bb8:	3304      	adds	r3, #4
 8002bba:	edd3 7a00 	vldr	s15, [r3]
 8002bbe:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8002bc2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002bc6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002bca:	3304      	adds	r3, #4
 8002bcc:	edd3 7a00 	vldr	s15, [r3]
 8002bd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bd4:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8002bd8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002bdc:	ed93 7a00 	vldr	s14, [r3]
 8002be0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002be4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002be8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002bec:	edd3 7a00 	vldr	s15, [r3]
 8002bf0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bf4:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1 - Top
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8002bf8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002bfc:	ed93 7a00 	vldr	s14, [r3]
 8002c00:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002c04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c0c:	edd3 7a00 	vldr	s15, [r3]
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	1d1a      	adds	r2, r3, #4
 8002c14:	603a      	str	r2, [r7, #0]
 8002c16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c1a:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8002c1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002c22:	3304      	adds	r3, #4
 8002c24:	ed93 7a00 	vldr	s14, [r3]
 8002c28:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002c2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002c34:	3304      	adds	r3, #4
 8002c36:	edd3 7a00 	vldr	s15, [r3]
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	1d1a      	adds	r2, r3, #4
 8002c3e:	603a      	str	r2, [r7, #0]
 8002c40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c44:	edc3 7a00 	vstr	s15, [r3]

    // COL 2
    twR = tw2[0];
 8002c48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 8002c50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 8002c58:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002c5c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002c60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c64:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 8002c68:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002c6c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002c70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c74:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 8002c78:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002c7c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002c80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c84:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 8002c88:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002c8c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002c90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c94:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 8002c98:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002c9c:	1d1a      	adds	r2, r3, #4
 8002c9e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8002ca2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002ca6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002caa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cae:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8002cb2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002cb6:	1d1a      	adds	r2, r3, #4
 8002cb8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8002cbc:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002cc0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002cc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cc8:	edc3 7a00 	vstr	s15, [r3]
    // COL 3
    twR = tw3[0];
 8002ccc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 8002cd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 8002cdc:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ce0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002ce4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ce8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 8002cec:	edd7 7a08 	vldr	s15, [r7, #32]
 8002cf0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002cf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cf8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 8002cfc:	edd7 7a08 	vldr	s15, [r7, #32]
 8002d00:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002d04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d08:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 8002d0c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d10:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002d14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d18:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 8002d1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d20:	1d1a      	adds	r2, r3, #4
 8002d22:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002d26:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002d2a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002d2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d32:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 8002d36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d3a:	1d1a      	adds	r2, r3, #4
 8002d3c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002d40:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002d44:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002d48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d4c:	edc3 7a00 	vstr	s15, [r3]
    // COL 4
    twR = tw4[0];
 8002d50:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 8002d58:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 8002d60:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d64:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002d68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d6c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 8002d70:	edd7 7a04 	vldr	s15, [r7, #16]
 8002d74:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002d78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d7c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 8002d80:	edd7 7a04 	vldr	s15, [r7, #16]
 8002d84:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002d88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d8c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 8002d90:	edd7 7a03 	vldr	s15, [r7, #12]
 8002d94:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002d98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d9c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 8002da0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002da4:	1d1a      	adds	r2, r3, #4
 8002da6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002daa:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002dae:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002db2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002db6:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 8002dba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002dbe:	1d1a      	adds	r2, r3, #4
 8002dc0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002dc4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002dc8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002dcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dd0:	edc3 7a00 	vstr	s15, [r3]

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 4u);
 8002dd4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002dd8:	b299      	uxth	r1, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685a      	ldr	r2, [r3, #4]
 8002dde:	2304      	movs	r3, #4
 8002de0:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8002de2:	f000 f8d9 	bl	8002f98 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 4u);
 8002de6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002dea:	b299      	uxth	r1, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685a      	ldr	r2, [r3, #4]
 8002df0:	2304      	movs	r3, #4
 8002df2:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002df4:	f000 f8d0 	bl	8002f98 <arm_radix8_butterfly_f32>
    // third col
    arm_radix8_butterfly_f32( pCol3, L, (float32_t *) S->pTwiddle, 4u);
 8002df8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002dfc:	b299      	uxth	r1, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685a      	ldr	r2, [r3, #4]
 8002e02:	2304      	movs	r3, #4
 8002e04:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8002e06:	f000 f8c7 	bl	8002f98 <arm_radix8_butterfly_f32>
    // fourth col
    arm_radix8_butterfly_f32( pCol4, L, (float32_t *) S->pTwiddle, 4u);
 8002e0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e0e:	b299      	uxth	r1, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685a      	ldr	r2, [r3, #4]
 8002e14:	2304      	movs	r3, #4
 8002e16:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002e18:	f000 f8be 	bl	8002f98 <arm_radix8_butterfly_f32>
}
 8002e1c:	bf00      	nop
 8002e1e:	37b0      	adds	r7, #176	; 0xb0
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <arm_cfft_f32>:
void arm_cfft_f32( 
    const arm_cfft_instance_f32 * S, 
    float32_t * p1,
    uint8_t ifftFlag,
    uint8_t bitReverseFlag)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b088      	sub	sp, #32
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	4611      	mov	r1, r2
 8002e30:	461a      	mov	r2, r3
 8002e32:	460b      	mov	r3, r1
 8002e34:	71fb      	strb	r3, [r7, #7]
 8002e36:	4613      	mov	r3, r2
 8002e38:	71bb      	strb	r3, [r7, #6]
    uint32_t  L = S->fftLen, l;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	881b      	ldrh	r3, [r3, #0]
 8002e3e:	617b      	str	r3, [r7, #20]
    float32_t invL, * pSrc;

    if(ifftFlag == 1u)
 8002e40:	79fb      	ldrb	r3, [r7, #7]
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d117      	bne.n	8002e76 <arm_cfft_f32+0x52>
    {
        /*  Conjugate input data  */
        pSrc = p1 + 1;
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	3304      	adds	r3, #4
 8002e4a:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	61fb      	str	r3, [r7, #28]
 8002e50:	e00d      	b.n	8002e6e <arm_cfft_f32+0x4a>
        {
            *pSrc = -*pSrc;
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	edd3 7a00 	vldr	s15, [r3]
 8002e58:	eef1 7a67 	vneg.f32	s15, s15
 8002e5c:	69bb      	ldr	r3, [r7, #24]
 8002e5e:	edc3 7a00 	vstr	s15, [r3]
            pSrc += 2;
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	3308      	adds	r3, #8
 8002e66:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	61fb      	str	r3, [r7, #28]
 8002e6e:	69fa      	ldr	r2, [r7, #28]
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d3ed      	bcc.n	8002e52 <arm_cfft_f32+0x2e>
        }
    }

    switch (L) 
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e7c:	d040      	beq.n	8002f00 <arm_cfft_f32+0xdc>
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e84:	d845      	bhi.n	8002f12 <arm_cfft_f32+0xee>
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e8c:	d033      	beq.n	8002ef6 <arm_cfft_f32+0xd2>
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e94:	d83d      	bhi.n	8002f12 <arm_cfft_f32+0xee>
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e9c:	d026      	beq.n	8002eec <arm_cfft_f32+0xc8>
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ea4:	d835      	bhi.n	8002f12 <arm_cfft_f32+0xee>
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eac:	d028      	beq.n	8002f00 <arm_cfft_f32+0xdc>
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eb4:	d82d      	bhi.n	8002f12 <arm_cfft_f32+0xee>
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ebc:	d01b      	beq.n	8002ef6 <arm_cfft_f32+0xd2>
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ec4:	d825      	bhi.n	8002f12 <arm_cfft_f32+0xee>
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	2b80      	cmp	r3, #128	; 0x80
 8002eca:	d00f      	beq.n	8002eec <arm_cfft_f32+0xc8>
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	2b80      	cmp	r3, #128	; 0x80
 8002ed0:	d81f      	bhi.n	8002f12 <arm_cfft_f32+0xee>
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	2b40      	cmp	r3, #64	; 0x40
 8002ed6:	d013      	beq.n	8002f00 <arm_cfft_f32+0xdc>
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	2b40      	cmp	r3, #64	; 0x40
 8002edc:	d819      	bhi.n	8002f12 <arm_cfft_f32+0xee>
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	2b10      	cmp	r3, #16
 8002ee2:	d003      	beq.n	8002eec <arm_cfft_f32+0xc8>
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	2b20      	cmp	r3, #32
 8002ee8:	d005      	beq.n	8002ef6 <arm_cfft_f32+0xd2>
 8002eea:	e012      	b.n	8002f12 <arm_cfft_f32+0xee>
    {
    case 16: 
    case 128:
    case 1024:
        arm_cfft_radix8by2_f32  ( (arm_cfft_instance_f32 *) S, p1);
 8002eec:	68b9      	ldr	r1, [r7, #8]
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f7fe ff79 	bl	8001de6 <arm_cfft_radix8by2_f32>
        break;
 8002ef4:	e00d      	b.n	8002f12 <arm_cfft_f32+0xee>
    case 32:
    case 256:
    case 2048:
        arm_cfft_radix8by4_f32  ( (arm_cfft_instance_f32 *) S, p1);
 8002ef6:	68b9      	ldr	r1, [r7, #8]
 8002ef8:	68f8      	ldr	r0, [r7, #12]
 8002efa:	f7ff f968 	bl	80021ce <arm_cfft_radix8by4_f32>
        break;
 8002efe:	e008      	b.n	8002f12 <arm_cfft_f32+0xee>
    case 64:
    case 512:
    case 4096:
        arm_radix8_butterfly_f32( p1, L, (float32_t *) S->pTwiddle, 1);
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	b299      	uxth	r1, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	685a      	ldr	r2, [r3, #4]
 8002f08:	2301      	movs	r3, #1
 8002f0a:	68b8      	ldr	r0, [r7, #8]
 8002f0c:	f000 f844 	bl	8002f98 <arm_radix8_butterfly_f32>
        break;
 8002f10:	bf00      	nop
    }  

    if( bitReverseFlag )
 8002f12:	79bb      	ldrb	r3, [r7, #6]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d007      	beq.n	8002f28 <arm_cfft_f32+0x104>
        arm_bitreversal_32((uint32_t*)p1,S->bitRevLength,S->pBitRevTable);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8999      	ldrh	r1, [r3, #12]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	461a      	mov	r2, r3
 8002f22:	68b8      	ldr	r0, [r7, #8]
 8002f24:	f7fd f9dc 	bl	80002e0 <arm_bitreversal_32>

    if(ifftFlag == 1u)
 8002f28:	79fb      	ldrb	r3, [r7, #7]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d130      	bne.n	8002f90 <arm_cfft_f32+0x16c>
    {
        invL = 1.0f/(float32_t)L;
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	ee07 3a90 	vmov	s15, r3
 8002f34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f40:	edc7 7a04 	vstr	s15, [r7, #16]
        /*  Conjugate and scale output data */
        pSrc = p1;
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 8002f48:	2300      	movs	r3, #0
 8002f4a:	61fb      	str	r3, [r7, #28]
 8002f4c:	e01c      	b.n	8002f88 <arm_cfft_f32+0x164>
        {
            *pSrc++ *=   invL ;
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	1d1a      	adds	r2, r3, #4
 8002f52:	61ba      	str	r2, [r7, #24]
 8002f54:	ed93 7a00 	vldr	s14, [r3]
 8002f58:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f60:	edc3 7a00 	vstr	s15, [r3]
            *pSrc  = -(*pSrc) * invL;
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	edd3 7a00 	vldr	s15, [r3]
 8002f6a:	eeb1 7a67 	vneg.f32	s14, s15
 8002f6e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	edc3 7a00 	vstr	s15, [r3]
            pSrc++;
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	3304      	adds	r3, #4
 8002f80:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	3301      	adds	r3, #1
 8002f86:	61fb      	str	r3, [r7, #28]
 8002f88:	69fa      	ldr	r2, [r7, #28]
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d3de      	bcc.n	8002f4e <arm_cfft_f32+0x12a>
        }
    }
}
 8002f90:	bf00      	nop
 8002f92:	3720      	adds	r7, #32
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
float32_t * pSrc,
uint16_t fftLen,
const float32_t * pCoef,
uint16_t twidCoefModifier)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b0bd      	sub	sp, #244	; 0xf4
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	607a      	str	r2, [r7, #4]
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	817b      	strh	r3, [r7, #10]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 8002fac:	4b09      	ldr	r3, [pc, #36]	; (8002fd4 <arm_radix8_butterfly_f32+0x3c>)
 8002fae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 8002fb2:	897b      	ldrh	r3, [r7, #10]
 8002fb4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
   
   do 
   {
      n1 = n2;
 8002fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fbc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 8002fc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fc4:	08db      	lsrs	r3, r3, #3
 8002fc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002fd0:	e002      	b.n	8002fd8 <arm_radix8_butterfly_f32+0x40>
 8002fd2:	bf00      	nop
 8002fd4:	3f3504f3 	.word	0x3f3504f3
      
      do
      {
         i2 = i1 + n2;
 8002fd8:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002fdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fe0:	4413      	add	r3, r2
 8002fe2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 8002fe6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fee:	4413      	add	r3, r2
 8002ff0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 8002ff4:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002ff8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ffc:	4413      	add	r3, r2
 8002ffe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 8003002:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8003006:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800300a:	4413      	add	r3, r2
 800300c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 8003010:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003018:	4413      	add	r3, r2
 800301a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 800301e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003026:	4413      	add	r3, r2
 8003028:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 800302c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003030:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003034:	4413      	add	r3, r2
 8003036:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 800303a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	4413      	add	r3, r2
 8003044:	ed93 7a00 	vldr	s14, [r3]
 8003048:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800304c:	00db      	lsls	r3, r3, #3
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	4413      	add	r3, r2
 8003052:	edd3 7a00 	vldr	s15, [r3]
 8003056:	ee77 7a27 	vadd.f32	s15, s14, s15
 800305a:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 800305e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	4413      	add	r3, r2
 8003068:	ed93 7a00 	vldr	s14, [r3]
 800306c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	4413      	add	r3, r2
 8003076:	edd3 7a00 	vldr	s15, [r3]
 800307a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800307e:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8003082:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	68fa      	ldr	r2, [r7, #12]
 800308a:	4413      	add	r3, r2
 800308c:	ed93 7a00 	vldr	s14, [r3]
 8003090:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003094:	00db      	lsls	r3, r3, #3
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	4413      	add	r3, r2
 800309a:	edd3 7a00 	vldr	s15, [r3]
 800309e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030a2:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 80030a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030aa:	00db      	lsls	r3, r3, #3
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	4413      	add	r3, r2
 80030b0:	ed93 7a00 	vldr	s14, [r3]
 80030b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030b8:	00db      	lsls	r3, r3, #3
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	4413      	add	r3, r2
 80030be:	edd3 7a00 	vldr	s15, [r3]
 80030c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030c6:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 80030ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	4413      	add	r3, r2
 80030d4:	ed93 7a00 	vldr	s14, [r3]
 80030d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80030dc:	00db      	lsls	r3, r3, #3
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	4413      	add	r3, r2
 80030e2:	edd3 7a00 	vldr	s15, [r3]
 80030e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030ea:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 80030ee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	4413      	add	r3, r2
 80030f8:	ed93 7a00 	vldr	s14, [r3]
 80030fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	4413      	add	r3, r2
 8003106:	edd3 7a00 	vldr	s15, [r3]
 800310a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800310e:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8003112:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	4413      	add	r3, r2
 800311c:	ed93 7a00 	vldr	s14, [r3]
 8003120:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003124:	00db      	lsls	r3, r3, #3
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	4413      	add	r3, r2
 800312a:	edd3 7a00 	vldr	s15, [r3]
 800312e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003132:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8003136:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	4413      	add	r3, r2
 8003140:	ed93 7a00 	vldr	s14, [r3]
 8003144:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003148:	00db      	lsls	r3, r3, #3
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	4413      	add	r3, r2
 800314e:	edd3 7a00 	vldr	s15, [r3]
 8003152:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003156:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 800315a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800315e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8003162:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003166:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 800316a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800316e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8003172:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003176:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 800317a:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800317e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8003182:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003186:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 800318a:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800318e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8003192:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003196:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;   
 800319a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	68fa      	ldr	r2, [r7, #12]
 80031a2:	4413      	add	r3, r2
 80031a4:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80031a8:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80031ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031b0:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 80031b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80031b8:	00db      	lsls	r3, r3, #3
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	4413      	add	r3, r2
 80031be:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80031c2:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80031c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031ca:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 80031ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80031d2:	00db      	lsls	r3, r3, #3
 80031d4:	3304      	adds	r3, #4
 80031d6:	68fa      	ldr	r2, [r7, #12]
 80031d8:	4413      	add	r3, r2
 80031da:	ed93 7a00 	vldr	s14, [r3]
 80031de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80031e2:	00db      	lsls	r3, r3, #3
 80031e4:	3304      	adds	r3, #4
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	4413      	add	r3, r2
 80031ea:	edd3 7a00 	vldr	s15, [r3]
 80031ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031f2:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 80031f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	3304      	adds	r3, #4
 80031fe:	68fa      	ldr	r2, [r7, #12]
 8003200:	4413      	add	r3, r2
 8003202:	ed93 7a00 	vldr	s14, [r3]
 8003206:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	3304      	adds	r3, #4
 800320e:	68fa      	ldr	r2, [r7, #12]
 8003210:	4413      	add	r3, r2
 8003212:	edd3 7a00 	vldr	s15, [r3]
 8003216:	ee77 7a67 	vsub.f32	s15, s14, s15
 800321a:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 800321e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	3304      	adds	r3, #4
 8003226:	68fa      	ldr	r2, [r7, #12]
 8003228:	4413      	add	r3, r2
 800322a:	ed93 7a00 	vldr	s14, [r3]
 800322e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003232:	00db      	lsls	r3, r3, #3
 8003234:	3304      	adds	r3, #4
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	4413      	add	r3, r2
 800323a:	edd3 7a00 	vldr	s15, [r3]
 800323e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003242:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8003246:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800324a:	00db      	lsls	r3, r3, #3
 800324c:	3304      	adds	r3, #4
 800324e:	68fa      	ldr	r2, [r7, #12]
 8003250:	4413      	add	r3, r2
 8003252:	ed93 7a00 	vldr	s14, [r3]
 8003256:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	3304      	adds	r3, #4
 800325e:	68fa      	ldr	r2, [r7, #12]
 8003260:	4413      	add	r3, r2
 8003262:	edd3 7a00 	vldr	s15, [r3]
 8003266:	ee77 7a67 	vsub.f32	s15, s14, s15
 800326a:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 800326e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	3304      	adds	r3, #4
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	4413      	add	r3, r2
 800327a:	ed93 7a00 	vldr	s14, [r3]
 800327e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	3304      	adds	r3, #4
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	4413      	add	r3, r2
 800328a:	edd3 7a00 	vldr	s15, [r3]
 800328e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003292:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8003296:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	3304      	adds	r3, #4
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	4413      	add	r3, r2
 80032a2:	ed93 7a00 	vldr	s14, [r3]
 80032a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	3304      	adds	r3, #4
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	4413      	add	r3, r2
 80032b2:	edd3 7a00 	vldr	s15, [r3]
 80032b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032ba:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 80032be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80032c2:	00db      	lsls	r3, r3, #3
 80032c4:	3304      	adds	r3, #4
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	4413      	add	r3, r2
 80032ca:	ed93 7a00 	vldr	s14, [r3]
 80032ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80032d2:	00db      	lsls	r3, r3, #3
 80032d4:	3304      	adds	r3, #4
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	4413      	add	r3, r2
 80032da:	edd3 7a00 	vldr	s15, [r3]
 80032de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032e2:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 80032e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80032ea:	00db      	lsls	r3, r3, #3
 80032ec:	3304      	adds	r3, #4
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	4413      	add	r3, r2
 80032f2:	ed93 7a00 	vldr	s14, [r3]
 80032f6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	3304      	adds	r3, #4
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	4413      	add	r3, r2
 8003302:	edd3 7a00 	vldr	s15, [r3]
 8003306:	ee77 7a67 	vsub.f32	s15, s14, s15
 800330a:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 800330e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8003312:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8003316:	ee77 7a67 	vsub.f32	s15, s14, s15
 800331a:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 800331e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8003322:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8003326:	ee77 7a27 	vadd.f32	s15, s14, s15
 800332a:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 800332e:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8003332:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8003336:	ee77 7a67 	vsub.f32	s15, s14, s15
 800333a:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 800333e:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8003342:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8003346:	ee77 7a27 	vadd.f32	s15, s14, s15
 800334a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 800334e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	3304      	adds	r3, #4
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	4413      	add	r3, r2
 800335a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800335e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8003362:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003366:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 800336a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	3304      	adds	r3, #4
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	4413      	add	r3, r2
 8003376:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800337a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800337e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003382:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 8003386:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	68fa      	ldr	r2, [r7, #12]
 800338e:	4413      	add	r3, r2
 8003390:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8003394:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8003398:	ee77 7a27 	vadd.f32	s15, s14, s15
 800339c:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 80033a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80033a4:	00db      	lsls	r3, r3, #3
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	4413      	add	r3, r2
 80033aa:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80033ae:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80033b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033b6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 80033ba:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80033be:	00db      	lsls	r3, r3, #3
 80033c0:	3304      	adds	r3, #4
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	4413      	add	r3, r2
 80033c6:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80033ca:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80033ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033d2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 80033d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80033da:	00db      	lsls	r3, r3, #3
 80033dc:	3304      	adds	r3, #4
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	4413      	add	r3, r2
 80033e2:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80033e6:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 80033ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033ee:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 80033f2:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 80033f6:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80033fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033fe:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8003402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003406:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 800340a:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800340e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8003412:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003416:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800341a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800341e:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 8003422:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8003426:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800342a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800342e:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8003432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003436:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 800343a:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800343e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8003442:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003446:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800344a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800344e:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 8003452:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8003456:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800345a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800345e:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 8003462:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8003466:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800346a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800346e:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 8003472:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8003476:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800347a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800347e:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 8003482:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8003486:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800348a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800348e:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 8003492:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8003496:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800349a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800349e:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 80034a2:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80034a6:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80034aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034ae:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 80034b2:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80034b6:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80034ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034be:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 80034c2:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 80034c6:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 80034ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034ce:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 80034d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	4413      	add	r3, r2
 80034dc:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80034e0:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80034e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034e8:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 80034ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80034f0:	00db      	lsls	r3, r3, #3
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	4413      	add	r3, r2
 80034f6:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80034fa:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80034fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003502:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 8003506:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800350a:	00db      	lsls	r3, r3, #3
 800350c:	68fa      	ldr	r2, [r7, #12]
 800350e:	4413      	add	r3, r2
 8003510:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8003514:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8003518:	ee77 7a27 	vadd.f32	s15, s14, s15
 800351c:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 8003520:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003524:	00db      	lsls	r3, r3, #3
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	4413      	add	r3, r2
 800352a:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800352e:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8003532:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003536:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 800353a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	3304      	adds	r3, #4
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	4413      	add	r3, r2
 8003546:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800354a:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800354e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003552:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 8003556:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	3304      	adds	r3, #4
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	4413      	add	r3, r2
 8003562:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8003566:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800356a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800356e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 8003572:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	3304      	adds	r3, #4
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	4413      	add	r3, r2
 800357e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8003582:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8003586:	ee77 7a67 	vsub.f32	s15, s14, s15
 800358a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 800358e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	3304      	adds	r3, #4
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	4413      	add	r3, r2
 800359a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800359e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80035a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035a6:	edc3 7a00 	vstr	s15, [r3]
         
         i1 += n1;
 80035aa:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80035ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80035b2:	4413      	add	r3, r2
 80035b4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while(i1 < fftLen);
 80035b8:	897b      	ldrh	r3, [r7, #10]
 80035ba:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80035be:	429a      	cmp	r2, r3
 80035c0:	f4ff ad0a 	bcc.w	8002fd8 <arm_radix8_butterfly_f32+0x40>
      
      if(n2 < 8)
 80035c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035c8:	2b07      	cmp	r3, #7
 80035ca:	f240 84e3 	bls.w	8003f94 <arm_radix8_butterfly_f32+0xffc>
         break;
      
      ia1 = 0;
 80035ce:	2300      	movs	r3, #0
 80035d0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 80035d4:	2301      	movs	r3, #1
 80035d6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      
      do
      {      
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 80035da:	893b      	ldrh	r3, [r7, #8]
 80035dc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80035e0:	4413      	add	r3, r2
 80035e2:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 80035e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80035e6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 80035ea:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80035ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80035f0:	4413      	add	r3, r2
 80035f2:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 80035f4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80035f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80035f8:	4413      	add	r3, r2
 80035fa:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 80035fc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80035fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003600:	4413      	add	r3, r2
 8003602:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 8003604:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003606:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003608:	4413      	add	r3, r2
 800360a:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 800360c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800360e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003610:	4413      	add	r3, r2
 8003612:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 8003614:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003616:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003618:	4413      	add	r3, r2
 800361a:	667b      	str	r3, [r7, #100]	; 0x64
                  
         co2 = pCoef[2 * ia1];
 800361c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003620:	00db      	lsls	r3, r3, #3
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	4413      	add	r3, r2
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 800362a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800362c:	00db      	lsls	r3, r3, #3
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	4413      	add	r3, r2
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 8003636:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003638:	00db      	lsls	r3, r3, #3
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	4413      	add	r3, r2
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 8003642:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003644:	00db      	lsls	r3, r3, #3
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	4413      	add	r3, r2
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 800364e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003650:	00db      	lsls	r3, r3, #3
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	4413      	add	r3, r2
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 800365a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800365c:	00db      	lsls	r3, r3, #3
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	4413      	add	r3, r2
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 8003666:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003668:	00db      	lsls	r3, r3, #3
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	4413      	add	r3, r2
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 8003672:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003676:	00db      	lsls	r3, r3, #3
 8003678:	3304      	adds	r3, #4
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	4413      	add	r3, r2
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 8003682:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003684:	00db      	lsls	r3, r3, #3
 8003686:	3304      	adds	r3, #4
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	4413      	add	r3, r2
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 8003690:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003692:	00db      	lsls	r3, r3, #3
 8003694:	3304      	adds	r3, #4
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	4413      	add	r3, r2
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 800369e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036a0:	00db      	lsls	r3, r3, #3
 80036a2:	3304      	adds	r3, #4
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	4413      	add	r3, r2
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 80036ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	3304      	adds	r3, #4
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	4413      	add	r3, r2
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 80036ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036bc:	00db      	lsls	r3, r3, #3
 80036be:	3304      	adds	r3, #4
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	4413      	add	r3, r2
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];         
 80036c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	3304      	adds	r3, #4
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	4413      	add	r3, r2
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	62fb      	str	r3, [r7, #44]	; 0x2c
         
         i1 = j;
 80036d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         
         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 80036de:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80036e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036e6:	4413      	add	r3, r2
 80036e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 80036ec:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80036f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036f4:	4413      	add	r3, r2
 80036f6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 80036fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80036fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003702:	4413      	add	r3, r2
 8003704:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 8003708:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800370c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003710:	4413      	add	r3, r2
 8003712:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 8003716:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800371a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800371e:	4413      	add	r3, r2
 8003720:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 8003724:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800372c:	4413      	add	r3, r2
 800372e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 8003732:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800373a:	4413      	add	r3, r2
 800373c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8003740:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003744:	00db      	lsls	r3, r3, #3
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	4413      	add	r3, r2
 800374a:	ed93 7a00 	vldr	s14, [r3]
 800374e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003752:	00db      	lsls	r3, r3, #3
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	4413      	add	r3, r2
 8003758:	edd3 7a00 	vldr	s15, [r3]
 800375c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003760:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8003764:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003768:	00db      	lsls	r3, r3, #3
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	4413      	add	r3, r2
 800376e:	ed93 7a00 	vldr	s14, [r3]
 8003772:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003776:	00db      	lsls	r3, r3, #3
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	4413      	add	r3, r2
 800377c:	edd3 7a00 	vldr	s15, [r3]
 8003780:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003784:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8003788:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800378c:	00db      	lsls	r3, r3, #3
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	4413      	add	r3, r2
 8003792:	ed93 7a00 	vldr	s14, [r3]
 8003796:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800379a:	00db      	lsls	r3, r3, #3
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	4413      	add	r3, r2
 80037a0:	edd3 7a00 	vldr	s15, [r3]
 80037a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037a8:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 80037ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80037b0:	00db      	lsls	r3, r3, #3
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	4413      	add	r3, r2
 80037b6:	ed93 7a00 	vldr	s14, [r3]
 80037ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037be:	00db      	lsls	r3, r3, #3
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	4413      	add	r3, r2
 80037c4:	edd3 7a00 	vldr	s15, [r3]
 80037c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037cc:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 80037d0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80037d4:	00db      	lsls	r3, r3, #3
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	4413      	add	r3, r2
 80037da:	ed93 7a00 	vldr	s14, [r3]
 80037de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80037e2:	00db      	lsls	r3, r3, #3
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	4413      	add	r3, r2
 80037e8:	edd3 7a00 	vldr	s15, [r3]
 80037ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037f0:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 80037f4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80037f8:	00db      	lsls	r3, r3, #3
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	4413      	add	r3, r2
 80037fe:	ed93 7a00 	vldr	s14, [r3]
 8003802:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	4413      	add	r3, r2
 800380c:	edd3 7a00 	vldr	s15, [r3]
 8003810:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003814:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8003818:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800381c:	00db      	lsls	r3, r3, #3
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	4413      	add	r3, r2
 8003822:	ed93 7a00 	vldr	s14, [r3]
 8003826:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800382a:	00db      	lsls	r3, r3, #3
 800382c:	68fa      	ldr	r2, [r7, #12]
 800382e:	4413      	add	r3, r2
 8003830:	edd3 7a00 	vldr	s15, [r3]
 8003834:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003838:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 800383c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003840:	00db      	lsls	r3, r3, #3
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	4413      	add	r3, r2
 8003846:	ed93 7a00 	vldr	s14, [r3]
 800384a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	4413      	add	r3, r2
 8003854:	edd3 7a00 	vldr	s15, [r3]
 8003858:	ee77 7a67 	vsub.f32	s15, s14, s15
 800385c:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 8003860:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8003864:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8003868:	ee77 7a67 	vsub.f32	s15, s14, s15
 800386c:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 8003870:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8003874:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8003878:	ee77 7a27 	vadd.f32	s15, s14, s15
 800387c:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 8003880:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8003884:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8003888:	ee77 7a67 	vsub.f32	s15, s14, s15
 800388c:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 8003890:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8003894:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8003898:	ee77 7a27 	vadd.f32	s15, s14, s15
 800389c:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 80038a0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80038a4:	00db      	lsls	r3, r3, #3
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	4413      	add	r3, r2
 80038aa:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80038ae:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80038b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038b6:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 80038ba:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80038be:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80038c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038c6:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 80038ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80038ce:	00db      	lsls	r3, r3, #3
 80038d0:	3304      	adds	r3, #4
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	4413      	add	r3, r2
 80038d6:	ed93 7a00 	vldr	s14, [r3]
 80038da:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	3304      	adds	r3, #4
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	4413      	add	r3, r2
 80038e6:	edd3 7a00 	vldr	s15, [r3]
 80038ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038ee:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 80038f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80038f6:	00db      	lsls	r3, r3, #3
 80038f8:	3304      	adds	r3, #4
 80038fa:	68fa      	ldr	r2, [r7, #12]
 80038fc:	4413      	add	r3, r2
 80038fe:	ed93 7a00 	vldr	s14, [r3]
 8003902:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003906:	00db      	lsls	r3, r3, #3
 8003908:	3304      	adds	r3, #4
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	4413      	add	r3, r2
 800390e:	edd3 7a00 	vldr	s15, [r3]
 8003912:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003916:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 800391a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800391e:	00db      	lsls	r3, r3, #3
 8003920:	3304      	adds	r3, #4
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	4413      	add	r3, r2
 8003926:	ed93 7a00 	vldr	s14, [r3]
 800392a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800392e:	00db      	lsls	r3, r3, #3
 8003930:	3304      	adds	r3, #4
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	4413      	add	r3, r2
 8003936:	edd3 7a00 	vldr	s15, [r3]
 800393a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800393e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8003942:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	3304      	adds	r3, #4
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	4413      	add	r3, r2
 800394e:	ed93 7a00 	vldr	s14, [r3]
 8003952:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	3304      	adds	r3, #4
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	4413      	add	r3, r2
 800395e:	edd3 7a00 	vldr	s15, [r3]
 8003962:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003966:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 800396a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800396e:	00db      	lsls	r3, r3, #3
 8003970:	3304      	adds	r3, #4
 8003972:	68fa      	ldr	r2, [r7, #12]
 8003974:	4413      	add	r3, r2
 8003976:	ed93 7a00 	vldr	s14, [r3]
 800397a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800397e:	00db      	lsls	r3, r3, #3
 8003980:	3304      	adds	r3, #4
 8003982:	68fa      	ldr	r2, [r7, #12]
 8003984:	4413      	add	r3, r2
 8003986:	edd3 7a00 	vldr	s15, [r3]
 800398a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800398e:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8003992:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003996:	00db      	lsls	r3, r3, #3
 8003998:	3304      	adds	r3, #4
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	4413      	add	r3, r2
 800399e:	ed93 7a00 	vldr	s14, [r3]
 80039a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80039a6:	00db      	lsls	r3, r3, #3
 80039a8:	3304      	adds	r3, #4
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	4413      	add	r3, r2
 80039ae:	edd3 7a00 	vldr	s15, [r3]
 80039b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039b6:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 80039ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	3304      	adds	r3, #4
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	4413      	add	r3, r2
 80039c6:	ed93 7a00 	vldr	s14, [r3]
 80039ca:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80039ce:	00db      	lsls	r3, r3, #3
 80039d0:	3304      	adds	r3, #4
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	4413      	add	r3, r2
 80039d6:	edd3 7a00 	vldr	s15, [r3]
 80039da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039de:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 80039e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80039e6:	00db      	lsls	r3, r3, #3
 80039e8:	3304      	adds	r3, #4
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	4413      	add	r3, r2
 80039ee:	ed93 7a00 	vldr	s14, [r3]
 80039f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80039f6:	00db      	lsls	r3, r3, #3
 80039f8:	3304      	adds	r3, #4
 80039fa:	68fa      	ldr	r2, [r7, #12]
 80039fc:	4413      	add	r3, r2
 80039fe:	edd3 7a00 	vldr	s15, [r3]
 8003a02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a06:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 8003a0a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003a0e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8003a12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a16:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 8003a1a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003a1e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8003a22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a26:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 8003a2a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003a2e:	edd7 7a08 	vldr	s15, [r7, #32]
 8003a32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a36:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 8003a3a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003a3e:	edd7 7a08 	vldr	s15, [r7, #32]
 8003a42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a46:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 8003a4a:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8003a4e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8003a52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a56:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 8003a5a:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8003a5e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8003a62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a66:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 8003a6a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	3304      	adds	r3, #4
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	4413      	add	r3, r2
 8003a76:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003a7a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003a7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a82:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 8003a86:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8003a8a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003a8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a92:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 8003a96:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8003a9a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8003a9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003aa2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 8003aa6:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8003aaa:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8003aae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ab2:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 8003ab6:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8003aba:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8003abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ac2:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 8003ac6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003aca:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ad2:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 8003ad6:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8003ada:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ae2:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 8003ae6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8003aea:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8003aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003af2:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 8003af6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003afa:	00db      	lsls	r3, r3, #3
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	4413      	add	r3, r2
 8003b00:	ed97 7a07 	vldr	s14, [r7, #28]
 8003b04:	edd7 7a06 	vldr	s15, [r7, #24]
 8003b08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b0c:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 8003b10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003b14:	00db      	lsls	r3, r3, #3
 8003b16:	3304      	adds	r3, #4
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	ed97 7a05 	vldr	s14, [r7, #20]
 8003b20:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b28:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 8003b2c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8003b30:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003b34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b38:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 8003b3c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003b40:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003b44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b48:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 8003b4c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8003b50:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003b54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b58:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 8003b5c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003b60:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003b64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b68:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 8003b6c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003b70:	00db      	lsls	r3, r3, #3
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	4413      	add	r3, r2
 8003b76:	ed97 7a07 	vldr	s14, [r7, #28]
 8003b7a:	edd7 7a06 	vldr	s15, [r7, #24]
 8003b7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b82:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 8003b86:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003b8a:	00db      	lsls	r3, r3, #3
 8003b8c:	3304      	adds	r3, #4
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	4413      	add	r3, r2
 8003b92:	ed97 7a05 	vldr	s14, [r7, #20]
 8003b96:	edd7 7a04 	vldr	s15, [r7, #16]
 8003b9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b9e:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 8003ba2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8003ba6:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8003baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bae:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 8003bb2:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8003bb6:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8003bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bbe:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 8003bc2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8003bc6:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8003bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bce:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 8003bd2:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8003bd6:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8003bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bde:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 8003be2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	4413      	add	r3, r2
 8003bec:	ed97 7a07 	vldr	s14, [r7, #28]
 8003bf0:	edd7 7a06 	vldr	s15, [r7, #24]
 8003bf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bf8:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 8003bfc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c00:	00db      	lsls	r3, r3, #3
 8003c02:	3304      	adds	r3, #4
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	4413      	add	r3, r2
 8003c08:	ed97 7a05 	vldr	s14, [r7, #20]
 8003c0c:	edd7 7a04 	vldr	s15, [r7, #16]
 8003c10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c14:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 8003c18:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8003c1c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8003c20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c24:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8003c28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c2c:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 8003c30:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8003c34:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8003c38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c3c:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8003c40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c44:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 8003c48:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8003c4c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8003c50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c54:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8003c58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c5c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 8003c60:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8003c64:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8003c68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c6c:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8003c70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c74:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 8003c78:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8003c7c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003c80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c84:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 8003c88:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8003c8c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003c90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c94:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 8003c98:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8003c9c:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8003ca0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ca4:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 8003ca8:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8003cac:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8003cb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cb4:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 8003cb8:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8003cbc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003cc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cc4:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 8003cc8:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8003ccc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003cd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cd4:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 8003cd8:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8003cdc:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8003ce0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ce4:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 8003ce8:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8003cec:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8003cf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cf4:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 8003cf8:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8003cfc:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8003d00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d04:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 8003d08:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8003d0c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8003d10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d14:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 8003d18:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8003d1c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8003d20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d24:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 8003d28:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8003d2c:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8003d30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d34:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 8003d38:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8003d3c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8003d40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d44:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 8003d48:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8003d4c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8003d50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d54:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 8003d58:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8003d5c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8003d60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d64:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 8003d68:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8003d6c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8003d70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d74:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 8003d78:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8003d7c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003d80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d84:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 8003d88:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003d8c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003d90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d94:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 8003d98:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8003d9c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003da0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003da4:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 8003da8:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8003dac:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003db0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003db4:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 8003db8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003dbc:	00db      	lsls	r3, r3, #3
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	ed97 7a07 	vldr	s14, [r7, #28]
 8003dc6:	edd7 7a06 	vldr	s15, [r7, #24]
 8003dca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dce:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 8003dd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003dd6:	00db      	lsls	r3, r3, #3
 8003dd8:	3304      	adds	r3, #4
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	4413      	add	r3, r2
 8003dde:	ed97 7a05 	vldr	s14, [r7, #20]
 8003de2:	edd7 7a04 	vldr	s15, [r7, #16]
 8003de6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003dea:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 8003dee:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8003df2:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8003df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dfa:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 8003dfe:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003e02:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8003e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e0a:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 8003e0e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8003e12:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8003e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e1a:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 8003e1e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8003e22:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8003e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e2a:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 8003e2e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003e32:	00db      	lsls	r3, r3, #3
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	4413      	add	r3, r2
 8003e38:	ed97 7a07 	vldr	s14, [r7, #28]
 8003e3c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003e40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e44:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 8003e48:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003e4c:	00db      	lsls	r3, r3, #3
 8003e4e:	3304      	adds	r3, #4
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	4413      	add	r3, r2
 8003e54:	ed97 7a05 	vldr	s14, [r7, #20]
 8003e58:	edd7 7a04 	vldr	s15, [r7, #16]
 8003e5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e60:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 8003e64:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003e68:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8003e6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e70:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 8003e74:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003e78:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8003e7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e80:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 8003e84:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003e88:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8003e8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e90:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 8003e94:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003e98:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8003e9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ea0:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 8003ea4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ea8:	00db      	lsls	r3, r3, #3
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	4413      	add	r3, r2
 8003eae:	ed97 7a07 	vldr	s14, [r7, #28]
 8003eb2:	edd7 7a06 	vldr	s15, [r7, #24]
 8003eb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003eba:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 8003ebe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ec2:	00db      	lsls	r3, r3, #3
 8003ec4:	3304      	adds	r3, #4
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	4413      	add	r3, r2
 8003eca:	ed97 7a05 	vldr	s14, [r7, #20]
 8003ece:	edd7 7a04 	vldr	s15, [r7, #16]
 8003ed2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ed6:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 8003eda:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8003ede:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8003ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ee6:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 8003eea:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003eee:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8003ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ef6:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 8003efa:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8003efe:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8003f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f06:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 8003f0a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8003f0e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8003f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f16:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 8003f1a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003f1e:	00db      	lsls	r3, r3, #3
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	4413      	add	r3, r2
 8003f24:	ed97 7a07 	vldr	s14, [r7, #28]
 8003f28:	edd7 7a06 	vldr	s15, [r7, #24]
 8003f2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f30:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 8003f34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003f38:	00db      	lsls	r3, r3, #3
 8003f3a:	3304      	adds	r3, #4
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	4413      	add	r3, r2
 8003f40:	ed97 7a05 	vldr	s14, [r7, #20]
 8003f44:	edd7 7a04 	vldr	s15, [r7, #16]
 8003f48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f4c:	edc3 7a00 	vstr	s15, [r3]
            
            i1 += n1;
 8003f50:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8003f54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f58:	4413      	add	r3, r2
 8003f5a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while(i1 < fftLen);
 8003f5e:	897b      	ldrh	r3, [r7, #10]
 8003f60:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8003f64:	429a      	cmp	r2, r3
 8003f66:	f4ff abba 	bcc.w	80036de <arm_radix8_butterfly_f32+0x746>
         
         j++;
 8003f6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f6e:	3301      	adds	r3, #1
 8003f70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while(j < n2);
 8003f74:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003f78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	f4ff ab2c 	bcc.w	80035da <arm_radix8_butterfly_f32+0x642>
      
      twidCoefModifier <<= 3;
 8003f82:	893b      	ldrh	r3, [r7, #8]
 8003f84:	00db      	lsls	r3, r3, #3
 8003f86:	813b      	strh	r3, [r7, #8]
   } while(n2 > 7);   
 8003f88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f8c:	2b07      	cmp	r3, #7
 8003f8e:	f63f a813 	bhi.w	8002fb8 <arm_radix8_butterfly_f32+0x20>
}
 8003f92:	e000      	b.n	8003f96 <arm_radix8_butterfly_f32+0xffe>
         break;
 8003f94:	bf00      	nop
}
 8003f96:	bf00      	nop
 8003f98:	37f4      	adds	r7, #244	; 0xf4
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop

08003fa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003faa:	2003      	movs	r0, #3
 8003fac:	f001 fc7e 	bl	80058ac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003fb0:	f005 faf8 	bl	80095a4 <HAL_RCC_GetSysClockFreq>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	4b15      	ldr	r3, [pc, #84]	; (800400c <HAL_Init+0x68>)
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	0a1b      	lsrs	r3, r3, #8
 8003fbc:	f003 030f 	and.w	r3, r3, #15
 8003fc0:	4913      	ldr	r1, [pc, #76]	; (8004010 <HAL_Init+0x6c>)
 8003fc2:	5ccb      	ldrb	r3, [r1, r3]
 8003fc4:	f003 031f 	and.w	r3, r3, #31
 8003fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8003fcc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003fce:	4b0f      	ldr	r3, [pc, #60]	; (800400c <HAL_Init+0x68>)
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	f003 030f 	and.w	r3, r3, #15
 8003fd6:	4a0e      	ldr	r2, [pc, #56]	; (8004010 <HAL_Init+0x6c>)
 8003fd8:	5cd3      	ldrb	r3, [r2, r3]
 8003fda:	f003 031f 	and.w	r3, r3, #31
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8003fe4:	4a0b      	ldr	r2, [pc, #44]	; (8004014 <HAL_Init+0x70>)
 8003fe6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003fe8:	4a0b      	ldr	r2, [pc, #44]	; (8004018 <HAL_Init+0x74>)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003fee:	2000      	movs	r0, #0
 8003ff0:	f000 f814 	bl	800401c <HAL_InitTick>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d001      	beq.n	8003ffe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e002      	b.n	8004004 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003ffe:	f7fd f977 	bl	80012f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004002:	2300      	movs	r3, #0
}
 8004004:	4618      	mov	r0, r3
 8004006:	3708      	adds	r7, #8
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	58024400 	.word	0x58024400
 8004010:	08011c20 	.word	0x08011c20
 8004014:	24000008 	.word	0x24000008
 8004018:	24000004 	.word	0x24000004

0800401c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004024:	4b15      	ldr	r3, [pc, #84]	; (800407c <HAL_InitTick+0x60>)
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d101      	bne.n	8004030 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e021      	b.n	8004074 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004030:	4b13      	ldr	r3, [pc, #76]	; (8004080 <HAL_InitTick+0x64>)
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	4b11      	ldr	r3, [pc, #68]	; (800407c <HAL_InitTick+0x60>)
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	4619      	mov	r1, r3
 800403a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800403e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004042:	fbb2 f3f3 	udiv	r3, r2, r3
 8004046:	4618      	mov	r0, r3
 8004048:	f001 fc63 	bl	8005912 <HAL_SYSTICK_Config>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e00e      	b.n	8004074 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2b0f      	cmp	r3, #15
 800405a:	d80a      	bhi.n	8004072 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800405c:	2200      	movs	r2, #0
 800405e:	6879      	ldr	r1, [r7, #4]
 8004060:	f04f 30ff 	mov.w	r0, #4294967295
 8004064:	f001 fc2d 	bl	80058c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004068:	4a06      	ldr	r2, [pc, #24]	; (8004084 <HAL_InitTick+0x68>)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800406e:	2300      	movs	r3, #0
 8004070:	e000      	b.n	8004074 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
}
 8004074:	4618      	mov	r0, r3
 8004076:	3708      	adds	r7, #8
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	24000010 	.word	0x24000010
 8004080:	24000004 	.word	0x24000004
 8004084:	2400000c 	.word	0x2400000c

08004088 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004088:	b480      	push	{r7}
 800408a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800408c:	4b06      	ldr	r3, [pc, #24]	; (80040a8 <HAL_IncTick+0x20>)
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	461a      	mov	r2, r3
 8004092:	4b06      	ldr	r3, [pc, #24]	; (80040ac <HAL_IncTick+0x24>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4413      	add	r3, r2
 8004098:	4a04      	ldr	r2, [pc, #16]	; (80040ac <HAL_IncTick+0x24>)
 800409a:	6013      	str	r3, [r2, #0]
}
 800409c:	bf00      	nop
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	24000010 	.word	0x24000010
 80040ac:	24004a48 	.word	0x24004a48

080040b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040b0:	b480      	push	{r7}
 80040b2:	af00      	add	r7, sp, #0
  return uwTick;
 80040b4:	4b03      	ldr	r3, [pc, #12]	; (80040c4 <HAL_GetTick+0x14>)
 80040b6:	681b      	ldr	r3, [r3, #0]
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	24004a48 	.word	0x24004a48

080040c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80040d0:	f7ff ffee 	bl	80040b0 <HAL_GetTick>
 80040d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e0:	d005      	beq.n	80040ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80040e2:	4b0a      	ldr	r3, [pc, #40]	; (800410c <HAL_Delay+0x44>)
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	461a      	mov	r2, r3
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	4413      	add	r3, r2
 80040ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80040ee:	bf00      	nop
 80040f0:	f7ff ffde 	bl	80040b0 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d8f7      	bhi.n	80040f0 <HAL_Delay+0x28>
  {
  }
}
 8004100:	bf00      	nop
 8004102:	bf00      	nop
 8004104:	3710      	adds	r7, #16
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	24000010 	.word	0x24000010

08004110 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004110:	b480      	push	{r7}
 8004112:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004114:	4b03      	ldr	r3, [pc, #12]	; (8004124 <HAL_GetREVID+0x14>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	0c1b      	lsrs	r3, r3, #16
}
 800411a:	4618      	mov	r0, r3
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr
 8004124:	5c001000 	.word	0x5c001000

08004128 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8004130:	4b06      	ldr	r3, [pc, #24]	; (800414c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004138:	4904      	ldr	r1, [pc, #16]	; (800414c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4313      	orrs	r3, r2
 800413e:	604b      	str	r3, [r1, #4]
}
 8004140:	bf00      	nop
 8004142:	370c      	adds	r7, #12
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr
 800414c:	58000400 	.word	0x58000400

08004150 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	431a      	orrs	r2, r3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	609a      	str	r2, [r3, #8]
}
 800416a:	bf00      	nop
 800416c:	370c      	adds	r7, #12
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr

08004176 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004176:	b480      	push	{r7}
 8004178:	b083      	sub	sp, #12
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
 800417e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	431a      	orrs	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	609a      	str	r2, [r3, #8]
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b087      	sub	sp, #28
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
 80041c4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	3360      	adds	r3, #96	; 0x60
 80041ca:	461a      	mov	r2, r3
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	4413      	add	r3, r2
 80041d2:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	430b      	orrs	r3, r1
 80041e6:	431a      	orrs	r2, r3
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80041ec:	bf00      	nop
 80041ee:	371c      	adds	r7, #28
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	60b9      	str	r1, [r7, #8]
 8004202:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	f003 031f 	and.w	r3, r3, #31
 8004212:	6879      	ldr	r1, [r7, #4]
 8004214:	fa01 f303 	lsl.w	r3, r1, r3
 8004218:	431a      	orrs	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	611a      	str	r2, [r3, #16]
}
 800421e:	bf00      	nop
 8004220:	3714      	adds	r7, #20
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr

0800422a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800422a:	b480      	push	{r7}
 800422c:	b087      	sub	sp, #28
 800422e:	af00      	add	r7, sp, #0
 8004230:	60f8      	str	r0, [r7, #12]
 8004232:	60b9      	str	r1, [r7, #8]
 8004234:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	3360      	adds	r3, #96	; 0x60
 800423a:	461a      	mov	r2, r3
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4413      	add	r3, r2
 8004242:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	431a      	orrs	r2, r3
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	601a      	str	r2, [r3, #0]
  }
}
 8004254:	bf00      	nop
 8004256:	371c      	adds	r7, #28
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004270:	2b00      	cmp	r3, #0
 8004272:	d101      	bne.n	8004278 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8004274:	2301      	movs	r3, #1
 8004276:	e000      	b.n	800427a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	370c      	adds	r7, #12
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr

08004286 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004286:	b480      	push	{r7}
 8004288:	b087      	sub	sp, #28
 800428a:	af00      	add	r7, sp, #0
 800428c:	60f8      	str	r0, [r7, #12]
 800428e:	60b9      	str	r1, [r7, #8]
 8004290:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	3330      	adds	r3, #48	; 0x30
 8004296:	461a      	mov	r2, r3
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	0a1b      	lsrs	r3, r3, #8
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	f003 030c 	and.w	r3, r3, #12
 80042a2:	4413      	add	r3, r2
 80042a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	f003 031f 	and.w	r3, r3, #31
 80042b0:	211f      	movs	r1, #31
 80042b2:	fa01 f303 	lsl.w	r3, r1, r3
 80042b6:	43db      	mvns	r3, r3
 80042b8:	401a      	ands	r2, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	0e9b      	lsrs	r3, r3, #26
 80042be:	f003 011f 	and.w	r1, r3, #31
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	f003 031f 	and.w	r3, r3, #31
 80042c8:	fa01 f303 	lsl.w	r3, r1, r3
 80042cc:	431a      	orrs	r2, r3
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80042d2:	bf00      	nop
 80042d4:	371c      	adds	r7, #28
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr

080042de <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80042de:	b480      	push	{r7}
 80042e0:	b083      	sub	sp, #12
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
 80042e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	f023 0203 	bic.w	r2, r3, #3
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	431a      	orrs	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	60da      	str	r2, [r3, #12]
}
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004304:	b480      	push	{r7}
 8004306:	b087      	sub	sp, #28
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	3314      	adds	r3, #20
 8004314:	461a      	mov	r2, r3
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	0e5b      	lsrs	r3, r3, #25
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	f003 0304 	and.w	r3, r3, #4
 8004320:	4413      	add	r3, r2
 8004322:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	0d1b      	lsrs	r3, r3, #20
 800432c:	f003 031f 	and.w	r3, r3, #31
 8004330:	2107      	movs	r1, #7
 8004332:	fa01 f303 	lsl.w	r3, r1, r3
 8004336:	43db      	mvns	r3, r3
 8004338:	401a      	ands	r2, r3
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	0d1b      	lsrs	r3, r3, #20
 800433e:	f003 031f 	and.w	r3, r3, #31
 8004342:	6879      	ldr	r1, [r7, #4]
 8004344:	fa01 f303 	lsl.w	r3, r1, r3
 8004348:	431a      	orrs	r2, r3
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800434e:	bf00      	nop
 8004350:	371c      	adds	r7, #28
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr
	...

0800435c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800435c:	b480      	push	{r7}
 800435e:	b085      	sub	sp, #20
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004374:	43db      	mvns	r3, r3
 8004376:	401a      	ands	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f003 0318 	and.w	r3, r3, #24
 800437e:	4908      	ldr	r1, [pc, #32]	; (80043a0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004380:	40d9      	lsrs	r1, r3
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	400b      	ands	r3, r1
 8004386:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800438a:	431a      	orrs	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8004392:	bf00      	nop
 8004394:	3714      	adds	r7, #20
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	000fffff 	.word	0x000fffff

080043a4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	f003 031f 	and.w	r3, r3, #31
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	370c      	adds	r7, #12
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	689a      	ldr	r2, [r3, #8]
 80043cc:	4b04      	ldr	r3, [pc, #16]	; (80043e0 <LL_ADC_DisableDeepPowerDown+0x20>)
 80043ce:	4013      	ands	r3, r2
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	6093      	str	r3, [r2, #8]
}
 80043d4:	bf00      	nop
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr
 80043e0:	5fffffc0 	.word	0x5fffffc0

080043e4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b083      	sub	sp, #12
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043f8:	d101      	bne.n	80043fe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80043fa:	2301      	movs	r3, #1
 80043fc:	e000      	b.n	8004400 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80043fe:	2300      	movs	r3, #0
}
 8004400:	4618      	mov	r0, r3
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800440c:	b480      	push	{r7}
 800440e:	b083      	sub	sp, #12
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	689a      	ldr	r2, [r3, #8]
 8004418:	4b05      	ldr	r3, [pc, #20]	; (8004430 <LL_ADC_EnableInternalRegulator+0x24>)
 800441a:	4013      	ands	r3, r2
 800441c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004424:	bf00      	nop
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr
 8004430:	6fffffc0 	.word	0x6fffffc0

08004434 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004444:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004448:	d101      	bne.n	800444e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800444a:	2301      	movs	r3, #1
 800444c:	e000      	b.n	8004450 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	689a      	ldr	r2, [r3, #8]
 8004468:	4b05      	ldr	r3, [pc, #20]	; (8004480 <LL_ADC_Enable+0x24>)
 800446a:	4013      	ands	r3, r2
 800446c:	f043 0201 	orr.w	r2, r3, #1
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr
 8004480:	7fffffc0 	.word	0x7fffffc0

08004484 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f003 0301 	and.w	r3, r3, #1
 8004494:	2b01      	cmp	r3, #1
 8004496:	d101      	bne.n	800449c <LL_ADC_IsEnabled+0x18>
 8004498:	2301      	movs	r3, #1
 800449a:	e000      	b.n	800449e <LL_ADC_IsEnabled+0x1a>
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
	...

080044ac <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689a      	ldr	r2, [r3, #8]
 80044b8:	4b05      	ldr	r3, [pc, #20]	; (80044d0 <LL_ADC_REG_StartConversion+0x24>)
 80044ba:	4013      	ands	r3, r2
 80044bc:	f043 0204 	orr.w	r2, r3, #4
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80044c4:	bf00      	nop
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	7fffffc0 	.word	0x7fffffc0

080044d4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f003 0304 	and.w	r3, r3, #4
 80044e4:	2b04      	cmp	r3, #4
 80044e6:	d101      	bne.n	80044ec <LL_ADC_REG_IsConversionOngoing+0x18>
 80044e8:	2301      	movs	r3, #1
 80044ea:	e000      	b.n	80044ee <LL_ADC_REG_IsConversionOngoing+0x1a>
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	370c      	adds	r7, #12
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr

080044fa <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80044fa:	b480      	push	{r7}
 80044fc:	b083      	sub	sp, #12
 80044fe:	af00      	add	r7, sp, #0
 8004500:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f003 0308 	and.w	r3, r3, #8
 800450a:	2b08      	cmp	r3, #8
 800450c:	d101      	bne.n	8004512 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800450e:	2301      	movs	r3, #1
 8004510:	e000      	b.n	8004514 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004520:	b590      	push	{r4, r7, lr}
 8004522:	b089      	sub	sp, #36	; 0x24
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004528:	2300      	movs	r3, #0
 800452a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800452c:	2300      	movs	r3, #0
 800452e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e18f      	b.n	800485a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004544:	2b00      	cmp	r3, #0
 8004546:	d109      	bne.n	800455c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f7fc feeb 	bl	8001324 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4618      	mov	r0, r3
 8004562:	f7ff ff3f 	bl	80043e4 <LL_ADC_IsDeepPowerDownEnabled>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d004      	beq.n	8004576 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4618      	mov	r0, r3
 8004572:	f7ff ff25 	bl	80043c0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4618      	mov	r0, r3
 800457c:	f7ff ff5a 	bl	8004434 <LL_ADC_IsInternalRegulatorEnabled>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d114      	bne.n	80045b0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4618      	mov	r0, r3
 800458c:	f7ff ff3e 	bl	800440c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004590:	4b87      	ldr	r3, [pc, #540]	; (80047b0 <HAL_ADC_Init+0x290>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	099b      	lsrs	r3, r3, #6
 8004596:	4a87      	ldr	r2, [pc, #540]	; (80047b4 <HAL_ADC_Init+0x294>)
 8004598:	fba2 2303 	umull	r2, r3, r2, r3
 800459c:	099b      	lsrs	r3, r3, #6
 800459e:	3301      	adds	r3, #1
 80045a0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80045a2:	e002      	b.n	80045aa <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	3b01      	subs	r3, #1
 80045a8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1f9      	bne.n	80045a4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7ff ff3d 	bl	8004434 <LL_ADC_IsInternalRegulatorEnabled>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d10d      	bne.n	80045dc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c4:	f043 0210 	orr.w	r2, r3, #16
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045d0:	f043 0201 	orr.w	r2, r3, #1
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4618      	mov	r0, r3
 80045e2:	f7ff ff77 	bl	80044d4 <LL_ADC_REG_IsConversionOngoing>
 80045e6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ec:	f003 0310 	and.w	r3, r3, #16
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	f040 8129 	bne.w	8004848 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f040 8125 	bne.w	8004848 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004602:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004606:	f043 0202 	orr.w	r2, r3, #2
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4618      	mov	r0, r3
 8004614:	f7ff ff36 	bl	8004484 <LL_ADC_IsEnabled>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d136      	bne.n	800468c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a65      	ldr	r2, [pc, #404]	; (80047b8 <HAL_ADC_Init+0x298>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d004      	beq.n	8004632 <HAL_ADC_Init+0x112>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a63      	ldr	r2, [pc, #396]	; (80047bc <HAL_ADC_Init+0x29c>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d10e      	bne.n	8004650 <HAL_ADC_Init+0x130>
 8004632:	4861      	ldr	r0, [pc, #388]	; (80047b8 <HAL_ADC_Init+0x298>)
 8004634:	f7ff ff26 	bl	8004484 <LL_ADC_IsEnabled>
 8004638:	4604      	mov	r4, r0
 800463a:	4860      	ldr	r0, [pc, #384]	; (80047bc <HAL_ADC_Init+0x29c>)
 800463c:	f7ff ff22 	bl	8004484 <LL_ADC_IsEnabled>
 8004640:	4603      	mov	r3, r0
 8004642:	4323      	orrs	r3, r4
 8004644:	2b00      	cmp	r3, #0
 8004646:	bf0c      	ite	eq
 8004648:	2301      	moveq	r3, #1
 800464a:	2300      	movne	r3, #0
 800464c:	b2db      	uxtb	r3, r3
 800464e:	e008      	b.n	8004662 <HAL_ADC_Init+0x142>
 8004650:	485b      	ldr	r0, [pc, #364]	; (80047c0 <HAL_ADC_Init+0x2a0>)
 8004652:	f7ff ff17 	bl	8004484 <LL_ADC_IsEnabled>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	bf0c      	ite	eq
 800465c:	2301      	moveq	r3, #1
 800465e:	2300      	movne	r3, #0
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b00      	cmp	r3, #0
 8004664:	d012      	beq.n	800468c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a53      	ldr	r2, [pc, #332]	; (80047b8 <HAL_ADC_Init+0x298>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d004      	beq.n	800467a <HAL_ADC_Init+0x15a>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a51      	ldr	r2, [pc, #324]	; (80047bc <HAL_ADC_Init+0x29c>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d101      	bne.n	800467e <HAL_ADC_Init+0x15e>
 800467a:	4a52      	ldr	r2, [pc, #328]	; (80047c4 <HAL_ADC_Init+0x2a4>)
 800467c:	e000      	b.n	8004680 <HAL_ADC_Init+0x160>
 800467e:	4a52      	ldr	r2, [pc, #328]	; (80047c8 <HAL_ADC_Init+0x2a8>)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	4619      	mov	r1, r3
 8004686:	4610      	mov	r0, r2
 8004688:	f7ff fd62 	bl	8004150 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800468c:	f7ff fd40 	bl	8004110 <HAL_GetREVID>
 8004690:	4603      	mov	r3, r0
 8004692:	f241 0203 	movw	r2, #4099	; 0x1003
 8004696:	4293      	cmp	r3, r2
 8004698:	d914      	bls.n	80046c4 <HAL_ADC_Init+0x1a4>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	2b10      	cmp	r3, #16
 80046a0:	d110      	bne.n	80046c4 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	7d5b      	ldrb	r3, [r3, #21]
 80046a6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80046ac:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80046b2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	7f1b      	ldrb	r3, [r3, #28]
 80046b8:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80046ba:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80046bc:	f043 030c 	orr.w	r3, r3, #12
 80046c0:	61bb      	str	r3, [r7, #24]
 80046c2:	e00d      	b.n	80046e0 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	7d5b      	ldrb	r3, [r3, #21]
 80046c8:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80046ce:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80046d4:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	7f1b      	ldrb	r3, [r3, #28]
 80046da:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80046dc:	4313      	orrs	r3, r2
 80046de:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	7f1b      	ldrb	r3, [r3, #28]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d106      	bne.n	80046f6 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a1b      	ldr	r3, [r3, #32]
 80046ec:	3b01      	subs	r3, #1
 80046ee:	045b      	lsls	r3, r3, #17
 80046f0:	69ba      	ldr	r2, [r7, #24]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d009      	beq.n	8004712 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004702:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800470a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800470c:	69ba      	ldr	r2, [r7, #24]
 800470e:	4313      	orrs	r3, r2
 8004710:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68da      	ldr	r2, [r3, #12]
 8004718:	4b2c      	ldr	r3, [pc, #176]	; (80047cc <HAL_ADC_Init+0x2ac>)
 800471a:	4013      	ands	r3, r2
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	6812      	ldr	r2, [r2, #0]
 8004720:	69b9      	ldr	r1, [r7, #24]
 8004722:	430b      	orrs	r3, r1
 8004724:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4618      	mov	r0, r3
 800472c:	f7ff fed2 	bl	80044d4 <LL_ADC_REG_IsConversionOngoing>
 8004730:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4618      	mov	r0, r3
 8004738:	f7ff fedf 	bl	80044fa <LL_ADC_INJ_IsConversionOngoing>
 800473c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d15f      	bne.n	8004804 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d15c      	bne.n	8004804 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	7d1b      	ldrb	r3, [r3, #20]
 800474e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8004754:	4313      	orrs	r3, r2
 8004756:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68da      	ldr	r2, [r3, #12]
 800475e:	4b1c      	ldr	r3, [pc, #112]	; (80047d0 <HAL_ADC_Init+0x2b0>)
 8004760:	4013      	ands	r3, r2
 8004762:	687a      	ldr	r2, [r7, #4]
 8004764:	6812      	ldr	r2, [r2, #0]
 8004766:	69b9      	ldr	r1, [r7, #24]
 8004768:	430b      	orrs	r3, r1
 800476a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004772:	2b01      	cmp	r3, #1
 8004774:	d130      	bne.n	80047d8 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	691a      	ldr	r2, [r3, #16]
 8004782:	4b14      	ldr	r3, [pc, #80]	; (80047d4 <HAL_ADC_Init+0x2b4>)
 8004784:	4013      	ands	r3, r2
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800478a:	3a01      	subs	r2, #1
 800478c:	0411      	lsls	r1, r2, #16
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004792:	4311      	orrs	r1, r2
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004798:	4311      	orrs	r1, r2
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800479e:	430a      	orrs	r2, r1
 80047a0:	431a      	orrs	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f042 0201 	orr.w	r2, r2, #1
 80047aa:	611a      	str	r2, [r3, #16]
 80047ac:	e01c      	b.n	80047e8 <HAL_ADC_Init+0x2c8>
 80047ae:	bf00      	nop
 80047b0:	24000004 	.word	0x24000004
 80047b4:	053e2d63 	.word	0x053e2d63
 80047b8:	40022000 	.word	0x40022000
 80047bc:	40022100 	.word	0x40022100
 80047c0:	58026000 	.word	0x58026000
 80047c4:	40022300 	.word	0x40022300
 80047c8:	58026300 	.word	0x58026300
 80047cc:	fff0c003 	.word	0xfff0c003
 80047d0:	ffffbffc 	.word	0xffffbffc
 80047d4:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	691a      	ldr	r2, [r3, #16]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f022 0201 	bic.w	r2, r2, #1
 80047e6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	691b      	ldr	r3, [r3, #16]
 80047ee:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	430a      	orrs	r2, r1
 80047fc:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 fd76 	bl	80052f0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d10c      	bne.n	8004826 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004812:	f023 010f 	bic.w	r1, r3, #15
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	699b      	ldr	r3, [r3, #24]
 800481a:	1e5a      	subs	r2, r3, #1
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	430a      	orrs	r2, r1
 8004822:	631a      	str	r2, [r3, #48]	; 0x30
 8004824:	e007      	b.n	8004836 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f022 020f 	bic.w	r2, r2, #15
 8004834:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800483a:	f023 0303 	bic.w	r3, r3, #3
 800483e:	f043 0201 	orr.w	r2, r3, #1
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	655a      	str	r2, [r3, #84]	; 0x54
 8004846:	e007      	b.n	8004858 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800484c:	f043 0210 	orr.w	r2, r3, #16
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004858:	7ffb      	ldrb	r3, [r7, #31]
}
 800485a:	4618      	mov	r0, r3
 800485c:	3724      	adds	r7, #36	; 0x24
 800485e:	46bd      	mov	sp, r7
 8004860:	bd90      	pop	{r4, r7, pc}
 8004862:	bf00      	nop

08004864 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b086      	sub	sp, #24
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a55      	ldr	r2, [pc, #340]	; (80049cc <HAL_ADC_Start_DMA+0x168>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d004      	beq.n	8004884 <HAL_ADC_Start_DMA+0x20>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a54      	ldr	r2, [pc, #336]	; (80049d0 <HAL_ADC_Start_DMA+0x16c>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d101      	bne.n	8004888 <HAL_ADC_Start_DMA+0x24>
 8004884:	4b53      	ldr	r3, [pc, #332]	; (80049d4 <HAL_ADC_Start_DMA+0x170>)
 8004886:	e000      	b.n	800488a <HAL_ADC_Start_DMA+0x26>
 8004888:	4b53      	ldr	r3, [pc, #332]	; (80049d8 <HAL_ADC_Start_DMA+0x174>)
 800488a:	4618      	mov	r0, r3
 800488c:	f7ff fd8a 	bl	80043a4 <LL_ADC_GetMultimode>
 8004890:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4618      	mov	r0, r3
 8004898:	f7ff fe1c 	bl	80044d4 <LL_ADC_REG_IsConversionOngoing>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f040 808c 	bne.w	80049bc <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d101      	bne.n	80048b2 <HAL_ADC_Start_DMA+0x4e>
 80048ae:	2302      	movs	r3, #2
 80048b0:	e087      	b.n	80049c2 <HAL_ADC_Start_DMA+0x15e>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2201      	movs	r2, #1
 80048b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d005      	beq.n	80048cc <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	2b05      	cmp	r3, #5
 80048c4:	d002      	beq.n	80048cc <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	2b09      	cmp	r3, #9
 80048ca:	d170      	bne.n	80049ae <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80048cc:	68f8      	ldr	r0, [r7, #12]
 80048ce:	f000 fbf1 	bl	80050b4 <ADC_Enable>
 80048d2:	4603      	mov	r3, r0
 80048d4:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80048d6:	7dfb      	ldrb	r3, [r7, #23]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d163      	bne.n	80049a4 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048e0:	4b3e      	ldr	r3, [pc, #248]	; (80049dc <HAL_ADC_Start_DMA+0x178>)
 80048e2:	4013      	ands	r3, r2
 80048e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a37      	ldr	r2, [pc, #220]	; (80049d0 <HAL_ADC_Start_DMA+0x16c>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d002      	beq.n	80048fc <HAL_ADC_Start_DMA+0x98>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	e000      	b.n	80048fe <HAL_ADC_Start_DMA+0x9a>
 80048fc:	4b33      	ldr	r3, [pc, #204]	; (80049cc <HAL_ADC_Start_DMA+0x168>)
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	6812      	ldr	r2, [r2, #0]
 8004902:	4293      	cmp	r3, r2
 8004904:	d002      	beq.n	800490c <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d105      	bne.n	8004918 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004910:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800491c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d006      	beq.n	8004932 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004928:	f023 0206 	bic.w	r2, r3, #6
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	659a      	str	r2, [r3, #88]	; 0x58
 8004930:	e002      	b.n	8004938 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2200      	movs	r2, #0
 8004936:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800493c:	4a28      	ldr	r2, [pc, #160]	; (80049e0 <HAL_ADC_Start_DMA+0x17c>)
 800493e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004944:	4a27      	ldr	r2, [pc, #156]	; (80049e4 <HAL_ADC_Start_DMA+0x180>)
 8004946:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800494c:	4a26      	ldr	r2, [pc, #152]	; (80049e8 <HAL_ADC_Start_DMA+0x184>)
 800494e:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	221c      	movs	r2, #28
 8004956:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2200      	movs	r2, #0
 800495c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	685a      	ldr	r2, [r3, #4]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f042 0210 	orr.w	r2, r2, #16
 800496e:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004978:	4619      	mov	r1, r3
 800497a:	4610      	mov	r0, r2
 800497c:	f7ff fcaf 	bl	80042de <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	3340      	adds	r3, #64	; 0x40
 800498a:	4619      	mov	r1, r3
 800498c:	68ba      	ldr	r2, [r7, #8]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f001 fb28 	bl	8005fe4 <HAL_DMA_Start_IT>
 8004994:	4603      	mov	r3, r0
 8004996:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4618      	mov	r0, r3
 800499e:	f7ff fd85 	bl	80044ac <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80049a2:	e00d      	b.n	80049c0 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 80049ac:	e008      	b.n	80049c0 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80049ba:	e001      	b.n	80049c0 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80049bc:	2302      	movs	r3, #2
 80049be:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80049c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3718      	adds	r7, #24
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	40022000 	.word	0x40022000
 80049d0:	40022100 	.word	0x40022100
 80049d4:	40022300 	.word	0x40022300
 80049d8:	58026300 	.word	0x58026300
 80049dc:	fffff0fe 	.word	0xfffff0fe
 80049e0:	080051c9 	.word	0x080051c9
 80049e4:	080052a1 	.word	0x080052a1
 80049e8:	080052bd 	.word	0x080052bd

080049ec <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80049f4:	bf00      	nop
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004a08:	bf00      	nop
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004a14:	b590      	push	{r4, r7, lr}
 8004a16:	b0a1      	sub	sp, #132	; 0x84
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004a24:	2300      	movs	r3, #0
 8004a26:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	4a9d      	ldr	r2, [pc, #628]	; (8004ca4 <HAL_ADC_ConfigChannel+0x290>)
 8004a2e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d101      	bne.n	8004a3e <HAL_ADC_ConfigChannel+0x2a>
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	e321      	b.n	8005082 <HAL_ADC_ConfigChannel+0x66e>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2201      	movs	r2, #1
 8004a42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7ff fd42 	bl	80044d4 <LL_ADC_REG_IsConversionOngoing>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	f040 8306 	bne.w	8005064 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d108      	bne.n	8004a76 <HAL_ADC_ConfigChannel+0x62>
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	0e9b      	lsrs	r3, r3, #26
 8004a6a:	f003 031f 	and.w	r3, r3, #31
 8004a6e:	2201      	movs	r2, #1
 8004a70:	fa02 f303 	lsl.w	r3, r2, r3
 8004a74:	e016      	b.n	8004aa4 <HAL_ADC_ConfigChannel+0x90>
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a7e:	fa93 f3a3 	rbit	r3, r3
 8004a82:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004a84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a86:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004a88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d101      	bne.n	8004a92 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8004a8e:	2320      	movs	r3, #32
 8004a90:	e003      	b.n	8004a9a <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8004a92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a94:	fab3 f383 	clz	r3, r3
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	f003 031f 	and.w	r3, r3, #31
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	6812      	ldr	r2, [r2, #0]
 8004aa8:	69d1      	ldr	r1, [r2, #28]
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	6812      	ldr	r2, [r2, #0]
 8004aae:	430b      	orrs	r3, r1
 8004ab0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6818      	ldr	r0, [r3, #0]
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	6859      	ldr	r1, [r3, #4]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	461a      	mov	r2, r3
 8004ac0:	f7ff fbe1 	bl	8004286 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f7ff fd03 	bl	80044d4 <LL_ADC_REG_IsConversionOngoing>
 8004ace:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7ff fd10 	bl	80044fa <LL_ADC_INJ_IsConversionOngoing>
 8004ada:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004adc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	f040 80b3 	bne.w	8004c4a <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004ae4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	f040 80af 	bne.w	8004c4a <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6818      	ldr	r0, [r3, #0]
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	6819      	ldr	r1, [r3, #0]
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	461a      	mov	r2, r3
 8004afa:	f7ff fc03 	bl	8004304 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004afe:	4b6a      	ldr	r3, [pc, #424]	; (8004ca8 <HAL_ADC_ConfigChannel+0x294>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004b06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b0a:	d10b      	bne.n	8004b24 <HAL_ADC_ConfigChannel+0x110>
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	695a      	ldr	r2, [r3, #20]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	089b      	lsrs	r3, r3, #2
 8004b18:	f003 0307 	and.w	r3, r3, #7
 8004b1c:	005b      	lsls	r3, r3, #1
 8004b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b22:	e01d      	b.n	8004b60 <HAL_ADC_ConfigChannel+0x14c>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	f003 0310 	and.w	r3, r3, #16
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d10b      	bne.n	8004b4a <HAL_ADC_ConfigChannel+0x136>
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	695a      	ldr	r2, [r3, #20]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	089b      	lsrs	r3, r3, #2
 8004b3e:	f003 0307 	and.w	r3, r3, #7
 8004b42:	005b      	lsls	r3, r3, #1
 8004b44:	fa02 f303 	lsl.w	r3, r2, r3
 8004b48:	e00a      	b.n	8004b60 <HAL_ADC_ConfigChannel+0x14c>
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	695a      	ldr	r2, [r3, #20]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	089b      	lsrs	r3, r3, #2
 8004b56:	f003 0304 	and.w	r3, r3, #4
 8004b5a:	005b      	lsls	r3, r3, #1
 8004b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b60:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	2b04      	cmp	r3, #4
 8004b68:	d027      	beq.n	8004bba <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6818      	ldr	r0, [r3, #0]
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	6919      	ldr	r1, [r3, #16]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b78:	f7ff fb1e 	bl	80041b8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6818      	ldr	r0, [r3, #0]
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	6919      	ldr	r1, [r3, #16]
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	7e5b      	ldrb	r3, [r3, #25]
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d102      	bne.n	8004b92 <HAL_ADC_ConfigChannel+0x17e>
 8004b8c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004b90:	e000      	b.n	8004b94 <HAL_ADC_ConfigChannel+0x180>
 8004b92:	2300      	movs	r3, #0
 8004b94:	461a      	mov	r2, r3
 8004b96:	f7ff fb48 	bl	800422a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6818      	ldr	r0, [r3, #0]
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	6919      	ldr	r1, [r3, #16]
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	7e1b      	ldrb	r3, [r3, #24]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d102      	bne.n	8004bb0 <HAL_ADC_ConfigChannel+0x19c>
 8004baa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004bae:	e000      	b.n	8004bb2 <HAL_ADC_ConfigChannel+0x19e>
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	f7ff fb20 	bl	80041f8 <LL_ADC_SetDataRightShift>
 8004bb8:	e047      	b.n	8004c4a <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bc0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	069b      	lsls	r3, r3, #26
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d107      	bne.n	8004bde <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004bdc:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004be4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	069b      	lsls	r3, r3, #26
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d107      	bne.n	8004c02 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004c00:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c08:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	069b      	lsls	r3, r3, #26
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d107      	bne.n	8004c26 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004c24:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004c2c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	069b      	lsls	r3, r3, #26
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d107      	bne.n	8004c4a <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004c48:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7ff fc18 	bl	8004484 <LL_ADC_IsEnabled>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	f040 820d 	bne.w	8005076 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6818      	ldr	r0, [r3, #0]
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	6819      	ldr	r1, [r3, #0]
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	461a      	mov	r2, r3
 8004c6a:	f7ff fb77 	bl	800435c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	4a0c      	ldr	r2, [pc, #48]	; (8004ca4 <HAL_ADC_ConfigChannel+0x290>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	f040 8133 	bne.w	8004ee0 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d110      	bne.n	8004cac <HAL_ADC_ConfigChannel+0x298>
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	0e9b      	lsrs	r3, r3, #26
 8004c90:	3301      	adds	r3, #1
 8004c92:	f003 031f 	and.w	r3, r3, #31
 8004c96:	2b09      	cmp	r3, #9
 8004c98:	bf94      	ite	ls
 8004c9a:	2301      	movls	r3, #1
 8004c9c:	2300      	movhi	r3, #0
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	e01e      	b.n	8004ce0 <HAL_ADC_ConfigChannel+0x2cc>
 8004ca2:	bf00      	nop
 8004ca4:	47ff0000 	.word	0x47ff0000
 8004ca8:	5c001000 	.word	0x5c001000
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004cb4:	fa93 f3a3 	rbit	r3, r3
 8004cb8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004cba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cbc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004cbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d101      	bne.n	8004cc8 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8004cc4:	2320      	movs	r3, #32
 8004cc6:	e003      	b.n	8004cd0 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8004cc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cca:	fab3 f383 	clz	r3, r3
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	f003 031f 	and.w	r3, r3, #31
 8004cd6:	2b09      	cmp	r3, #9
 8004cd8:	bf94      	ite	ls
 8004cda:	2301      	movls	r3, #1
 8004cdc:	2300      	movhi	r3, #0
 8004cde:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d079      	beq.n	8004dd8 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d107      	bne.n	8004d00 <HAL_ADC_ConfigChannel+0x2ec>
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	0e9b      	lsrs	r3, r3, #26
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	069b      	lsls	r3, r3, #26
 8004cfa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004cfe:	e015      	b.n	8004d2c <HAL_ADC_ConfigChannel+0x318>
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d08:	fa93 f3a3 	rbit	r3, r3
 8004d0c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004d0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d10:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004d12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d101      	bne.n	8004d1c <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8004d18:	2320      	movs	r3, #32
 8004d1a:	e003      	b.n	8004d24 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8004d1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d1e:	fab3 f383 	clz	r3, r3
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	3301      	adds	r3, #1
 8004d26:	069b      	lsls	r3, r3, #26
 8004d28:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d109      	bne.n	8004d4c <HAL_ADC_ConfigChannel+0x338>
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	0e9b      	lsrs	r3, r3, #26
 8004d3e:	3301      	adds	r3, #1
 8004d40:	f003 031f 	and.w	r3, r3, #31
 8004d44:	2101      	movs	r1, #1
 8004d46:	fa01 f303 	lsl.w	r3, r1, r3
 8004d4a:	e017      	b.n	8004d7c <HAL_ADC_ConfigChannel+0x368>
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d54:	fa93 f3a3 	rbit	r3, r3
 8004d58:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004d5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d5c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004d5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d101      	bne.n	8004d68 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8004d64:	2320      	movs	r3, #32
 8004d66:	e003      	b.n	8004d70 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8004d68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d6a:	fab3 f383 	clz	r3, r3
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	3301      	adds	r3, #1
 8004d72:	f003 031f 	and.w	r3, r3, #31
 8004d76:	2101      	movs	r1, #1
 8004d78:	fa01 f303 	lsl.w	r3, r1, r3
 8004d7c:	ea42 0103 	orr.w	r1, r2, r3
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d10a      	bne.n	8004da2 <HAL_ADC_ConfigChannel+0x38e>
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	0e9b      	lsrs	r3, r3, #26
 8004d92:	3301      	adds	r3, #1
 8004d94:	f003 021f 	and.w	r2, r3, #31
 8004d98:	4613      	mov	r3, r2
 8004d9a:	005b      	lsls	r3, r3, #1
 8004d9c:	4413      	add	r3, r2
 8004d9e:	051b      	lsls	r3, r3, #20
 8004da0:	e018      	b.n	8004dd4 <HAL_ADC_ConfigChannel+0x3c0>
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004daa:	fa93 f3a3 	rbit	r3, r3
 8004dae:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d101      	bne.n	8004dbe <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8004dba:	2320      	movs	r3, #32
 8004dbc:	e003      	b.n	8004dc6 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8004dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc0:	fab3 f383 	clz	r3, r3
 8004dc4:	b2db      	uxtb	r3, r3
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	f003 021f 	and.w	r2, r3, #31
 8004dcc:	4613      	mov	r3, r2
 8004dce:	005b      	lsls	r3, r3, #1
 8004dd0:	4413      	add	r3, r2
 8004dd2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004dd4:	430b      	orrs	r3, r1
 8004dd6:	e07e      	b.n	8004ed6 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d107      	bne.n	8004df4 <HAL_ADC_ConfigChannel+0x3e0>
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	0e9b      	lsrs	r3, r3, #26
 8004dea:	3301      	adds	r3, #1
 8004dec:	069b      	lsls	r3, r3, #26
 8004dee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004df2:	e015      	b.n	8004e20 <HAL_ADC_ConfigChannel+0x40c>
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfc:	fa93 f3a3 	rbit	r3, r3
 8004e00:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e04:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d101      	bne.n	8004e10 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8004e0c:	2320      	movs	r3, #32
 8004e0e:	e003      	b.n	8004e18 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8004e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e12:	fab3 f383 	clz	r3, r3
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	3301      	adds	r3, #1
 8004e1a:	069b      	lsls	r3, r3, #26
 8004e1c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d109      	bne.n	8004e40 <HAL_ADC_ConfigChannel+0x42c>
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	0e9b      	lsrs	r3, r3, #26
 8004e32:	3301      	adds	r3, #1
 8004e34:	f003 031f 	and.w	r3, r3, #31
 8004e38:	2101      	movs	r1, #1
 8004e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e3e:	e017      	b.n	8004e70 <HAL_ADC_ConfigChannel+0x45c>
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	fa93 f3a3 	rbit	r3, r3
 8004e4c:	61bb      	str	r3, [r7, #24]
  return result;
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004e52:	6a3b      	ldr	r3, [r7, #32]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d101      	bne.n	8004e5c <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8004e58:	2320      	movs	r3, #32
 8004e5a:	e003      	b.n	8004e64 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8004e5c:	6a3b      	ldr	r3, [r7, #32]
 8004e5e:	fab3 f383 	clz	r3, r3
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	3301      	adds	r3, #1
 8004e66:	f003 031f 	and.w	r3, r3, #31
 8004e6a:	2101      	movs	r1, #1
 8004e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e70:	ea42 0103 	orr.w	r1, r2, r3
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10d      	bne.n	8004e9c <HAL_ADC_ConfigChannel+0x488>
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	0e9b      	lsrs	r3, r3, #26
 8004e86:	3301      	adds	r3, #1
 8004e88:	f003 021f 	and.w	r2, r3, #31
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	005b      	lsls	r3, r3, #1
 8004e90:	4413      	add	r3, r2
 8004e92:	3b1e      	subs	r3, #30
 8004e94:	051b      	lsls	r3, r3, #20
 8004e96:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004e9a:	e01b      	b.n	8004ed4 <HAL_ADC_ConfigChannel+0x4c0>
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	fa93 f3a3 	rbit	r3, r3
 8004ea8:	60fb      	str	r3, [r7, #12]
  return result;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d101      	bne.n	8004eb8 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8004eb4:	2320      	movs	r3, #32
 8004eb6:	e003      	b.n	8004ec0 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	fab3 f383 	clz	r3, r3
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	f003 021f 	and.w	r2, r3, #31
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	005b      	lsls	r3, r3, #1
 8004eca:	4413      	add	r3, r2
 8004ecc:	3b1e      	subs	r3, #30
 8004ece:	051b      	lsls	r3, r3, #20
 8004ed0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ed4:	430b      	orrs	r3, r1
 8004ed6:	683a      	ldr	r2, [r7, #0]
 8004ed8:	6892      	ldr	r2, [r2, #8]
 8004eda:	4619      	mov	r1, r3
 8004edc:	f7ff fa12 	bl	8004304 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	f280 80c6 	bge.w	8005076 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a67      	ldr	r2, [pc, #412]	; (800508c <HAL_ADC_ConfigChannel+0x678>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d004      	beq.n	8004efe <HAL_ADC_ConfigChannel+0x4ea>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a65      	ldr	r2, [pc, #404]	; (8005090 <HAL_ADC_ConfigChannel+0x67c>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d101      	bne.n	8004f02 <HAL_ADC_ConfigChannel+0x4ee>
 8004efe:	4b65      	ldr	r3, [pc, #404]	; (8005094 <HAL_ADC_ConfigChannel+0x680>)
 8004f00:	e000      	b.n	8004f04 <HAL_ADC_ConfigChannel+0x4f0>
 8004f02:	4b65      	ldr	r3, [pc, #404]	; (8005098 <HAL_ADC_ConfigChannel+0x684>)
 8004f04:	4618      	mov	r0, r3
 8004f06:	f7ff f949 	bl	800419c <LL_ADC_GetCommonPathInternalCh>
 8004f0a:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a5e      	ldr	r2, [pc, #376]	; (800508c <HAL_ADC_ConfigChannel+0x678>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d004      	beq.n	8004f20 <HAL_ADC_ConfigChannel+0x50c>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a5d      	ldr	r2, [pc, #372]	; (8005090 <HAL_ADC_ConfigChannel+0x67c>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d10e      	bne.n	8004f3e <HAL_ADC_ConfigChannel+0x52a>
 8004f20:	485a      	ldr	r0, [pc, #360]	; (800508c <HAL_ADC_ConfigChannel+0x678>)
 8004f22:	f7ff faaf 	bl	8004484 <LL_ADC_IsEnabled>
 8004f26:	4604      	mov	r4, r0
 8004f28:	4859      	ldr	r0, [pc, #356]	; (8005090 <HAL_ADC_ConfigChannel+0x67c>)
 8004f2a:	f7ff faab 	bl	8004484 <LL_ADC_IsEnabled>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	4323      	orrs	r3, r4
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	bf0c      	ite	eq
 8004f36:	2301      	moveq	r3, #1
 8004f38:	2300      	movne	r3, #0
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	e008      	b.n	8004f50 <HAL_ADC_ConfigChannel+0x53c>
 8004f3e:	4857      	ldr	r0, [pc, #348]	; (800509c <HAL_ADC_ConfigChannel+0x688>)
 8004f40:	f7ff faa0 	bl	8004484 <LL_ADC_IsEnabled>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	bf0c      	ite	eq
 8004f4a:	2301      	moveq	r3, #1
 8004f4c:	2300      	movne	r3, #0
 8004f4e:	b2db      	uxtb	r3, r3
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d07d      	beq.n	8005050 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a51      	ldr	r2, [pc, #324]	; (80050a0 <HAL_ADC_ConfigChannel+0x68c>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d130      	bne.n	8004fc0 <HAL_ADC_ConfigChannel+0x5ac>
 8004f5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d12b      	bne.n	8004fc0 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a4b      	ldr	r2, [pc, #300]	; (800509c <HAL_ADC_ConfigChannel+0x688>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	f040 8081 	bne.w	8005076 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a44      	ldr	r2, [pc, #272]	; (800508c <HAL_ADC_ConfigChannel+0x678>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d004      	beq.n	8004f88 <HAL_ADC_ConfigChannel+0x574>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a43      	ldr	r2, [pc, #268]	; (8005090 <HAL_ADC_ConfigChannel+0x67c>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d101      	bne.n	8004f8c <HAL_ADC_ConfigChannel+0x578>
 8004f88:	4a42      	ldr	r2, [pc, #264]	; (8005094 <HAL_ADC_ConfigChannel+0x680>)
 8004f8a:	e000      	b.n	8004f8e <HAL_ADC_ConfigChannel+0x57a>
 8004f8c:	4a42      	ldr	r2, [pc, #264]	; (8005098 <HAL_ADC_ConfigChannel+0x684>)
 8004f8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f90:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004f94:	4619      	mov	r1, r3
 8004f96:	4610      	mov	r0, r2
 8004f98:	f7ff f8ed 	bl	8004176 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004f9c:	4b41      	ldr	r3, [pc, #260]	; (80050a4 <HAL_ADC_ConfigChannel+0x690>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	099b      	lsrs	r3, r3, #6
 8004fa2:	4a41      	ldr	r2, [pc, #260]	; (80050a8 <HAL_ADC_ConfigChannel+0x694>)
 8004fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa8:	099b      	lsrs	r3, r3, #6
 8004faa:	3301      	adds	r3, #1
 8004fac:	005b      	lsls	r3, r3, #1
 8004fae:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004fb0:	e002      	b.n	8004fb8 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	3b01      	subs	r3, #1
 8004fb6:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1f9      	bne.n	8004fb2 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004fbe:	e05a      	b.n	8005076 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a39      	ldr	r2, [pc, #228]	; (80050ac <HAL_ADC_ConfigChannel+0x698>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d11e      	bne.n	8005008 <HAL_ADC_ConfigChannel+0x5f4>
 8004fca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d119      	bne.n	8005008 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a30      	ldr	r2, [pc, #192]	; (800509c <HAL_ADC_ConfigChannel+0x688>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d14b      	bne.n	8005076 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a2a      	ldr	r2, [pc, #168]	; (800508c <HAL_ADC_ConfigChannel+0x678>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d004      	beq.n	8004ff2 <HAL_ADC_ConfigChannel+0x5de>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a28      	ldr	r2, [pc, #160]	; (8005090 <HAL_ADC_ConfigChannel+0x67c>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d101      	bne.n	8004ff6 <HAL_ADC_ConfigChannel+0x5e2>
 8004ff2:	4a28      	ldr	r2, [pc, #160]	; (8005094 <HAL_ADC_ConfigChannel+0x680>)
 8004ff4:	e000      	b.n	8004ff8 <HAL_ADC_ConfigChannel+0x5e4>
 8004ff6:	4a28      	ldr	r2, [pc, #160]	; (8005098 <HAL_ADC_ConfigChannel+0x684>)
 8004ff8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ffa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ffe:	4619      	mov	r1, r3
 8005000:	4610      	mov	r0, r2
 8005002:	f7ff f8b8 	bl	8004176 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005006:	e036      	b.n	8005076 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a28      	ldr	r2, [pc, #160]	; (80050b0 <HAL_ADC_ConfigChannel+0x69c>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d131      	bne.n	8005076 <HAL_ADC_ConfigChannel+0x662>
 8005012:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005014:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005018:	2b00      	cmp	r3, #0
 800501a:	d12c      	bne.n	8005076 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a1e      	ldr	r2, [pc, #120]	; (800509c <HAL_ADC_ConfigChannel+0x688>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d127      	bne.n	8005076 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a18      	ldr	r2, [pc, #96]	; (800508c <HAL_ADC_ConfigChannel+0x678>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d004      	beq.n	800503a <HAL_ADC_ConfigChannel+0x626>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a16      	ldr	r2, [pc, #88]	; (8005090 <HAL_ADC_ConfigChannel+0x67c>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d101      	bne.n	800503e <HAL_ADC_ConfigChannel+0x62a>
 800503a:	4a16      	ldr	r2, [pc, #88]	; (8005094 <HAL_ADC_ConfigChannel+0x680>)
 800503c:	e000      	b.n	8005040 <HAL_ADC_ConfigChannel+0x62c>
 800503e:	4a16      	ldr	r2, [pc, #88]	; (8005098 <HAL_ADC_ConfigChannel+0x684>)
 8005040:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005042:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005046:	4619      	mov	r1, r3
 8005048:	4610      	mov	r0, r2
 800504a:	f7ff f894 	bl	8004176 <LL_ADC_SetCommonPathInternalCh>
 800504e:	e012      	b.n	8005076 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005054:	f043 0220 	orr.w	r2, r3, #32
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005062:	e008      	b.n	8005076 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005068:	f043 0220 	orr.w	r2, r3, #32
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800507e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005082:	4618      	mov	r0, r3
 8005084:	3784      	adds	r7, #132	; 0x84
 8005086:	46bd      	mov	sp, r7
 8005088:	bd90      	pop	{r4, r7, pc}
 800508a:	bf00      	nop
 800508c:	40022000 	.word	0x40022000
 8005090:	40022100 	.word	0x40022100
 8005094:	40022300 	.word	0x40022300
 8005098:	58026300 	.word	0x58026300
 800509c:	58026000 	.word	0x58026000
 80050a0:	cb840000 	.word	0xcb840000
 80050a4:	24000004 	.word	0x24000004
 80050a8:	053e2d63 	.word	0x053e2d63
 80050ac:	c7520000 	.word	0xc7520000
 80050b0:	cfb80000 	.word	0xcfb80000

080050b4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4618      	mov	r0, r3
 80050c2:	f7ff f9df 	bl	8004484 <LL_ADC_IsEnabled>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d16e      	bne.n	80051aa <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	689a      	ldr	r2, [r3, #8]
 80050d2:	4b38      	ldr	r3, [pc, #224]	; (80051b4 <ADC_Enable+0x100>)
 80050d4:	4013      	ands	r3, r2
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00d      	beq.n	80050f6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050de:	f043 0210 	orr.w	r2, r3, #16
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ea:	f043 0201 	orr.w	r2, r3, #1
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e05a      	b.n	80051ac <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7ff f9ae 	bl	800445c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005100:	f7fe ffd6 	bl	80040b0 <HAL_GetTick>
 8005104:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a2b      	ldr	r2, [pc, #172]	; (80051b8 <ADC_Enable+0x104>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d004      	beq.n	800511a <ADC_Enable+0x66>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a29      	ldr	r2, [pc, #164]	; (80051bc <ADC_Enable+0x108>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d101      	bne.n	800511e <ADC_Enable+0x6a>
 800511a:	4b29      	ldr	r3, [pc, #164]	; (80051c0 <ADC_Enable+0x10c>)
 800511c:	e000      	b.n	8005120 <ADC_Enable+0x6c>
 800511e:	4b29      	ldr	r3, [pc, #164]	; (80051c4 <ADC_Enable+0x110>)
 8005120:	4618      	mov	r0, r3
 8005122:	f7ff f93f 	bl	80043a4 <LL_ADC_GetMultimode>
 8005126:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a23      	ldr	r2, [pc, #140]	; (80051bc <ADC_Enable+0x108>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d002      	beq.n	8005138 <ADC_Enable+0x84>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	e000      	b.n	800513a <ADC_Enable+0x86>
 8005138:	4b1f      	ldr	r3, [pc, #124]	; (80051b8 <ADC_Enable+0x104>)
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	6812      	ldr	r2, [r2, #0]
 800513e:	4293      	cmp	r3, r2
 8005140:	d02c      	beq.n	800519c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d130      	bne.n	80051aa <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005148:	e028      	b.n	800519c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4618      	mov	r0, r3
 8005150:	f7ff f998 	bl	8004484 <LL_ADC_IsEnabled>
 8005154:	4603      	mov	r3, r0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d104      	bne.n	8005164 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4618      	mov	r0, r3
 8005160:	f7ff f97c 	bl	800445c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005164:	f7fe ffa4 	bl	80040b0 <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	2b02      	cmp	r3, #2
 8005170:	d914      	bls.n	800519c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0301 	and.w	r3, r3, #1
 800517c:	2b01      	cmp	r3, #1
 800517e:	d00d      	beq.n	800519c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005184:	f043 0210 	orr.w	r2, r3, #16
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005190:	f043 0201 	orr.w	r2, r3, #1
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e007      	b.n	80051ac <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f003 0301 	and.w	r3, r3, #1
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d1cf      	bne.n	800514a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3710      	adds	r7, #16
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	8000003f 	.word	0x8000003f
 80051b8:	40022000 	.word	0x40022000
 80051bc:	40022100 	.word	0x40022100
 80051c0:	40022300 	.word	0x40022300
 80051c4:	58026300 	.word	0x58026300

080051c8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b084      	sub	sp, #16
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051da:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d14b      	bne.n	800527a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051e6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0308 	and.w	r3, r3, #8
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d021      	beq.n	8005240 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4618      	mov	r0, r3
 8005202:	f7ff f82d 	bl	8004260 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d032      	beq.n	8005272 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d12b      	bne.n	8005272 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800521e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800522a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d11f      	bne.n	8005272 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005236:	f043 0201 	orr.w	r2, r3, #1
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	655a      	str	r2, [r3, #84]	; 0x54
 800523e:	e018      	b.n	8005272 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	f003 0303 	and.w	r3, r3, #3
 800524a:	2b00      	cmp	r3, #0
 800524c:	d111      	bne.n	8005272 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005252:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800525e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d105      	bne.n	8005272 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800526a:	f043 0201 	orr.w	r2, r3, #1
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f7fb fd00 	bl	8000c78 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005278:	e00e      	b.n	8005298 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800527e:	f003 0310 	and.w	r3, r3, #16
 8005282:	2b00      	cmp	r3, #0
 8005284:	d003      	beq.n	800528e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005286:	68f8      	ldr	r0, [r7, #12]
 8005288:	f7ff fbba 	bl	8004a00 <HAL_ADC_ErrorCallback>
}
 800528c:	e004      	b.n	8005298 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	4798      	blx	r3
}
 8005298:	bf00      	nop
 800529a:	3710      	adds	r7, #16
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ac:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f7ff fb9c 	bl	80049ec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80052b4:	bf00      	nop
 80052b6:	3710      	adds	r7, #16
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052da:	f043 0204 	orr.w	r2, r3, #4
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80052e2:	68f8      	ldr	r0, [r7, #12]
 80052e4:	f7ff fb8c 	bl	8004a00 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80052e8:	bf00      	nop
 80052ea:	3710      	adds	r7, #16
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a79      	ldr	r2, [pc, #484]	; (80054e4 <ADC_ConfigureBoostMode+0x1f4>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d004      	beq.n	800530c <ADC_ConfigureBoostMode+0x1c>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a78      	ldr	r2, [pc, #480]	; (80054e8 <ADC_ConfigureBoostMode+0x1f8>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d109      	bne.n	8005320 <ADC_ConfigureBoostMode+0x30>
 800530c:	4b77      	ldr	r3, [pc, #476]	; (80054ec <ADC_ConfigureBoostMode+0x1fc>)
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005314:	2b00      	cmp	r3, #0
 8005316:	bf14      	ite	ne
 8005318:	2301      	movne	r3, #1
 800531a:	2300      	moveq	r3, #0
 800531c:	b2db      	uxtb	r3, r3
 800531e:	e008      	b.n	8005332 <ADC_ConfigureBoostMode+0x42>
 8005320:	4b73      	ldr	r3, [pc, #460]	; (80054f0 <ADC_ConfigureBoostMode+0x200>)
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005328:	2b00      	cmp	r3, #0
 800532a:	bf14      	ite	ne
 800532c:	2301      	movne	r3, #1
 800532e:	2300      	moveq	r3, #0
 8005330:	b2db      	uxtb	r3, r3
 8005332:	2b00      	cmp	r3, #0
 8005334:	d01c      	beq.n	8005370 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005336:	f004 faaf 	bl	8009898 <HAL_RCC_GetHCLKFreq>
 800533a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005344:	d010      	beq.n	8005368 <ADC_ConfigureBoostMode+0x78>
 8005346:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800534a:	d871      	bhi.n	8005430 <ADC_ConfigureBoostMode+0x140>
 800534c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005350:	d002      	beq.n	8005358 <ADC_ConfigureBoostMode+0x68>
 8005352:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005356:	d16b      	bne.n	8005430 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	0c1b      	lsrs	r3, r3, #16
 800535e:	68fa      	ldr	r2, [r7, #12]
 8005360:	fbb2 f3f3 	udiv	r3, r2, r3
 8005364:	60fb      	str	r3, [r7, #12]
        break;
 8005366:	e066      	b.n	8005436 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	089b      	lsrs	r3, r3, #2
 800536c:	60fb      	str	r3, [r7, #12]
        break;
 800536e:	e062      	b.n	8005436 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005370:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005374:	f005 fa32 	bl	800a7dc <HAL_RCCEx_GetPeriphCLKFreq>
 8005378:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005382:	d051      	beq.n	8005428 <ADC_ConfigureBoostMode+0x138>
 8005384:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005388:	d854      	bhi.n	8005434 <ADC_ConfigureBoostMode+0x144>
 800538a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800538e:	d047      	beq.n	8005420 <ADC_ConfigureBoostMode+0x130>
 8005390:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005394:	d84e      	bhi.n	8005434 <ADC_ConfigureBoostMode+0x144>
 8005396:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800539a:	d03d      	beq.n	8005418 <ADC_ConfigureBoostMode+0x128>
 800539c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80053a0:	d848      	bhi.n	8005434 <ADC_ConfigureBoostMode+0x144>
 80053a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053a6:	d033      	beq.n	8005410 <ADC_ConfigureBoostMode+0x120>
 80053a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053ac:	d842      	bhi.n	8005434 <ADC_ConfigureBoostMode+0x144>
 80053ae:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80053b2:	d029      	beq.n	8005408 <ADC_ConfigureBoostMode+0x118>
 80053b4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80053b8:	d83c      	bhi.n	8005434 <ADC_ConfigureBoostMode+0x144>
 80053ba:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80053be:	d01a      	beq.n	80053f6 <ADC_ConfigureBoostMode+0x106>
 80053c0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80053c4:	d836      	bhi.n	8005434 <ADC_ConfigureBoostMode+0x144>
 80053c6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80053ca:	d014      	beq.n	80053f6 <ADC_ConfigureBoostMode+0x106>
 80053cc:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80053d0:	d830      	bhi.n	8005434 <ADC_ConfigureBoostMode+0x144>
 80053d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053d6:	d00e      	beq.n	80053f6 <ADC_ConfigureBoostMode+0x106>
 80053d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053dc:	d82a      	bhi.n	8005434 <ADC_ConfigureBoostMode+0x144>
 80053de:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80053e2:	d008      	beq.n	80053f6 <ADC_ConfigureBoostMode+0x106>
 80053e4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80053e8:	d824      	bhi.n	8005434 <ADC_ConfigureBoostMode+0x144>
 80053ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80053ee:	d002      	beq.n	80053f6 <ADC_ConfigureBoostMode+0x106>
 80053f0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80053f4:	d11e      	bne.n	8005434 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	0c9b      	lsrs	r3, r3, #18
 80053fc:	005b      	lsls	r3, r3, #1
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	fbb2 f3f3 	udiv	r3, r2, r3
 8005404:	60fb      	str	r3, [r7, #12]
        break;
 8005406:	e016      	b.n	8005436 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	091b      	lsrs	r3, r3, #4
 800540c:	60fb      	str	r3, [r7, #12]
        break;
 800540e:	e012      	b.n	8005436 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	095b      	lsrs	r3, r3, #5
 8005414:	60fb      	str	r3, [r7, #12]
        break;
 8005416:	e00e      	b.n	8005436 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	099b      	lsrs	r3, r3, #6
 800541c:	60fb      	str	r3, [r7, #12]
        break;
 800541e:	e00a      	b.n	8005436 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	09db      	lsrs	r3, r3, #7
 8005424:	60fb      	str	r3, [r7, #12]
        break;
 8005426:	e006      	b.n	8005436 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	0a1b      	lsrs	r3, r3, #8
 800542c:	60fb      	str	r3, [r7, #12]
        break;
 800542e:	e002      	b.n	8005436 <ADC_ConfigureBoostMode+0x146>
        break;
 8005430:	bf00      	nop
 8005432:	e000      	b.n	8005436 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8005434:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8005436:	f7fe fe6b 	bl	8004110 <HAL_GetREVID>
 800543a:	4603      	mov	r3, r0
 800543c:	f241 0203 	movw	r2, #4099	; 0x1003
 8005440:	4293      	cmp	r3, r2
 8005442:	d815      	bhi.n	8005470 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	4a2b      	ldr	r2, [pc, #172]	; (80054f4 <ADC_ConfigureBoostMode+0x204>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d908      	bls.n	800545e <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	689a      	ldr	r2, [r3, #8]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800545a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800545c:	e03e      	b.n	80054dc <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	689a      	ldr	r2, [r3, #8]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800546c:	609a      	str	r2, [r3, #8]
}
 800546e:	e035      	b.n	80054dc <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	085b      	lsrs	r3, r3, #1
 8005474:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	4a1f      	ldr	r2, [pc, #124]	; (80054f8 <ADC_ConfigureBoostMode+0x208>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d808      	bhi.n	8005490 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	689a      	ldr	r2, [r3, #8]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800548c:	609a      	str	r2, [r3, #8]
}
 800548e:	e025      	b.n	80054dc <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	4a1a      	ldr	r2, [pc, #104]	; (80054fc <ADC_ConfigureBoostMode+0x20c>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d80a      	bhi.n	80054ae <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054aa:	609a      	str	r2, [r3, #8]
}
 80054ac:	e016      	b.n	80054dc <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	4a13      	ldr	r2, [pc, #76]	; (8005500 <ADC_ConfigureBoostMode+0x210>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d80a      	bhi.n	80054cc <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054c8:	609a      	str	r2, [r3, #8]
}
 80054ca:	e007      	b.n	80054dc <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	689a      	ldr	r2, [r3, #8]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80054da:	609a      	str	r2, [r3, #8]
}
 80054dc:	bf00      	nop
 80054de:	3710      	adds	r7, #16
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	40022000 	.word	0x40022000
 80054e8:	40022100 	.word	0x40022100
 80054ec:	40022300 	.word	0x40022300
 80054f0:	58026300 	.word	0x58026300
 80054f4:	01312d00 	.word	0x01312d00
 80054f8:	005f5e10 	.word	0x005f5e10
 80054fc:	00bebc20 	.word	0x00bebc20
 8005500:	017d7840 	.word	0x017d7840

08005504 <LL_ADC_IsEnabled>:
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	f003 0301 	and.w	r3, r3, #1
 8005514:	2b01      	cmp	r3, #1
 8005516:	d101      	bne.n	800551c <LL_ADC_IsEnabled+0x18>
 8005518:	2301      	movs	r3, #1
 800551a:	e000      	b.n	800551e <LL_ADC_IsEnabled+0x1a>
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	370c      	adds	r7, #12
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr

0800552a <LL_ADC_REG_IsConversionOngoing>:
{
 800552a:	b480      	push	{r7}
 800552c:	b083      	sub	sp, #12
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	f003 0304 	and.w	r3, r3, #4
 800553a:	2b04      	cmp	r3, #4
 800553c:	d101      	bne.n	8005542 <LL_ADC_REG_IsConversionOngoing+0x18>
 800553e:	2301      	movs	r3, #1
 8005540:	e000      	b.n	8005544 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005550:	b590      	push	{r4, r7, lr}
 8005552:	b09f      	sub	sp, #124	; 0x7c
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800555a:	2300      	movs	r3, #0
 800555c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005566:	2b01      	cmp	r3, #1
 8005568:	d101      	bne.n	800556e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800556a:	2302      	movs	r3, #2
 800556c:	e0be      	b.n	80056ec <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2201      	movs	r2, #1
 8005572:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8005576:	2300      	movs	r3, #0
 8005578:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800557a:	2300      	movs	r3, #0
 800557c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a5c      	ldr	r2, [pc, #368]	; (80056f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d102      	bne.n	800558e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005588:	4b5b      	ldr	r3, [pc, #364]	; (80056f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800558a:	60bb      	str	r3, [r7, #8]
 800558c:	e001      	b.n	8005592 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800558e:	2300      	movs	r3, #0
 8005590:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d10b      	bne.n	80055b0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800559c:	f043 0220 	orr.w	r2, r3, #32
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e09d      	b.n	80056ec <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	4618      	mov	r0, r3
 80055b4:	f7ff ffb9 	bl	800552a <LL_ADC_REG_IsConversionOngoing>
 80055b8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4618      	mov	r0, r3
 80055c0:	f7ff ffb3 	bl	800552a <LL_ADC_REG_IsConversionOngoing>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d17f      	bne.n	80056ca <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80055ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d17c      	bne.n	80056ca <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a47      	ldr	r2, [pc, #284]	; (80056f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d004      	beq.n	80055e4 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a46      	ldr	r2, [pc, #280]	; (80056f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d101      	bne.n	80055e8 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80055e4:	4b45      	ldr	r3, [pc, #276]	; (80056fc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80055e6:	e000      	b.n	80055ea <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80055e8:	4b45      	ldr	r3, [pc, #276]	; (8005700 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80055ea:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d039      	beq.n	8005668 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80055f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	431a      	orrs	r2, r3
 8005602:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005604:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a3a      	ldr	r2, [pc, #232]	; (80056f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d004      	beq.n	800561a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a38      	ldr	r2, [pc, #224]	; (80056f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d10e      	bne.n	8005638 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800561a:	4836      	ldr	r0, [pc, #216]	; (80056f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800561c:	f7ff ff72 	bl	8005504 <LL_ADC_IsEnabled>
 8005620:	4604      	mov	r4, r0
 8005622:	4835      	ldr	r0, [pc, #212]	; (80056f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005624:	f7ff ff6e 	bl	8005504 <LL_ADC_IsEnabled>
 8005628:	4603      	mov	r3, r0
 800562a:	4323      	orrs	r3, r4
 800562c:	2b00      	cmp	r3, #0
 800562e:	bf0c      	ite	eq
 8005630:	2301      	moveq	r3, #1
 8005632:	2300      	movne	r3, #0
 8005634:	b2db      	uxtb	r3, r3
 8005636:	e008      	b.n	800564a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8005638:	4832      	ldr	r0, [pc, #200]	; (8005704 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800563a:	f7ff ff63 	bl	8005504 <LL_ADC_IsEnabled>
 800563e:	4603      	mov	r3, r0
 8005640:	2b00      	cmp	r3, #0
 8005642:	bf0c      	ite	eq
 8005644:	2301      	moveq	r3, #1
 8005646:	2300      	movne	r3, #0
 8005648:	b2db      	uxtb	r3, r3
 800564a:	2b00      	cmp	r3, #0
 800564c:	d047      	beq.n	80056de <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800564e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005650:	689a      	ldr	r2, [r3, #8]
 8005652:	4b2d      	ldr	r3, [pc, #180]	; (8005708 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005654:	4013      	ands	r3, r2
 8005656:	683a      	ldr	r2, [r7, #0]
 8005658:	6811      	ldr	r1, [r2, #0]
 800565a:	683a      	ldr	r2, [r7, #0]
 800565c:	6892      	ldr	r2, [r2, #8]
 800565e:	430a      	orrs	r2, r1
 8005660:	431a      	orrs	r2, r3
 8005662:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005664:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005666:	e03a      	b.n	80056de <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005668:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005672:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a1e      	ldr	r2, [pc, #120]	; (80056f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d004      	beq.n	8005688 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a1d      	ldr	r2, [pc, #116]	; (80056f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d10e      	bne.n	80056a6 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8005688:	481a      	ldr	r0, [pc, #104]	; (80056f4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800568a:	f7ff ff3b 	bl	8005504 <LL_ADC_IsEnabled>
 800568e:	4604      	mov	r4, r0
 8005690:	4819      	ldr	r0, [pc, #100]	; (80056f8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005692:	f7ff ff37 	bl	8005504 <LL_ADC_IsEnabled>
 8005696:	4603      	mov	r3, r0
 8005698:	4323      	orrs	r3, r4
 800569a:	2b00      	cmp	r3, #0
 800569c:	bf0c      	ite	eq
 800569e:	2301      	moveq	r3, #1
 80056a0:	2300      	movne	r3, #0
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	e008      	b.n	80056b8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80056a6:	4817      	ldr	r0, [pc, #92]	; (8005704 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80056a8:	f7ff ff2c 	bl	8005504 <LL_ADC_IsEnabled>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	bf0c      	ite	eq
 80056b2:	2301      	moveq	r3, #1
 80056b4:	2300      	movne	r3, #0
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d010      	beq.n	80056de <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80056bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056be:	689a      	ldr	r2, [r3, #8]
 80056c0:	4b11      	ldr	r3, [pc, #68]	; (8005708 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80056c2:	4013      	ands	r3, r2
 80056c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80056c6:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80056c8:	e009      	b.n	80056de <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ce:	f043 0220 	orr.w	r2, r3, #32
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80056dc:	e000      	b.n	80056e0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80056de:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80056e8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	377c      	adds	r7, #124	; 0x7c
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd90      	pop	{r4, r7, pc}
 80056f4:	40022000 	.word	0x40022000
 80056f8:	40022100 	.word	0x40022100
 80056fc:	40022300 	.word	0x40022300
 8005700:	58026300 	.word	0x58026300
 8005704:	58026000 	.word	0x58026000
 8005708:	fffff0e0 	.word	0xfffff0e0

0800570c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800570c:	b480      	push	{r7}
 800570e:	b085      	sub	sp, #20
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f003 0307 	and.w	r3, r3, #7
 800571a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800571c:	4b0b      	ldr	r3, [pc, #44]	; (800574c <__NVIC_SetPriorityGrouping+0x40>)
 800571e:	68db      	ldr	r3, [r3, #12]
 8005720:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005722:	68ba      	ldr	r2, [r7, #8]
 8005724:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005728:	4013      	ands	r3, r2
 800572a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005734:	4b06      	ldr	r3, [pc, #24]	; (8005750 <__NVIC_SetPriorityGrouping+0x44>)
 8005736:	4313      	orrs	r3, r2
 8005738:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800573a:	4a04      	ldr	r2, [pc, #16]	; (800574c <__NVIC_SetPriorityGrouping+0x40>)
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	60d3      	str	r3, [r2, #12]
}
 8005740:	bf00      	nop
 8005742:	3714      	adds	r7, #20
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr
 800574c:	e000ed00 	.word	0xe000ed00
 8005750:	05fa0000 	.word	0x05fa0000

08005754 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005754:	b480      	push	{r7}
 8005756:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005758:	4b04      	ldr	r3, [pc, #16]	; (800576c <__NVIC_GetPriorityGrouping+0x18>)
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	0a1b      	lsrs	r3, r3, #8
 800575e:	f003 0307 	and.w	r3, r3, #7
}
 8005762:	4618      	mov	r0, r3
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr
 800576c:	e000ed00 	.word	0xe000ed00

08005770 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	4603      	mov	r3, r0
 8005778:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800577a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800577e:	2b00      	cmp	r3, #0
 8005780:	db0b      	blt.n	800579a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005782:	88fb      	ldrh	r3, [r7, #6]
 8005784:	f003 021f 	and.w	r2, r3, #31
 8005788:	4907      	ldr	r1, [pc, #28]	; (80057a8 <__NVIC_EnableIRQ+0x38>)
 800578a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800578e:	095b      	lsrs	r3, r3, #5
 8005790:	2001      	movs	r0, #1
 8005792:	fa00 f202 	lsl.w	r2, r0, r2
 8005796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800579a:	bf00      	nop
 800579c:	370c      	adds	r7, #12
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	e000e100 	.word	0xe000e100

080057ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	4603      	mov	r3, r0
 80057b4:	6039      	str	r1, [r7, #0]
 80057b6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80057b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	db0a      	blt.n	80057d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	b2da      	uxtb	r2, r3
 80057c4:	490c      	ldr	r1, [pc, #48]	; (80057f8 <__NVIC_SetPriority+0x4c>)
 80057c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057ca:	0112      	lsls	r2, r2, #4
 80057cc:	b2d2      	uxtb	r2, r2
 80057ce:	440b      	add	r3, r1
 80057d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80057d4:	e00a      	b.n	80057ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	b2da      	uxtb	r2, r3
 80057da:	4908      	ldr	r1, [pc, #32]	; (80057fc <__NVIC_SetPriority+0x50>)
 80057dc:	88fb      	ldrh	r3, [r7, #6]
 80057de:	f003 030f 	and.w	r3, r3, #15
 80057e2:	3b04      	subs	r3, #4
 80057e4:	0112      	lsls	r2, r2, #4
 80057e6:	b2d2      	uxtb	r2, r2
 80057e8:	440b      	add	r3, r1
 80057ea:	761a      	strb	r2, [r3, #24]
}
 80057ec:	bf00      	nop
 80057ee:	370c      	adds	r7, #12
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr
 80057f8:	e000e100 	.word	0xe000e100
 80057fc:	e000ed00 	.word	0xe000ed00

08005800 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005800:	b480      	push	{r7}
 8005802:	b089      	sub	sp, #36	; 0x24
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f003 0307 	and.w	r3, r3, #7
 8005812:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	f1c3 0307 	rsb	r3, r3, #7
 800581a:	2b04      	cmp	r3, #4
 800581c:	bf28      	it	cs
 800581e:	2304      	movcs	r3, #4
 8005820:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	3304      	adds	r3, #4
 8005826:	2b06      	cmp	r3, #6
 8005828:	d902      	bls.n	8005830 <NVIC_EncodePriority+0x30>
 800582a:	69fb      	ldr	r3, [r7, #28]
 800582c:	3b03      	subs	r3, #3
 800582e:	e000      	b.n	8005832 <NVIC_EncodePriority+0x32>
 8005830:	2300      	movs	r3, #0
 8005832:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005834:	f04f 32ff 	mov.w	r2, #4294967295
 8005838:	69bb      	ldr	r3, [r7, #24]
 800583a:	fa02 f303 	lsl.w	r3, r2, r3
 800583e:	43da      	mvns	r2, r3
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	401a      	ands	r2, r3
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005848:	f04f 31ff 	mov.w	r1, #4294967295
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	fa01 f303 	lsl.w	r3, r1, r3
 8005852:	43d9      	mvns	r1, r3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005858:	4313      	orrs	r3, r2
         );
}
 800585a:	4618      	mov	r0, r3
 800585c:	3724      	adds	r7, #36	; 0x24
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
	...

08005868 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	3b01      	subs	r3, #1
 8005874:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005878:	d301      	bcc.n	800587e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800587a:	2301      	movs	r3, #1
 800587c:	e00f      	b.n	800589e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800587e:	4a0a      	ldr	r2, [pc, #40]	; (80058a8 <SysTick_Config+0x40>)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	3b01      	subs	r3, #1
 8005884:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005886:	210f      	movs	r1, #15
 8005888:	f04f 30ff 	mov.w	r0, #4294967295
 800588c:	f7ff ff8e 	bl	80057ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005890:	4b05      	ldr	r3, [pc, #20]	; (80058a8 <SysTick_Config+0x40>)
 8005892:	2200      	movs	r2, #0
 8005894:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005896:	4b04      	ldr	r3, [pc, #16]	; (80058a8 <SysTick_Config+0x40>)
 8005898:	2207      	movs	r2, #7
 800589a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3708      	adds	r7, #8
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	e000e010 	.word	0xe000e010

080058ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b082      	sub	sp, #8
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f7ff ff29 	bl	800570c <__NVIC_SetPriorityGrouping>
}
 80058ba:	bf00      	nop
 80058bc:	3708      	adds	r7, #8
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}

080058c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80058c2:	b580      	push	{r7, lr}
 80058c4:	b086      	sub	sp, #24
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	4603      	mov	r3, r0
 80058ca:	60b9      	str	r1, [r7, #8]
 80058cc:	607a      	str	r2, [r7, #4]
 80058ce:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80058d0:	f7ff ff40 	bl	8005754 <__NVIC_GetPriorityGrouping>
 80058d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	68b9      	ldr	r1, [r7, #8]
 80058da:	6978      	ldr	r0, [r7, #20]
 80058dc:	f7ff ff90 	bl	8005800 <NVIC_EncodePriority>
 80058e0:	4602      	mov	r2, r0
 80058e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80058e6:	4611      	mov	r1, r2
 80058e8:	4618      	mov	r0, r3
 80058ea:	f7ff ff5f 	bl	80057ac <__NVIC_SetPriority>
}
 80058ee:	bf00      	nop
 80058f0:	3718      	adds	r7, #24
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}

080058f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80058f6:	b580      	push	{r7, lr}
 80058f8:	b082      	sub	sp, #8
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	4603      	mov	r3, r0
 80058fe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005900:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005904:	4618      	mov	r0, r3
 8005906:	f7ff ff33 	bl	8005770 <__NVIC_EnableIRQ>
}
 800590a:	bf00      	nop
 800590c:	3708      	adds	r7, #8
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}

08005912 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005912:	b580      	push	{r7, lr}
 8005914:	b082      	sub	sp, #8
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f7ff ffa4 	bl	8005868 <SysTick_Config>
 8005920:	4603      	mov	r3, r0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3708      	adds	r7, #8
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
	...

0800592c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b086      	sub	sp, #24
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005934:	f7fe fbbc 	bl	80040b0 <HAL_GetTick>
 8005938:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d101      	bne.n	8005944 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	e316      	b.n	8005f72 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a66      	ldr	r2, [pc, #408]	; (8005ae4 <HAL_DMA_Init+0x1b8>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d04a      	beq.n	80059e4 <HAL_DMA_Init+0xb8>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a65      	ldr	r2, [pc, #404]	; (8005ae8 <HAL_DMA_Init+0x1bc>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d045      	beq.n	80059e4 <HAL_DMA_Init+0xb8>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a63      	ldr	r2, [pc, #396]	; (8005aec <HAL_DMA_Init+0x1c0>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d040      	beq.n	80059e4 <HAL_DMA_Init+0xb8>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a62      	ldr	r2, [pc, #392]	; (8005af0 <HAL_DMA_Init+0x1c4>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d03b      	beq.n	80059e4 <HAL_DMA_Init+0xb8>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a60      	ldr	r2, [pc, #384]	; (8005af4 <HAL_DMA_Init+0x1c8>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d036      	beq.n	80059e4 <HAL_DMA_Init+0xb8>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a5f      	ldr	r2, [pc, #380]	; (8005af8 <HAL_DMA_Init+0x1cc>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d031      	beq.n	80059e4 <HAL_DMA_Init+0xb8>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a5d      	ldr	r2, [pc, #372]	; (8005afc <HAL_DMA_Init+0x1d0>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d02c      	beq.n	80059e4 <HAL_DMA_Init+0xb8>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a5c      	ldr	r2, [pc, #368]	; (8005b00 <HAL_DMA_Init+0x1d4>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d027      	beq.n	80059e4 <HAL_DMA_Init+0xb8>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a5a      	ldr	r2, [pc, #360]	; (8005b04 <HAL_DMA_Init+0x1d8>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d022      	beq.n	80059e4 <HAL_DMA_Init+0xb8>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a59      	ldr	r2, [pc, #356]	; (8005b08 <HAL_DMA_Init+0x1dc>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d01d      	beq.n	80059e4 <HAL_DMA_Init+0xb8>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a57      	ldr	r2, [pc, #348]	; (8005b0c <HAL_DMA_Init+0x1e0>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d018      	beq.n	80059e4 <HAL_DMA_Init+0xb8>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a56      	ldr	r2, [pc, #344]	; (8005b10 <HAL_DMA_Init+0x1e4>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d013      	beq.n	80059e4 <HAL_DMA_Init+0xb8>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a54      	ldr	r2, [pc, #336]	; (8005b14 <HAL_DMA_Init+0x1e8>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d00e      	beq.n	80059e4 <HAL_DMA_Init+0xb8>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a53      	ldr	r2, [pc, #332]	; (8005b18 <HAL_DMA_Init+0x1ec>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d009      	beq.n	80059e4 <HAL_DMA_Init+0xb8>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a51      	ldr	r2, [pc, #324]	; (8005b1c <HAL_DMA_Init+0x1f0>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d004      	beq.n	80059e4 <HAL_DMA_Init+0xb8>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a50      	ldr	r2, [pc, #320]	; (8005b20 <HAL_DMA_Init+0x1f4>)
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d101      	bne.n	80059e8 <HAL_DMA_Init+0xbc>
 80059e4:	2301      	movs	r3, #1
 80059e6:	e000      	b.n	80059ea <HAL_DMA_Init+0xbe>
 80059e8:	2300      	movs	r3, #0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	f000 813b 	beq.w	8005c66 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2202      	movs	r2, #2
 80059f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a37      	ldr	r2, [pc, #220]	; (8005ae4 <HAL_DMA_Init+0x1b8>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d04a      	beq.n	8005aa0 <HAL_DMA_Init+0x174>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a36      	ldr	r2, [pc, #216]	; (8005ae8 <HAL_DMA_Init+0x1bc>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d045      	beq.n	8005aa0 <HAL_DMA_Init+0x174>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a34      	ldr	r2, [pc, #208]	; (8005aec <HAL_DMA_Init+0x1c0>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d040      	beq.n	8005aa0 <HAL_DMA_Init+0x174>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a33      	ldr	r2, [pc, #204]	; (8005af0 <HAL_DMA_Init+0x1c4>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d03b      	beq.n	8005aa0 <HAL_DMA_Init+0x174>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a31      	ldr	r2, [pc, #196]	; (8005af4 <HAL_DMA_Init+0x1c8>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d036      	beq.n	8005aa0 <HAL_DMA_Init+0x174>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a30      	ldr	r2, [pc, #192]	; (8005af8 <HAL_DMA_Init+0x1cc>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d031      	beq.n	8005aa0 <HAL_DMA_Init+0x174>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a2e      	ldr	r2, [pc, #184]	; (8005afc <HAL_DMA_Init+0x1d0>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d02c      	beq.n	8005aa0 <HAL_DMA_Init+0x174>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a2d      	ldr	r2, [pc, #180]	; (8005b00 <HAL_DMA_Init+0x1d4>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d027      	beq.n	8005aa0 <HAL_DMA_Init+0x174>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a2b      	ldr	r2, [pc, #172]	; (8005b04 <HAL_DMA_Init+0x1d8>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d022      	beq.n	8005aa0 <HAL_DMA_Init+0x174>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a2a      	ldr	r2, [pc, #168]	; (8005b08 <HAL_DMA_Init+0x1dc>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d01d      	beq.n	8005aa0 <HAL_DMA_Init+0x174>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a28      	ldr	r2, [pc, #160]	; (8005b0c <HAL_DMA_Init+0x1e0>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d018      	beq.n	8005aa0 <HAL_DMA_Init+0x174>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a27      	ldr	r2, [pc, #156]	; (8005b10 <HAL_DMA_Init+0x1e4>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d013      	beq.n	8005aa0 <HAL_DMA_Init+0x174>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a25      	ldr	r2, [pc, #148]	; (8005b14 <HAL_DMA_Init+0x1e8>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d00e      	beq.n	8005aa0 <HAL_DMA_Init+0x174>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a24      	ldr	r2, [pc, #144]	; (8005b18 <HAL_DMA_Init+0x1ec>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d009      	beq.n	8005aa0 <HAL_DMA_Init+0x174>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a22      	ldr	r2, [pc, #136]	; (8005b1c <HAL_DMA_Init+0x1f0>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d004      	beq.n	8005aa0 <HAL_DMA_Init+0x174>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a21      	ldr	r2, [pc, #132]	; (8005b20 <HAL_DMA_Init+0x1f4>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d108      	bne.n	8005ab2 <HAL_DMA_Init+0x186>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	681a      	ldr	r2, [r3, #0]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f022 0201 	bic.w	r2, r2, #1
 8005aae:	601a      	str	r2, [r3, #0]
 8005ab0:	e007      	b.n	8005ac2 <HAL_DMA_Init+0x196>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f022 0201 	bic.w	r2, r2, #1
 8005ac0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005ac2:	e02f      	b.n	8005b24 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005ac4:	f7fe faf4 	bl	80040b0 <HAL_GetTick>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	2b05      	cmp	r3, #5
 8005ad0:	d928      	bls.n	8005b24 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2220      	movs	r2, #32
 8005ad6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2203      	movs	r2, #3
 8005adc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e246      	b.n	8005f72 <HAL_DMA_Init+0x646>
 8005ae4:	40020010 	.word	0x40020010
 8005ae8:	40020028 	.word	0x40020028
 8005aec:	40020040 	.word	0x40020040
 8005af0:	40020058 	.word	0x40020058
 8005af4:	40020070 	.word	0x40020070
 8005af8:	40020088 	.word	0x40020088
 8005afc:	400200a0 	.word	0x400200a0
 8005b00:	400200b8 	.word	0x400200b8
 8005b04:	40020410 	.word	0x40020410
 8005b08:	40020428 	.word	0x40020428
 8005b0c:	40020440 	.word	0x40020440
 8005b10:	40020458 	.word	0x40020458
 8005b14:	40020470 	.word	0x40020470
 8005b18:	40020488 	.word	0x40020488
 8005b1c:	400204a0 	.word	0x400204a0
 8005b20:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0301 	and.w	r3, r3, #1
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d1c8      	bne.n	8005ac4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	4b83      	ldr	r3, [pc, #524]	; (8005d4c <HAL_DMA_Init+0x420>)
 8005b3e:	4013      	ands	r3, r2
 8005b40:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005b4a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	691b      	ldr	r3, [r3, #16]
 8005b50:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b56:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	699b      	ldr	r3, [r3, #24]
 8005b5c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b62:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6a1b      	ldr	r3, [r3, #32]
 8005b68:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b74:	2b04      	cmp	r3, #4
 8005b76:	d107      	bne.n	8005b88 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b80:	4313      	orrs	r3, r2
 8005b82:	697a      	ldr	r2, [r7, #20]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005b88:	4b71      	ldr	r3, [pc, #452]	; (8005d50 <HAL_DMA_Init+0x424>)
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	4b71      	ldr	r3, [pc, #452]	; (8005d54 <HAL_DMA_Init+0x428>)
 8005b8e:	4013      	ands	r3, r2
 8005b90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b94:	d328      	bcc.n	8005be8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	2b28      	cmp	r3, #40	; 0x28
 8005b9c:	d903      	bls.n	8005ba6 <HAL_DMA_Init+0x27a>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	2b2e      	cmp	r3, #46	; 0x2e
 8005ba4:	d917      	bls.n	8005bd6 <HAL_DMA_Init+0x2aa>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	2b3e      	cmp	r3, #62	; 0x3e
 8005bac:	d903      	bls.n	8005bb6 <HAL_DMA_Init+0x28a>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	2b42      	cmp	r3, #66	; 0x42
 8005bb4:	d90f      	bls.n	8005bd6 <HAL_DMA_Init+0x2aa>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	2b46      	cmp	r3, #70	; 0x46
 8005bbc:	d903      	bls.n	8005bc6 <HAL_DMA_Init+0x29a>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	2b48      	cmp	r3, #72	; 0x48
 8005bc4:	d907      	bls.n	8005bd6 <HAL_DMA_Init+0x2aa>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	2b4e      	cmp	r3, #78	; 0x4e
 8005bcc:	d905      	bls.n	8005bda <HAL_DMA_Init+0x2ae>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	2b52      	cmp	r3, #82	; 0x52
 8005bd4:	d801      	bhi.n	8005bda <HAL_DMA_Init+0x2ae>
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e000      	b.n	8005bdc <HAL_DMA_Init+0x2b0>
 8005bda:	2300      	movs	r3, #0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d003      	beq.n	8005be8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005be6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	697a      	ldr	r2, [r7, #20]
 8005bee:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	695b      	ldr	r3, [r3, #20]
 8005bf6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	f023 0307 	bic.w	r3, r3, #7
 8005bfe:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c04:	697a      	ldr	r2, [r7, #20]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0e:	2b04      	cmp	r3, #4
 8005c10:	d117      	bne.n	8005c42 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c16:	697a      	ldr	r2, [r7, #20]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00e      	beq.n	8005c42 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f001 fdcf 	bl	80077c8 <DMA_CheckFifoParam>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d008      	beq.n	8005c42 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2240      	movs	r2, #64	; 0x40
 8005c34:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e197      	b.n	8005f72 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	697a      	ldr	r2, [r7, #20]
 8005c48:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f001 fd0a 	bl	8007664 <DMA_CalcBaseAndBitshift>
 8005c50:	4603      	mov	r3, r0
 8005c52:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c58:	f003 031f 	and.w	r3, r3, #31
 8005c5c:	223f      	movs	r2, #63	; 0x3f
 8005c5e:	409a      	lsls	r2, r3
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	609a      	str	r2, [r3, #8]
 8005c64:	e0cd      	b.n	8005e02 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a3b      	ldr	r2, [pc, #236]	; (8005d58 <HAL_DMA_Init+0x42c>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d022      	beq.n	8005cb6 <HAL_DMA_Init+0x38a>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a39      	ldr	r2, [pc, #228]	; (8005d5c <HAL_DMA_Init+0x430>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d01d      	beq.n	8005cb6 <HAL_DMA_Init+0x38a>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a38      	ldr	r2, [pc, #224]	; (8005d60 <HAL_DMA_Init+0x434>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d018      	beq.n	8005cb6 <HAL_DMA_Init+0x38a>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a36      	ldr	r2, [pc, #216]	; (8005d64 <HAL_DMA_Init+0x438>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d013      	beq.n	8005cb6 <HAL_DMA_Init+0x38a>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a35      	ldr	r2, [pc, #212]	; (8005d68 <HAL_DMA_Init+0x43c>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d00e      	beq.n	8005cb6 <HAL_DMA_Init+0x38a>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a33      	ldr	r2, [pc, #204]	; (8005d6c <HAL_DMA_Init+0x440>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d009      	beq.n	8005cb6 <HAL_DMA_Init+0x38a>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a32      	ldr	r2, [pc, #200]	; (8005d70 <HAL_DMA_Init+0x444>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d004      	beq.n	8005cb6 <HAL_DMA_Init+0x38a>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a30      	ldr	r2, [pc, #192]	; (8005d74 <HAL_DMA_Init+0x448>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d101      	bne.n	8005cba <HAL_DMA_Init+0x38e>
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e000      	b.n	8005cbc <HAL_DMA_Init+0x390>
 8005cba:	2300      	movs	r3, #0
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	f000 8097 	beq.w	8005df0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a24      	ldr	r2, [pc, #144]	; (8005d58 <HAL_DMA_Init+0x42c>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d021      	beq.n	8005d10 <HAL_DMA_Init+0x3e4>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a22      	ldr	r2, [pc, #136]	; (8005d5c <HAL_DMA_Init+0x430>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d01c      	beq.n	8005d10 <HAL_DMA_Init+0x3e4>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a21      	ldr	r2, [pc, #132]	; (8005d60 <HAL_DMA_Init+0x434>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d017      	beq.n	8005d10 <HAL_DMA_Init+0x3e4>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a1f      	ldr	r2, [pc, #124]	; (8005d64 <HAL_DMA_Init+0x438>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d012      	beq.n	8005d10 <HAL_DMA_Init+0x3e4>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a1e      	ldr	r2, [pc, #120]	; (8005d68 <HAL_DMA_Init+0x43c>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d00d      	beq.n	8005d10 <HAL_DMA_Init+0x3e4>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a1c      	ldr	r2, [pc, #112]	; (8005d6c <HAL_DMA_Init+0x440>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d008      	beq.n	8005d10 <HAL_DMA_Init+0x3e4>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a1b      	ldr	r2, [pc, #108]	; (8005d70 <HAL_DMA_Init+0x444>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d003      	beq.n	8005d10 <HAL_DMA_Init+0x3e4>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a19      	ldr	r2, [pc, #100]	; (8005d74 <HAL_DMA_Init+0x448>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2202      	movs	r2, #2
 8005d16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005d2a:	697a      	ldr	r2, [r7, #20]
 8005d2c:	4b12      	ldr	r3, [pc, #72]	; (8005d78 <HAL_DMA_Init+0x44c>)
 8005d2e:	4013      	ands	r3, r2
 8005d30:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	2b40      	cmp	r3, #64	; 0x40
 8005d38:	d020      	beq.n	8005d7c <HAL_DMA_Init+0x450>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	2b80      	cmp	r3, #128	; 0x80
 8005d40:	d102      	bne.n	8005d48 <HAL_DMA_Init+0x41c>
 8005d42:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005d46:	e01a      	b.n	8005d7e <HAL_DMA_Init+0x452>
 8005d48:	2300      	movs	r3, #0
 8005d4a:	e018      	b.n	8005d7e <HAL_DMA_Init+0x452>
 8005d4c:	fe10803f 	.word	0xfe10803f
 8005d50:	5c001000 	.word	0x5c001000
 8005d54:	ffff0000 	.word	0xffff0000
 8005d58:	58025408 	.word	0x58025408
 8005d5c:	5802541c 	.word	0x5802541c
 8005d60:	58025430 	.word	0x58025430
 8005d64:	58025444 	.word	0x58025444
 8005d68:	58025458 	.word	0x58025458
 8005d6c:	5802546c 	.word	0x5802546c
 8005d70:	58025480 	.word	0x58025480
 8005d74:	58025494 	.word	0x58025494
 8005d78:	fffe000f 	.word	0xfffe000f
 8005d7c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	68d2      	ldr	r2, [r2, #12]
 8005d82:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005d84:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005d8c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	695b      	ldr	r3, [r3, #20]
 8005d92:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005d94:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	699b      	ldr	r3, [r3, #24]
 8005d9a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005d9c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	69db      	ldr	r3, [r3, #28]
 8005da2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005da4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a1b      	ldr	r3, [r3, #32]
 8005daa:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005dac:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005dae:	697a      	ldr	r2, [r7, #20]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	697a      	ldr	r2, [r7, #20]
 8005dba:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	4b6e      	ldr	r3, [pc, #440]	; (8005f7c <HAL_DMA_Init+0x650>)
 8005dc4:	4413      	add	r3, r2
 8005dc6:	4a6e      	ldr	r2, [pc, #440]	; (8005f80 <HAL_DMA_Init+0x654>)
 8005dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8005dcc:	091b      	lsrs	r3, r3, #4
 8005dce:	009a      	lsls	r2, r3, #2
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f001 fc45 	bl	8007664 <DMA_CalcBaseAndBitshift>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005de2:	f003 031f 	and.w	r3, r3, #31
 8005de6:	2201      	movs	r2, #1
 8005de8:	409a      	lsls	r2, r3
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	605a      	str	r2, [r3, #4]
 8005dee:	e008      	b.n	8005e02 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2240      	movs	r2, #64	; 0x40
 8005df4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2203      	movs	r2, #3
 8005dfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e0b7      	b.n	8005f72 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a5f      	ldr	r2, [pc, #380]	; (8005f84 <HAL_DMA_Init+0x658>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d072      	beq.n	8005ef2 <HAL_DMA_Init+0x5c6>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a5d      	ldr	r2, [pc, #372]	; (8005f88 <HAL_DMA_Init+0x65c>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d06d      	beq.n	8005ef2 <HAL_DMA_Init+0x5c6>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a5c      	ldr	r2, [pc, #368]	; (8005f8c <HAL_DMA_Init+0x660>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d068      	beq.n	8005ef2 <HAL_DMA_Init+0x5c6>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a5a      	ldr	r2, [pc, #360]	; (8005f90 <HAL_DMA_Init+0x664>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d063      	beq.n	8005ef2 <HAL_DMA_Init+0x5c6>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a59      	ldr	r2, [pc, #356]	; (8005f94 <HAL_DMA_Init+0x668>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d05e      	beq.n	8005ef2 <HAL_DMA_Init+0x5c6>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a57      	ldr	r2, [pc, #348]	; (8005f98 <HAL_DMA_Init+0x66c>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d059      	beq.n	8005ef2 <HAL_DMA_Init+0x5c6>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a56      	ldr	r2, [pc, #344]	; (8005f9c <HAL_DMA_Init+0x670>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d054      	beq.n	8005ef2 <HAL_DMA_Init+0x5c6>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a54      	ldr	r2, [pc, #336]	; (8005fa0 <HAL_DMA_Init+0x674>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d04f      	beq.n	8005ef2 <HAL_DMA_Init+0x5c6>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a53      	ldr	r2, [pc, #332]	; (8005fa4 <HAL_DMA_Init+0x678>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d04a      	beq.n	8005ef2 <HAL_DMA_Init+0x5c6>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a51      	ldr	r2, [pc, #324]	; (8005fa8 <HAL_DMA_Init+0x67c>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d045      	beq.n	8005ef2 <HAL_DMA_Init+0x5c6>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a50      	ldr	r2, [pc, #320]	; (8005fac <HAL_DMA_Init+0x680>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d040      	beq.n	8005ef2 <HAL_DMA_Init+0x5c6>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a4e      	ldr	r2, [pc, #312]	; (8005fb0 <HAL_DMA_Init+0x684>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d03b      	beq.n	8005ef2 <HAL_DMA_Init+0x5c6>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a4d      	ldr	r2, [pc, #308]	; (8005fb4 <HAL_DMA_Init+0x688>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d036      	beq.n	8005ef2 <HAL_DMA_Init+0x5c6>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a4b      	ldr	r2, [pc, #300]	; (8005fb8 <HAL_DMA_Init+0x68c>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d031      	beq.n	8005ef2 <HAL_DMA_Init+0x5c6>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a4a      	ldr	r2, [pc, #296]	; (8005fbc <HAL_DMA_Init+0x690>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d02c      	beq.n	8005ef2 <HAL_DMA_Init+0x5c6>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a48      	ldr	r2, [pc, #288]	; (8005fc0 <HAL_DMA_Init+0x694>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d027      	beq.n	8005ef2 <HAL_DMA_Init+0x5c6>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a47      	ldr	r2, [pc, #284]	; (8005fc4 <HAL_DMA_Init+0x698>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d022      	beq.n	8005ef2 <HAL_DMA_Init+0x5c6>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a45      	ldr	r2, [pc, #276]	; (8005fc8 <HAL_DMA_Init+0x69c>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d01d      	beq.n	8005ef2 <HAL_DMA_Init+0x5c6>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a44      	ldr	r2, [pc, #272]	; (8005fcc <HAL_DMA_Init+0x6a0>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d018      	beq.n	8005ef2 <HAL_DMA_Init+0x5c6>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a42      	ldr	r2, [pc, #264]	; (8005fd0 <HAL_DMA_Init+0x6a4>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d013      	beq.n	8005ef2 <HAL_DMA_Init+0x5c6>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a41      	ldr	r2, [pc, #260]	; (8005fd4 <HAL_DMA_Init+0x6a8>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d00e      	beq.n	8005ef2 <HAL_DMA_Init+0x5c6>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a3f      	ldr	r2, [pc, #252]	; (8005fd8 <HAL_DMA_Init+0x6ac>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d009      	beq.n	8005ef2 <HAL_DMA_Init+0x5c6>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a3e      	ldr	r2, [pc, #248]	; (8005fdc <HAL_DMA_Init+0x6b0>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d004      	beq.n	8005ef2 <HAL_DMA_Init+0x5c6>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a3c      	ldr	r2, [pc, #240]	; (8005fe0 <HAL_DMA_Init+0x6b4>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d101      	bne.n	8005ef6 <HAL_DMA_Init+0x5ca>
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e000      	b.n	8005ef8 <HAL_DMA_Init+0x5cc>
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d032      	beq.n	8005f62 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f001 fcdf 	bl	80078c0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	2b80      	cmp	r3, #128	; 0x80
 8005f08:	d102      	bne.n	8005f10 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685a      	ldr	r2, [r3, #4]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f18:	b2d2      	uxtb	r2, r2
 8005f1a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005f24:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d010      	beq.n	8005f50 <HAL_DMA_Init+0x624>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	2b08      	cmp	r3, #8
 8005f34:	d80c      	bhi.n	8005f50 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f001 fd5c 	bl	80079f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f40:	2200      	movs	r2, #0
 8005f42:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005f4c:	605a      	str	r2, [r3, #4]
 8005f4e:	e008      	b.n	8005f62 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3718      	adds	r7, #24
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	a7fdabf8 	.word	0xa7fdabf8
 8005f80:	cccccccd 	.word	0xcccccccd
 8005f84:	40020010 	.word	0x40020010
 8005f88:	40020028 	.word	0x40020028
 8005f8c:	40020040 	.word	0x40020040
 8005f90:	40020058 	.word	0x40020058
 8005f94:	40020070 	.word	0x40020070
 8005f98:	40020088 	.word	0x40020088
 8005f9c:	400200a0 	.word	0x400200a0
 8005fa0:	400200b8 	.word	0x400200b8
 8005fa4:	40020410 	.word	0x40020410
 8005fa8:	40020428 	.word	0x40020428
 8005fac:	40020440 	.word	0x40020440
 8005fb0:	40020458 	.word	0x40020458
 8005fb4:	40020470 	.word	0x40020470
 8005fb8:	40020488 	.word	0x40020488
 8005fbc:	400204a0 	.word	0x400204a0
 8005fc0:	400204b8 	.word	0x400204b8
 8005fc4:	58025408 	.word	0x58025408
 8005fc8:	5802541c 	.word	0x5802541c
 8005fcc:	58025430 	.word	0x58025430
 8005fd0:	58025444 	.word	0x58025444
 8005fd4:	58025458 	.word	0x58025458
 8005fd8:	5802546c 	.word	0x5802546c
 8005fdc:	58025480 	.word	0x58025480
 8005fe0:	58025494 	.word	0x58025494

08005fe4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b086      	sub	sp, #24
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	607a      	str	r2, [r7, #4]
 8005ff0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d101      	bne.n	8006000 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	e226      	b.n	800644e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006006:	2b01      	cmp	r3, #1
 8006008:	d101      	bne.n	800600e <HAL_DMA_Start_IT+0x2a>
 800600a:	2302      	movs	r3, #2
 800600c:	e21f      	b.n	800644e <HAL_DMA_Start_IT+0x46a>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2201      	movs	r2, #1
 8006012:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800601c:	b2db      	uxtb	r3, r3
 800601e:	2b01      	cmp	r3, #1
 8006020:	f040 820a 	bne.w	8006438 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2202      	movs	r2, #2
 8006028:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2200      	movs	r2, #0
 8006030:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a68      	ldr	r2, [pc, #416]	; (80061d8 <HAL_DMA_Start_IT+0x1f4>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d04a      	beq.n	80060d2 <HAL_DMA_Start_IT+0xee>
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a66      	ldr	r2, [pc, #408]	; (80061dc <HAL_DMA_Start_IT+0x1f8>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d045      	beq.n	80060d2 <HAL_DMA_Start_IT+0xee>
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a65      	ldr	r2, [pc, #404]	; (80061e0 <HAL_DMA_Start_IT+0x1fc>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d040      	beq.n	80060d2 <HAL_DMA_Start_IT+0xee>
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a63      	ldr	r2, [pc, #396]	; (80061e4 <HAL_DMA_Start_IT+0x200>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d03b      	beq.n	80060d2 <HAL_DMA_Start_IT+0xee>
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a62      	ldr	r2, [pc, #392]	; (80061e8 <HAL_DMA_Start_IT+0x204>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d036      	beq.n	80060d2 <HAL_DMA_Start_IT+0xee>
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4a60      	ldr	r2, [pc, #384]	; (80061ec <HAL_DMA_Start_IT+0x208>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d031      	beq.n	80060d2 <HAL_DMA_Start_IT+0xee>
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a5f      	ldr	r2, [pc, #380]	; (80061f0 <HAL_DMA_Start_IT+0x20c>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d02c      	beq.n	80060d2 <HAL_DMA_Start_IT+0xee>
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a5d      	ldr	r2, [pc, #372]	; (80061f4 <HAL_DMA_Start_IT+0x210>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d027      	beq.n	80060d2 <HAL_DMA_Start_IT+0xee>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a5c      	ldr	r2, [pc, #368]	; (80061f8 <HAL_DMA_Start_IT+0x214>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d022      	beq.n	80060d2 <HAL_DMA_Start_IT+0xee>
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a5a      	ldr	r2, [pc, #360]	; (80061fc <HAL_DMA_Start_IT+0x218>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d01d      	beq.n	80060d2 <HAL_DMA_Start_IT+0xee>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a59      	ldr	r2, [pc, #356]	; (8006200 <HAL_DMA_Start_IT+0x21c>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d018      	beq.n	80060d2 <HAL_DMA_Start_IT+0xee>
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a57      	ldr	r2, [pc, #348]	; (8006204 <HAL_DMA_Start_IT+0x220>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d013      	beq.n	80060d2 <HAL_DMA_Start_IT+0xee>
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a56      	ldr	r2, [pc, #344]	; (8006208 <HAL_DMA_Start_IT+0x224>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d00e      	beq.n	80060d2 <HAL_DMA_Start_IT+0xee>
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4a54      	ldr	r2, [pc, #336]	; (800620c <HAL_DMA_Start_IT+0x228>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d009      	beq.n	80060d2 <HAL_DMA_Start_IT+0xee>
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4a53      	ldr	r2, [pc, #332]	; (8006210 <HAL_DMA_Start_IT+0x22c>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d004      	beq.n	80060d2 <HAL_DMA_Start_IT+0xee>
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a51      	ldr	r2, [pc, #324]	; (8006214 <HAL_DMA_Start_IT+0x230>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d108      	bne.n	80060e4 <HAL_DMA_Start_IT+0x100>
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f022 0201 	bic.w	r2, r2, #1
 80060e0:	601a      	str	r2, [r3, #0]
 80060e2:	e007      	b.n	80060f4 <HAL_DMA_Start_IT+0x110>
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f022 0201 	bic.w	r2, r2, #1
 80060f2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	68b9      	ldr	r1, [r7, #8]
 80060fa:	68f8      	ldr	r0, [r7, #12]
 80060fc:	f001 f906 	bl	800730c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a34      	ldr	r2, [pc, #208]	; (80061d8 <HAL_DMA_Start_IT+0x1f4>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d04a      	beq.n	80061a0 <HAL_DMA_Start_IT+0x1bc>
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a33      	ldr	r2, [pc, #204]	; (80061dc <HAL_DMA_Start_IT+0x1f8>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d045      	beq.n	80061a0 <HAL_DMA_Start_IT+0x1bc>
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a31      	ldr	r2, [pc, #196]	; (80061e0 <HAL_DMA_Start_IT+0x1fc>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d040      	beq.n	80061a0 <HAL_DMA_Start_IT+0x1bc>
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a30      	ldr	r2, [pc, #192]	; (80061e4 <HAL_DMA_Start_IT+0x200>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d03b      	beq.n	80061a0 <HAL_DMA_Start_IT+0x1bc>
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a2e      	ldr	r2, [pc, #184]	; (80061e8 <HAL_DMA_Start_IT+0x204>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d036      	beq.n	80061a0 <HAL_DMA_Start_IT+0x1bc>
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a2d      	ldr	r2, [pc, #180]	; (80061ec <HAL_DMA_Start_IT+0x208>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d031      	beq.n	80061a0 <HAL_DMA_Start_IT+0x1bc>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a2b      	ldr	r2, [pc, #172]	; (80061f0 <HAL_DMA_Start_IT+0x20c>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d02c      	beq.n	80061a0 <HAL_DMA_Start_IT+0x1bc>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a2a      	ldr	r2, [pc, #168]	; (80061f4 <HAL_DMA_Start_IT+0x210>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d027      	beq.n	80061a0 <HAL_DMA_Start_IT+0x1bc>
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a28      	ldr	r2, [pc, #160]	; (80061f8 <HAL_DMA_Start_IT+0x214>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d022      	beq.n	80061a0 <HAL_DMA_Start_IT+0x1bc>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a27      	ldr	r2, [pc, #156]	; (80061fc <HAL_DMA_Start_IT+0x218>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d01d      	beq.n	80061a0 <HAL_DMA_Start_IT+0x1bc>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a25      	ldr	r2, [pc, #148]	; (8006200 <HAL_DMA_Start_IT+0x21c>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d018      	beq.n	80061a0 <HAL_DMA_Start_IT+0x1bc>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a24      	ldr	r2, [pc, #144]	; (8006204 <HAL_DMA_Start_IT+0x220>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d013      	beq.n	80061a0 <HAL_DMA_Start_IT+0x1bc>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a22      	ldr	r2, [pc, #136]	; (8006208 <HAL_DMA_Start_IT+0x224>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d00e      	beq.n	80061a0 <HAL_DMA_Start_IT+0x1bc>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a21      	ldr	r2, [pc, #132]	; (800620c <HAL_DMA_Start_IT+0x228>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d009      	beq.n	80061a0 <HAL_DMA_Start_IT+0x1bc>
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a1f      	ldr	r2, [pc, #124]	; (8006210 <HAL_DMA_Start_IT+0x22c>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d004      	beq.n	80061a0 <HAL_DMA_Start_IT+0x1bc>
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a1e      	ldr	r2, [pc, #120]	; (8006214 <HAL_DMA_Start_IT+0x230>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d101      	bne.n	80061a4 <HAL_DMA_Start_IT+0x1c0>
 80061a0:	2301      	movs	r3, #1
 80061a2:	e000      	b.n	80061a6 <HAL_DMA_Start_IT+0x1c2>
 80061a4:	2300      	movs	r3, #0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d036      	beq.n	8006218 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f023 021e 	bic.w	r2, r3, #30
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f042 0216 	orr.w	r2, r2, #22
 80061bc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d03e      	beq.n	8006244 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f042 0208 	orr.w	r2, r2, #8
 80061d4:	601a      	str	r2, [r3, #0]
 80061d6:	e035      	b.n	8006244 <HAL_DMA_Start_IT+0x260>
 80061d8:	40020010 	.word	0x40020010
 80061dc:	40020028 	.word	0x40020028
 80061e0:	40020040 	.word	0x40020040
 80061e4:	40020058 	.word	0x40020058
 80061e8:	40020070 	.word	0x40020070
 80061ec:	40020088 	.word	0x40020088
 80061f0:	400200a0 	.word	0x400200a0
 80061f4:	400200b8 	.word	0x400200b8
 80061f8:	40020410 	.word	0x40020410
 80061fc:	40020428 	.word	0x40020428
 8006200:	40020440 	.word	0x40020440
 8006204:	40020458 	.word	0x40020458
 8006208:	40020470 	.word	0x40020470
 800620c:	40020488 	.word	0x40020488
 8006210:	400204a0 	.word	0x400204a0
 8006214:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f023 020e 	bic.w	r2, r3, #14
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f042 020a 	orr.w	r2, r2, #10
 800622a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006230:	2b00      	cmp	r3, #0
 8006232:	d007      	beq.n	8006244 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	681a      	ldr	r2, [r3, #0]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f042 0204 	orr.w	r2, r2, #4
 8006242:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a83      	ldr	r2, [pc, #524]	; (8006458 <HAL_DMA_Start_IT+0x474>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d072      	beq.n	8006334 <HAL_DMA_Start_IT+0x350>
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a82      	ldr	r2, [pc, #520]	; (800645c <HAL_DMA_Start_IT+0x478>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d06d      	beq.n	8006334 <HAL_DMA_Start_IT+0x350>
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a80      	ldr	r2, [pc, #512]	; (8006460 <HAL_DMA_Start_IT+0x47c>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d068      	beq.n	8006334 <HAL_DMA_Start_IT+0x350>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a7f      	ldr	r2, [pc, #508]	; (8006464 <HAL_DMA_Start_IT+0x480>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d063      	beq.n	8006334 <HAL_DMA_Start_IT+0x350>
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a7d      	ldr	r2, [pc, #500]	; (8006468 <HAL_DMA_Start_IT+0x484>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d05e      	beq.n	8006334 <HAL_DMA_Start_IT+0x350>
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a7c      	ldr	r2, [pc, #496]	; (800646c <HAL_DMA_Start_IT+0x488>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d059      	beq.n	8006334 <HAL_DMA_Start_IT+0x350>
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a7a      	ldr	r2, [pc, #488]	; (8006470 <HAL_DMA_Start_IT+0x48c>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d054      	beq.n	8006334 <HAL_DMA_Start_IT+0x350>
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a79      	ldr	r2, [pc, #484]	; (8006474 <HAL_DMA_Start_IT+0x490>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d04f      	beq.n	8006334 <HAL_DMA_Start_IT+0x350>
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a77      	ldr	r2, [pc, #476]	; (8006478 <HAL_DMA_Start_IT+0x494>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d04a      	beq.n	8006334 <HAL_DMA_Start_IT+0x350>
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a76      	ldr	r2, [pc, #472]	; (800647c <HAL_DMA_Start_IT+0x498>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d045      	beq.n	8006334 <HAL_DMA_Start_IT+0x350>
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a74      	ldr	r2, [pc, #464]	; (8006480 <HAL_DMA_Start_IT+0x49c>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d040      	beq.n	8006334 <HAL_DMA_Start_IT+0x350>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4a73      	ldr	r2, [pc, #460]	; (8006484 <HAL_DMA_Start_IT+0x4a0>)
 80062b8:	4293      	cmp	r3, r2
 80062ba:	d03b      	beq.n	8006334 <HAL_DMA_Start_IT+0x350>
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4a71      	ldr	r2, [pc, #452]	; (8006488 <HAL_DMA_Start_IT+0x4a4>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d036      	beq.n	8006334 <HAL_DMA_Start_IT+0x350>
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a70      	ldr	r2, [pc, #448]	; (800648c <HAL_DMA_Start_IT+0x4a8>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d031      	beq.n	8006334 <HAL_DMA_Start_IT+0x350>
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a6e      	ldr	r2, [pc, #440]	; (8006490 <HAL_DMA_Start_IT+0x4ac>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d02c      	beq.n	8006334 <HAL_DMA_Start_IT+0x350>
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4a6d      	ldr	r2, [pc, #436]	; (8006494 <HAL_DMA_Start_IT+0x4b0>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d027      	beq.n	8006334 <HAL_DMA_Start_IT+0x350>
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a6b      	ldr	r2, [pc, #428]	; (8006498 <HAL_DMA_Start_IT+0x4b4>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d022      	beq.n	8006334 <HAL_DMA_Start_IT+0x350>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a6a      	ldr	r2, [pc, #424]	; (800649c <HAL_DMA_Start_IT+0x4b8>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d01d      	beq.n	8006334 <HAL_DMA_Start_IT+0x350>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a68      	ldr	r2, [pc, #416]	; (80064a0 <HAL_DMA_Start_IT+0x4bc>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d018      	beq.n	8006334 <HAL_DMA_Start_IT+0x350>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a67      	ldr	r2, [pc, #412]	; (80064a4 <HAL_DMA_Start_IT+0x4c0>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d013      	beq.n	8006334 <HAL_DMA_Start_IT+0x350>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a65      	ldr	r2, [pc, #404]	; (80064a8 <HAL_DMA_Start_IT+0x4c4>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d00e      	beq.n	8006334 <HAL_DMA_Start_IT+0x350>
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a64      	ldr	r2, [pc, #400]	; (80064ac <HAL_DMA_Start_IT+0x4c8>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d009      	beq.n	8006334 <HAL_DMA_Start_IT+0x350>
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a62      	ldr	r2, [pc, #392]	; (80064b0 <HAL_DMA_Start_IT+0x4cc>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d004      	beq.n	8006334 <HAL_DMA_Start_IT+0x350>
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a61      	ldr	r2, [pc, #388]	; (80064b4 <HAL_DMA_Start_IT+0x4d0>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d101      	bne.n	8006338 <HAL_DMA_Start_IT+0x354>
 8006334:	2301      	movs	r3, #1
 8006336:	e000      	b.n	800633a <HAL_DMA_Start_IT+0x356>
 8006338:	2300      	movs	r3, #0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d01a      	beq.n	8006374 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006348:	2b00      	cmp	r3, #0
 800634a:	d007      	beq.n	800635c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006356:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800635a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006360:	2b00      	cmp	r3, #0
 8006362:	d007      	beq.n	8006374 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800636e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006372:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a37      	ldr	r2, [pc, #220]	; (8006458 <HAL_DMA_Start_IT+0x474>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d04a      	beq.n	8006414 <HAL_DMA_Start_IT+0x430>
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a36      	ldr	r2, [pc, #216]	; (800645c <HAL_DMA_Start_IT+0x478>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d045      	beq.n	8006414 <HAL_DMA_Start_IT+0x430>
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a34      	ldr	r2, [pc, #208]	; (8006460 <HAL_DMA_Start_IT+0x47c>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d040      	beq.n	8006414 <HAL_DMA_Start_IT+0x430>
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a33      	ldr	r2, [pc, #204]	; (8006464 <HAL_DMA_Start_IT+0x480>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d03b      	beq.n	8006414 <HAL_DMA_Start_IT+0x430>
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a31      	ldr	r2, [pc, #196]	; (8006468 <HAL_DMA_Start_IT+0x484>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d036      	beq.n	8006414 <HAL_DMA_Start_IT+0x430>
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a30      	ldr	r2, [pc, #192]	; (800646c <HAL_DMA_Start_IT+0x488>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d031      	beq.n	8006414 <HAL_DMA_Start_IT+0x430>
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a2e      	ldr	r2, [pc, #184]	; (8006470 <HAL_DMA_Start_IT+0x48c>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d02c      	beq.n	8006414 <HAL_DMA_Start_IT+0x430>
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a2d      	ldr	r2, [pc, #180]	; (8006474 <HAL_DMA_Start_IT+0x490>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d027      	beq.n	8006414 <HAL_DMA_Start_IT+0x430>
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a2b      	ldr	r2, [pc, #172]	; (8006478 <HAL_DMA_Start_IT+0x494>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d022      	beq.n	8006414 <HAL_DMA_Start_IT+0x430>
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a2a      	ldr	r2, [pc, #168]	; (800647c <HAL_DMA_Start_IT+0x498>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d01d      	beq.n	8006414 <HAL_DMA_Start_IT+0x430>
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a28      	ldr	r2, [pc, #160]	; (8006480 <HAL_DMA_Start_IT+0x49c>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d018      	beq.n	8006414 <HAL_DMA_Start_IT+0x430>
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a27      	ldr	r2, [pc, #156]	; (8006484 <HAL_DMA_Start_IT+0x4a0>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d013      	beq.n	8006414 <HAL_DMA_Start_IT+0x430>
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a25      	ldr	r2, [pc, #148]	; (8006488 <HAL_DMA_Start_IT+0x4a4>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d00e      	beq.n	8006414 <HAL_DMA_Start_IT+0x430>
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a24      	ldr	r2, [pc, #144]	; (800648c <HAL_DMA_Start_IT+0x4a8>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d009      	beq.n	8006414 <HAL_DMA_Start_IT+0x430>
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a22      	ldr	r2, [pc, #136]	; (8006490 <HAL_DMA_Start_IT+0x4ac>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d004      	beq.n	8006414 <HAL_DMA_Start_IT+0x430>
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a21      	ldr	r2, [pc, #132]	; (8006494 <HAL_DMA_Start_IT+0x4b0>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d108      	bne.n	8006426 <HAL_DMA_Start_IT+0x442>
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f042 0201 	orr.w	r2, r2, #1
 8006422:	601a      	str	r2, [r3, #0]
 8006424:	e012      	b.n	800644c <HAL_DMA_Start_IT+0x468>
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f042 0201 	orr.w	r2, r2, #1
 8006434:	601a      	str	r2, [r3, #0]
 8006436:	e009      	b.n	800644c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800643e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2200      	movs	r2, #0
 8006444:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800644c:	7dfb      	ldrb	r3, [r7, #23]
}
 800644e:	4618      	mov	r0, r3
 8006450:	3718      	adds	r7, #24
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop
 8006458:	40020010 	.word	0x40020010
 800645c:	40020028 	.word	0x40020028
 8006460:	40020040 	.word	0x40020040
 8006464:	40020058 	.word	0x40020058
 8006468:	40020070 	.word	0x40020070
 800646c:	40020088 	.word	0x40020088
 8006470:	400200a0 	.word	0x400200a0
 8006474:	400200b8 	.word	0x400200b8
 8006478:	40020410 	.word	0x40020410
 800647c:	40020428 	.word	0x40020428
 8006480:	40020440 	.word	0x40020440
 8006484:	40020458 	.word	0x40020458
 8006488:	40020470 	.word	0x40020470
 800648c:	40020488 	.word	0x40020488
 8006490:	400204a0 	.word	0x400204a0
 8006494:	400204b8 	.word	0x400204b8
 8006498:	58025408 	.word	0x58025408
 800649c:	5802541c 	.word	0x5802541c
 80064a0:	58025430 	.word	0x58025430
 80064a4:	58025444 	.word	0x58025444
 80064a8:	58025458 	.word	0x58025458
 80064ac:	5802546c 	.word	0x5802546c
 80064b0:	58025480 	.word	0x58025480
 80064b4:	58025494 	.word	0x58025494

080064b8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b08a      	sub	sp, #40	; 0x28
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80064c0:	2300      	movs	r3, #0
 80064c2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80064c4:	4b67      	ldr	r3, [pc, #412]	; (8006664 <HAL_DMA_IRQHandler+0x1ac>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a67      	ldr	r2, [pc, #412]	; (8006668 <HAL_DMA_IRQHandler+0x1b0>)
 80064ca:	fba2 2303 	umull	r2, r3, r2, r3
 80064ce:	0a9b      	lsrs	r3, r3, #10
 80064d0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064d6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064dc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80064de:	6a3b      	ldr	r3, [r7, #32]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a5f      	ldr	r2, [pc, #380]	; (800666c <HAL_DMA_IRQHandler+0x1b4>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d04a      	beq.n	800658a <HAL_DMA_IRQHandler+0xd2>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a5d      	ldr	r2, [pc, #372]	; (8006670 <HAL_DMA_IRQHandler+0x1b8>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d045      	beq.n	800658a <HAL_DMA_IRQHandler+0xd2>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a5c      	ldr	r2, [pc, #368]	; (8006674 <HAL_DMA_IRQHandler+0x1bc>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d040      	beq.n	800658a <HAL_DMA_IRQHandler+0xd2>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a5a      	ldr	r2, [pc, #360]	; (8006678 <HAL_DMA_IRQHandler+0x1c0>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d03b      	beq.n	800658a <HAL_DMA_IRQHandler+0xd2>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a59      	ldr	r2, [pc, #356]	; (800667c <HAL_DMA_IRQHandler+0x1c4>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d036      	beq.n	800658a <HAL_DMA_IRQHandler+0xd2>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a57      	ldr	r2, [pc, #348]	; (8006680 <HAL_DMA_IRQHandler+0x1c8>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d031      	beq.n	800658a <HAL_DMA_IRQHandler+0xd2>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a56      	ldr	r2, [pc, #344]	; (8006684 <HAL_DMA_IRQHandler+0x1cc>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d02c      	beq.n	800658a <HAL_DMA_IRQHandler+0xd2>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a54      	ldr	r2, [pc, #336]	; (8006688 <HAL_DMA_IRQHandler+0x1d0>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d027      	beq.n	800658a <HAL_DMA_IRQHandler+0xd2>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a53      	ldr	r2, [pc, #332]	; (800668c <HAL_DMA_IRQHandler+0x1d4>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d022      	beq.n	800658a <HAL_DMA_IRQHandler+0xd2>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a51      	ldr	r2, [pc, #324]	; (8006690 <HAL_DMA_IRQHandler+0x1d8>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d01d      	beq.n	800658a <HAL_DMA_IRQHandler+0xd2>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a50      	ldr	r2, [pc, #320]	; (8006694 <HAL_DMA_IRQHandler+0x1dc>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d018      	beq.n	800658a <HAL_DMA_IRQHandler+0xd2>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a4e      	ldr	r2, [pc, #312]	; (8006698 <HAL_DMA_IRQHandler+0x1e0>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d013      	beq.n	800658a <HAL_DMA_IRQHandler+0xd2>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a4d      	ldr	r2, [pc, #308]	; (800669c <HAL_DMA_IRQHandler+0x1e4>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d00e      	beq.n	800658a <HAL_DMA_IRQHandler+0xd2>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a4b      	ldr	r2, [pc, #300]	; (80066a0 <HAL_DMA_IRQHandler+0x1e8>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d009      	beq.n	800658a <HAL_DMA_IRQHandler+0xd2>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a4a      	ldr	r2, [pc, #296]	; (80066a4 <HAL_DMA_IRQHandler+0x1ec>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d004      	beq.n	800658a <HAL_DMA_IRQHandler+0xd2>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a48      	ldr	r2, [pc, #288]	; (80066a8 <HAL_DMA_IRQHandler+0x1f0>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d101      	bne.n	800658e <HAL_DMA_IRQHandler+0xd6>
 800658a:	2301      	movs	r3, #1
 800658c:	e000      	b.n	8006590 <HAL_DMA_IRQHandler+0xd8>
 800658e:	2300      	movs	r3, #0
 8006590:	2b00      	cmp	r3, #0
 8006592:	f000 842b 	beq.w	8006dec <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800659a:	f003 031f 	and.w	r3, r3, #31
 800659e:	2208      	movs	r2, #8
 80065a0:	409a      	lsls	r2, r3
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	4013      	ands	r3, r2
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	f000 80a2 	beq.w	80066f0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a2e      	ldr	r2, [pc, #184]	; (800666c <HAL_DMA_IRQHandler+0x1b4>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d04a      	beq.n	800664c <HAL_DMA_IRQHandler+0x194>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a2d      	ldr	r2, [pc, #180]	; (8006670 <HAL_DMA_IRQHandler+0x1b8>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d045      	beq.n	800664c <HAL_DMA_IRQHandler+0x194>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a2b      	ldr	r2, [pc, #172]	; (8006674 <HAL_DMA_IRQHandler+0x1bc>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d040      	beq.n	800664c <HAL_DMA_IRQHandler+0x194>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a2a      	ldr	r2, [pc, #168]	; (8006678 <HAL_DMA_IRQHandler+0x1c0>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d03b      	beq.n	800664c <HAL_DMA_IRQHandler+0x194>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a28      	ldr	r2, [pc, #160]	; (800667c <HAL_DMA_IRQHandler+0x1c4>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d036      	beq.n	800664c <HAL_DMA_IRQHandler+0x194>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a27      	ldr	r2, [pc, #156]	; (8006680 <HAL_DMA_IRQHandler+0x1c8>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d031      	beq.n	800664c <HAL_DMA_IRQHandler+0x194>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a25      	ldr	r2, [pc, #148]	; (8006684 <HAL_DMA_IRQHandler+0x1cc>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d02c      	beq.n	800664c <HAL_DMA_IRQHandler+0x194>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a24      	ldr	r2, [pc, #144]	; (8006688 <HAL_DMA_IRQHandler+0x1d0>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d027      	beq.n	800664c <HAL_DMA_IRQHandler+0x194>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a22      	ldr	r2, [pc, #136]	; (800668c <HAL_DMA_IRQHandler+0x1d4>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d022      	beq.n	800664c <HAL_DMA_IRQHandler+0x194>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a21      	ldr	r2, [pc, #132]	; (8006690 <HAL_DMA_IRQHandler+0x1d8>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d01d      	beq.n	800664c <HAL_DMA_IRQHandler+0x194>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a1f      	ldr	r2, [pc, #124]	; (8006694 <HAL_DMA_IRQHandler+0x1dc>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d018      	beq.n	800664c <HAL_DMA_IRQHandler+0x194>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a1e      	ldr	r2, [pc, #120]	; (8006698 <HAL_DMA_IRQHandler+0x1e0>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d013      	beq.n	800664c <HAL_DMA_IRQHandler+0x194>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a1c      	ldr	r2, [pc, #112]	; (800669c <HAL_DMA_IRQHandler+0x1e4>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d00e      	beq.n	800664c <HAL_DMA_IRQHandler+0x194>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a1b      	ldr	r2, [pc, #108]	; (80066a0 <HAL_DMA_IRQHandler+0x1e8>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d009      	beq.n	800664c <HAL_DMA_IRQHandler+0x194>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a19      	ldr	r2, [pc, #100]	; (80066a4 <HAL_DMA_IRQHandler+0x1ec>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d004      	beq.n	800664c <HAL_DMA_IRQHandler+0x194>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a18      	ldr	r2, [pc, #96]	; (80066a8 <HAL_DMA_IRQHandler+0x1f0>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d12f      	bne.n	80066ac <HAL_DMA_IRQHandler+0x1f4>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 0304 	and.w	r3, r3, #4
 8006656:	2b00      	cmp	r3, #0
 8006658:	bf14      	ite	ne
 800665a:	2301      	movne	r3, #1
 800665c:	2300      	moveq	r3, #0
 800665e:	b2db      	uxtb	r3, r3
 8006660:	e02e      	b.n	80066c0 <HAL_DMA_IRQHandler+0x208>
 8006662:	bf00      	nop
 8006664:	24000004 	.word	0x24000004
 8006668:	1b4e81b5 	.word	0x1b4e81b5
 800666c:	40020010 	.word	0x40020010
 8006670:	40020028 	.word	0x40020028
 8006674:	40020040 	.word	0x40020040
 8006678:	40020058 	.word	0x40020058
 800667c:	40020070 	.word	0x40020070
 8006680:	40020088 	.word	0x40020088
 8006684:	400200a0 	.word	0x400200a0
 8006688:	400200b8 	.word	0x400200b8
 800668c:	40020410 	.word	0x40020410
 8006690:	40020428 	.word	0x40020428
 8006694:	40020440 	.word	0x40020440
 8006698:	40020458 	.word	0x40020458
 800669c:	40020470 	.word	0x40020470
 80066a0:	40020488 	.word	0x40020488
 80066a4:	400204a0 	.word	0x400204a0
 80066a8:	400204b8 	.word	0x400204b8
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f003 0308 	and.w	r3, r3, #8
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	bf14      	ite	ne
 80066ba:	2301      	movne	r3, #1
 80066bc:	2300      	moveq	r3, #0
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d015      	beq.n	80066f0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f022 0204 	bic.w	r2, r2, #4
 80066d2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066d8:	f003 031f 	and.w	r3, r3, #31
 80066dc:	2208      	movs	r2, #8
 80066de:	409a      	lsls	r2, r3
 80066e0:	6a3b      	ldr	r3, [r7, #32]
 80066e2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066e8:	f043 0201 	orr.w	r2, r3, #1
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066f4:	f003 031f 	and.w	r3, r3, #31
 80066f8:	69ba      	ldr	r2, [r7, #24]
 80066fa:	fa22 f303 	lsr.w	r3, r2, r3
 80066fe:	f003 0301 	and.w	r3, r3, #1
 8006702:	2b00      	cmp	r3, #0
 8006704:	d06e      	beq.n	80067e4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a69      	ldr	r2, [pc, #420]	; (80068b0 <HAL_DMA_IRQHandler+0x3f8>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d04a      	beq.n	80067a6 <HAL_DMA_IRQHandler+0x2ee>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a67      	ldr	r2, [pc, #412]	; (80068b4 <HAL_DMA_IRQHandler+0x3fc>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d045      	beq.n	80067a6 <HAL_DMA_IRQHandler+0x2ee>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a66      	ldr	r2, [pc, #408]	; (80068b8 <HAL_DMA_IRQHandler+0x400>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d040      	beq.n	80067a6 <HAL_DMA_IRQHandler+0x2ee>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a64      	ldr	r2, [pc, #400]	; (80068bc <HAL_DMA_IRQHandler+0x404>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d03b      	beq.n	80067a6 <HAL_DMA_IRQHandler+0x2ee>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a63      	ldr	r2, [pc, #396]	; (80068c0 <HAL_DMA_IRQHandler+0x408>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d036      	beq.n	80067a6 <HAL_DMA_IRQHandler+0x2ee>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a61      	ldr	r2, [pc, #388]	; (80068c4 <HAL_DMA_IRQHandler+0x40c>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d031      	beq.n	80067a6 <HAL_DMA_IRQHandler+0x2ee>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a60      	ldr	r2, [pc, #384]	; (80068c8 <HAL_DMA_IRQHandler+0x410>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d02c      	beq.n	80067a6 <HAL_DMA_IRQHandler+0x2ee>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a5e      	ldr	r2, [pc, #376]	; (80068cc <HAL_DMA_IRQHandler+0x414>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d027      	beq.n	80067a6 <HAL_DMA_IRQHandler+0x2ee>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a5d      	ldr	r2, [pc, #372]	; (80068d0 <HAL_DMA_IRQHandler+0x418>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d022      	beq.n	80067a6 <HAL_DMA_IRQHandler+0x2ee>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a5b      	ldr	r2, [pc, #364]	; (80068d4 <HAL_DMA_IRQHandler+0x41c>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d01d      	beq.n	80067a6 <HAL_DMA_IRQHandler+0x2ee>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a5a      	ldr	r2, [pc, #360]	; (80068d8 <HAL_DMA_IRQHandler+0x420>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d018      	beq.n	80067a6 <HAL_DMA_IRQHandler+0x2ee>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a58      	ldr	r2, [pc, #352]	; (80068dc <HAL_DMA_IRQHandler+0x424>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d013      	beq.n	80067a6 <HAL_DMA_IRQHandler+0x2ee>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a57      	ldr	r2, [pc, #348]	; (80068e0 <HAL_DMA_IRQHandler+0x428>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d00e      	beq.n	80067a6 <HAL_DMA_IRQHandler+0x2ee>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a55      	ldr	r2, [pc, #340]	; (80068e4 <HAL_DMA_IRQHandler+0x42c>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d009      	beq.n	80067a6 <HAL_DMA_IRQHandler+0x2ee>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a54      	ldr	r2, [pc, #336]	; (80068e8 <HAL_DMA_IRQHandler+0x430>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d004      	beq.n	80067a6 <HAL_DMA_IRQHandler+0x2ee>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a52      	ldr	r2, [pc, #328]	; (80068ec <HAL_DMA_IRQHandler+0x434>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d10a      	bne.n	80067bc <HAL_DMA_IRQHandler+0x304>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	695b      	ldr	r3, [r3, #20]
 80067ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	bf14      	ite	ne
 80067b4:	2301      	movne	r3, #1
 80067b6:	2300      	moveq	r3, #0
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	e003      	b.n	80067c4 <HAL_DMA_IRQHandler+0x30c>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	2300      	movs	r3, #0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d00d      	beq.n	80067e4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067cc:	f003 031f 	and.w	r3, r3, #31
 80067d0:	2201      	movs	r2, #1
 80067d2:	409a      	lsls	r2, r3
 80067d4:	6a3b      	ldr	r3, [r7, #32]
 80067d6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067dc:	f043 0202 	orr.w	r2, r3, #2
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067e8:	f003 031f 	and.w	r3, r3, #31
 80067ec:	2204      	movs	r2, #4
 80067ee:	409a      	lsls	r2, r3
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	4013      	ands	r3, r2
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	f000 808f 	beq.w	8006918 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a2c      	ldr	r2, [pc, #176]	; (80068b0 <HAL_DMA_IRQHandler+0x3f8>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d04a      	beq.n	800689a <HAL_DMA_IRQHandler+0x3e2>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a2a      	ldr	r2, [pc, #168]	; (80068b4 <HAL_DMA_IRQHandler+0x3fc>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d045      	beq.n	800689a <HAL_DMA_IRQHandler+0x3e2>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a29      	ldr	r2, [pc, #164]	; (80068b8 <HAL_DMA_IRQHandler+0x400>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d040      	beq.n	800689a <HAL_DMA_IRQHandler+0x3e2>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a27      	ldr	r2, [pc, #156]	; (80068bc <HAL_DMA_IRQHandler+0x404>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d03b      	beq.n	800689a <HAL_DMA_IRQHandler+0x3e2>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a26      	ldr	r2, [pc, #152]	; (80068c0 <HAL_DMA_IRQHandler+0x408>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d036      	beq.n	800689a <HAL_DMA_IRQHandler+0x3e2>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a24      	ldr	r2, [pc, #144]	; (80068c4 <HAL_DMA_IRQHandler+0x40c>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d031      	beq.n	800689a <HAL_DMA_IRQHandler+0x3e2>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a23      	ldr	r2, [pc, #140]	; (80068c8 <HAL_DMA_IRQHandler+0x410>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d02c      	beq.n	800689a <HAL_DMA_IRQHandler+0x3e2>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a21      	ldr	r2, [pc, #132]	; (80068cc <HAL_DMA_IRQHandler+0x414>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d027      	beq.n	800689a <HAL_DMA_IRQHandler+0x3e2>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a20      	ldr	r2, [pc, #128]	; (80068d0 <HAL_DMA_IRQHandler+0x418>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d022      	beq.n	800689a <HAL_DMA_IRQHandler+0x3e2>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a1e      	ldr	r2, [pc, #120]	; (80068d4 <HAL_DMA_IRQHandler+0x41c>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d01d      	beq.n	800689a <HAL_DMA_IRQHandler+0x3e2>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4a1d      	ldr	r2, [pc, #116]	; (80068d8 <HAL_DMA_IRQHandler+0x420>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d018      	beq.n	800689a <HAL_DMA_IRQHandler+0x3e2>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a1b      	ldr	r2, [pc, #108]	; (80068dc <HAL_DMA_IRQHandler+0x424>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d013      	beq.n	800689a <HAL_DMA_IRQHandler+0x3e2>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a1a      	ldr	r2, [pc, #104]	; (80068e0 <HAL_DMA_IRQHandler+0x428>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d00e      	beq.n	800689a <HAL_DMA_IRQHandler+0x3e2>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a18      	ldr	r2, [pc, #96]	; (80068e4 <HAL_DMA_IRQHandler+0x42c>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d009      	beq.n	800689a <HAL_DMA_IRQHandler+0x3e2>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a17      	ldr	r2, [pc, #92]	; (80068e8 <HAL_DMA_IRQHandler+0x430>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d004      	beq.n	800689a <HAL_DMA_IRQHandler+0x3e2>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a15      	ldr	r2, [pc, #84]	; (80068ec <HAL_DMA_IRQHandler+0x434>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d12a      	bne.n	80068f0 <HAL_DMA_IRQHandler+0x438>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f003 0302 	and.w	r3, r3, #2
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	bf14      	ite	ne
 80068a8:	2301      	movne	r3, #1
 80068aa:	2300      	moveq	r3, #0
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	e023      	b.n	80068f8 <HAL_DMA_IRQHandler+0x440>
 80068b0:	40020010 	.word	0x40020010
 80068b4:	40020028 	.word	0x40020028
 80068b8:	40020040 	.word	0x40020040
 80068bc:	40020058 	.word	0x40020058
 80068c0:	40020070 	.word	0x40020070
 80068c4:	40020088 	.word	0x40020088
 80068c8:	400200a0 	.word	0x400200a0
 80068cc:	400200b8 	.word	0x400200b8
 80068d0:	40020410 	.word	0x40020410
 80068d4:	40020428 	.word	0x40020428
 80068d8:	40020440 	.word	0x40020440
 80068dc:	40020458 	.word	0x40020458
 80068e0:	40020470 	.word	0x40020470
 80068e4:	40020488 	.word	0x40020488
 80068e8:	400204a0 	.word	0x400204a0
 80068ec:	400204b8 	.word	0x400204b8
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	2300      	movs	r3, #0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d00d      	beq.n	8006918 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006900:	f003 031f 	and.w	r3, r3, #31
 8006904:	2204      	movs	r2, #4
 8006906:	409a      	lsls	r2, r3
 8006908:	6a3b      	ldr	r3, [r7, #32]
 800690a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006910:	f043 0204 	orr.w	r2, r3, #4
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800691c:	f003 031f 	and.w	r3, r3, #31
 8006920:	2210      	movs	r2, #16
 8006922:	409a      	lsls	r2, r3
 8006924:	69bb      	ldr	r3, [r7, #24]
 8006926:	4013      	ands	r3, r2
 8006928:	2b00      	cmp	r3, #0
 800692a:	f000 80a6 	beq.w	8006a7a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a85      	ldr	r2, [pc, #532]	; (8006b48 <HAL_DMA_IRQHandler+0x690>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d04a      	beq.n	80069ce <HAL_DMA_IRQHandler+0x516>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a83      	ldr	r2, [pc, #524]	; (8006b4c <HAL_DMA_IRQHandler+0x694>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d045      	beq.n	80069ce <HAL_DMA_IRQHandler+0x516>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a82      	ldr	r2, [pc, #520]	; (8006b50 <HAL_DMA_IRQHandler+0x698>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d040      	beq.n	80069ce <HAL_DMA_IRQHandler+0x516>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a80      	ldr	r2, [pc, #512]	; (8006b54 <HAL_DMA_IRQHandler+0x69c>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d03b      	beq.n	80069ce <HAL_DMA_IRQHandler+0x516>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a7f      	ldr	r2, [pc, #508]	; (8006b58 <HAL_DMA_IRQHandler+0x6a0>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d036      	beq.n	80069ce <HAL_DMA_IRQHandler+0x516>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a7d      	ldr	r2, [pc, #500]	; (8006b5c <HAL_DMA_IRQHandler+0x6a4>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d031      	beq.n	80069ce <HAL_DMA_IRQHandler+0x516>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a7c      	ldr	r2, [pc, #496]	; (8006b60 <HAL_DMA_IRQHandler+0x6a8>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d02c      	beq.n	80069ce <HAL_DMA_IRQHandler+0x516>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a7a      	ldr	r2, [pc, #488]	; (8006b64 <HAL_DMA_IRQHandler+0x6ac>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d027      	beq.n	80069ce <HAL_DMA_IRQHandler+0x516>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a79      	ldr	r2, [pc, #484]	; (8006b68 <HAL_DMA_IRQHandler+0x6b0>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d022      	beq.n	80069ce <HAL_DMA_IRQHandler+0x516>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a77      	ldr	r2, [pc, #476]	; (8006b6c <HAL_DMA_IRQHandler+0x6b4>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d01d      	beq.n	80069ce <HAL_DMA_IRQHandler+0x516>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a76      	ldr	r2, [pc, #472]	; (8006b70 <HAL_DMA_IRQHandler+0x6b8>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d018      	beq.n	80069ce <HAL_DMA_IRQHandler+0x516>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a74      	ldr	r2, [pc, #464]	; (8006b74 <HAL_DMA_IRQHandler+0x6bc>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d013      	beq.n	80069ce <HAL_DMA_IRQHandler+0x516>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a73      	ldr	r2, [pc, #460]	; (8006b78 <HAL_DMA_IRQHandler+0x6c0>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d00e      	beq.n	80069ce <HAL_DMA_IRQHandler+0x516>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a71      	ldr	r2, [pc, #452]	; (8006b7c <HAL_DMA_IRQHandler+0x6c4>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d009      	beq.n	80069ce <HAL_DMA_IRQHandler+0x516>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a70      	ldr	r2, [pc, #448]	; (8006b80 <HAL_DMA_IRQHandler+0x6c8>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d004      	beq.n	80069ce <HAL_DMA_IRQHandler+0x516>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a6e      	ldr	r2, [pc, #440]	; (8006b84 <HAL_DMA_IRQHandler+0x6cc>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d10a      	bne.n	80069e4 <HAL_DMA_IRQHandler+0x52c>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f003 0308 	and.w	r3, r3, #8
 80069d8:	2b00      	cmp	r3, #0
 80069da:	bf14      	ite	ne
 80069dc:	2301      	movne	r3, #1
 80069de:	2300      	moveq	r3, #0
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	e009      	b.n	80069f8 <HAL_DMA_IRQHandler+0x540>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 0304 	and.w	r3, r3, #4
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	bf14      	ite	ne
 80069f2:	2301      	movne	r3, #1
 80069f4:	2300      	moveq	r3, #0
 80069f6:	b2db      	uxtb	r3, r3
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d03e      	beq.n	8006a7a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a00:	f003 031f 	and.w	r3, r3, #31
 8006a04:	2210      	movs	r2, #16
 8006a06:	409a      	lsls	r2, r3
 8006a08:	6a3b      	ldr	r3, [r7, #32]
 8006a0a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d018      	beq.n	8006a4c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d108      	bne.n	8006a3a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d024      	beq.n	8006a7a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	4798      	blx	r3
 8006a38:	e01f      	b.n	8006a7a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d01b      	beq.n	8006a7a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	4798      	blx	r3
 8006a4a:	e016      	b.n	8006a7a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d107      	bne.n	8006a6a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f022 0208 	bic.w	r2, r2, #8
 8006a68:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d003      	beq.n	8006a7a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a7e:	f003 031f 	and.w	r3, r3, #31
 8006a82:	2220      	movs	r2, #32
 8006a84:	409a      	lsls	r2, r3
 8006a86:	69bb      	ldr	r3, [r7, #24]
 8006a88:	4013      	ands	r3, r2
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	f000 8110 	beq.w	8006cb0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a2c      	ldr	r2, [pc, #176]	; (8006b48 <HAL_DMA_IRQHandler+0x690>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d04a      	beq.n	8006b30 <HAL_DMA_IRQHandler+0x678>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a2b      	ldr	r2, [pc, #172]	; (8006b4c <HAL_DMA_IRQHandler+0x694>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d045      	beq.n	8006b30 <HAL_DMA_IRQHandler+0x678>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a29      	ldr	r2, [pc, #164]	; (8006b50 <HAL_DMA_IRQHandler+0x698>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d040      	beq.n	8006b30 <HAL_DMA_IRQHandler+0x678>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a28      	ldr	r2, [pc, #160]	; (8006b54 <HAL_DMA_IRQHandler+0x69c>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d03b      	beq.n	8006b30 <HAL_DMA_IRQHandler+0x678>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a26      	ldr	r2, [pc, #152]	; (8006b58 <HAL_DMA_IRQHandler+0x6a0>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d036      	beq.n	8006b30 <HAL_DMA_IRQHandler+0x678>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a25      	ldr	r2, [pc, #148]	; (8006b5c <HAL_DMA_IRQHandler+0x6a4>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d031      	beq.n	8006b30 <HAL_DMA_IRQHandler+0x678>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a23      	ldr	r2, [pc, #140]	; (8006b60 <HAL_DMA_IRQHandler+0x6a8>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d02c      	beq.n	8006b30 <HAL_DMA_IRQHandler+0x678>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a22      	ldr	r2, [pc, #136]	; (8006b64 <HAL_DMA_IRQHandler+0x6ac>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d027      	beq.n	8006b30 <HAL_DMA_IRQHandler+0x678>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a20      	ldr	r2, [pc, #128]	; (8006b68 <HAL_DMA_IRQHandler+0x6b0>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d022      	beq.n	8006b30 <HAL_DMA_IRQHandler+0x678>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a1f      	ldr	r2, [pc, #124]	; (8006b6c <HAL_DMA_IRQHandler+0x6b4>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d01d      	beq.n	8006b30 <HAL_DMA_IRQHandler+0x678>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a1d      	ldr	r2, [pc, #116]	; (8006b70 <HAL_DMA_IRQHandler+0x6b8>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d018      	beq.n	8006b30 <HAL_DMA_IRQHandler+0x678>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a1c      	ldr	r2, [pc, #112]	; (8006b74 <HAL_DMA_IRQHandler+0x6bc>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d013      	beq.n	8006b30 <HAL_DMA_IRQHandler+0x678>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a1a      	ldr	r2, [pc, #104]	; (8006b78 <HAL_DMA_IRQHandler+0x6c0>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d00e      	beq.n	8006b30 <HAL_DMA_IRQHandler+0x678>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a19      	ldr	r2, [pc, #100]	; (8006b7c <HAL_DMA_IRQHandler+0x6c4>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d009      	beq.n	8006b30 <HAL_DMA_IRQHandler+0x678>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a17      	ldr	r2, [pc, #92]	; (8006b80 <HAL_DMA_IRQHandler+0x6c8>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d004      	beq.n	8006b30 <HAL_DMA_IRQHandler+0x678>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a16      	ldr	r2, [pc, #88]	; (8006b84 <HAL_DMA_IRQHandler+0x6cc>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d12b      	bne.n	8006b88 <HAL_DMA_IRQHandler+0x6d0>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f003 0310 	and.w	r3, r3, #16
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	bf14      	ite	ne
 8006b3e:	2301      	movne	r3, #1
 8006b40:	2300      	moveq	r3, #0
 8006b42:	b2db      	uxtb	r3, r3
 8006b44:	e02a      	b.n	8006b9c <HAL_DMA_IRQHandler+0x6e4>
 8006b46:	bf00      	nop
 8006b48:	40020010 	.word	0x40020010
 8006b4c:	40020028 	.word	0x40020028
 8006b50:	40020040 	.word	0x40020040
 8006b54:	40020058 	.word	0x40020058
 8006b58:	40020070 	.word	0x40020070
 8006b5c:	40020088 	.word	0x40020088
 8006b60:	400200a0 	.word	0x400200a0
 8006b64:	400200b8 	.word	0x400200b8
 8006b68:	40020410 	.word	0x40020410
 8006b6c:	40020428 	.word	0x40020428
 8006b70:	40020440 	.word	0x40020440
 8006b74:	40020458 	.word	0x40020458
 8006b78:	40020470 	.word	0x40020470
 8006b7c:	40020488 	.word	0x40020488
 8006b80:	400204a0 	.word	0x400204a0
 8006b84:	400204b8 	.word	0x400204b8
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f003 0302 	and.w	r3, r3, #2
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	bf14      	ite	ne
 8006b96:	2301      	movne	r3, #1
 8006b98:	2300      	moveq	r3, #0
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	f000 8087 	beq.w	8006cb0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ba6:	f003 031f 	and.w	r3, r3, #31
 8006baa:	2220      	movs	r2, #32
 8006bac:	409a      	lsls	r2, r3
 8006bae:	6a3b      	ldr	r3, [r7, #32]
 8006bb0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006bb8:	b2db      	uxtb	r3, r3
 8006bba:	2b04      	cmp	r3, #4
 8006bbc:	d139      	bne.n	8006c32 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	681a      	ldr	r2, [r3, #0]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f022 0216 	bic.w	r2, r2, #22
 8006bcc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	695a      	ldr	r2, [r3, #20]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006bdc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d103      	bne.n	8006bee <HAL_DMA_IRQHandler+0x736>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d007      	beq.n	8006bfe <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	681a      	ldr	r2, [r3, #0]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f022 0208 	bic.w	r2, r2, #8
 8006bfc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c02:	f003 031f 	and.w	r3, r3, #31
 8006c06:	223f      	movs	r2, #63	; 0x3f
 8006c08:	409a      	lsls	r2, r3
 8006c0a:	6a3b      	ldr	r3, [r7, #32]
 8006c0c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2201      	movs	r2, #1
 8006c12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	f000 834a 	beq.w	80072bc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	4798      	blx	r3
          }
          return;
 8006c30:	e344      	b.n	80072bc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d018      	beq.n	8006c72 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d108      	bne.n	8006c60 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d02c      	beq.n	8006cb0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	4798      	blx	r3
 8006c5e:	e027      	b.n	8006cb0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d023      	beq.n	8006cb0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	4798      	blx	r3
 8006c70:	e01e      	b.n	8006cb0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d10f      	bne.n	8006ca0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	681a      	ldr	r2, [r3, #0]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f022 0210 	bic.w	r2, r2, #16
 8006c8e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d003      	beq.n	8006cb0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cac:	6878      	ldr	r0, [r7, #4]
 8006cae:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	f000 8306 	beq.w	80072c6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cbe:	f003 0301 	and.w	r3, r3, #1
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	f000 8088 	beq.w	8006dd8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2204      	movs	r2, #4
 8006ccc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a7a      	ldr	r2, [pc, #488]	; (8006ec0 <HAL_DMA_IRQHandler+0xa08>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d04a      	beq.n	8006d70 <HAL_DMA_IRQHandler+0x8b8>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a79      	ldr	r2, [pc, #484]	; (8006ec4 <HAL_DMA_IRQHandler+0xa0c>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d045      	beq.n	8006d70 <HAL_DMA_IRQHandler+0x8b8>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a77      	ldr	r2, [pc, #476]	; (8006ec8 <HAL_DMA_IRQHandler+0xa10>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d040      	beq.n	8006d70 <HAL_DMA_IRQHandler+0x8b8>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a76      	ldr	r2, [pc, #472]	; (8006ecc <HAL_DMA_IRQHandler+0xa14>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d03b      	beq.n	8006d70 <HAL_DMA_IRQHandler+0x8b8>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a74      	ldr	r2, [pc, #464]	; (8006ed0 <HAL_DMA_IRQHandler+0xa18>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d036      	beq.n	8006d70 <HAL_DMA_IRQHandler+0x8b8>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a73      	ldr	r2, [pc, #460]	; (8006ed4 <HAL_DMA_IRQHandler+0xa1c>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d031      	beq.n	8006d70 <HAL_DMA_IRQHandler+0x8b8>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a71      	ldr	r2, [pc, #452]	; (8006ed8 <HAL_DMA_IRQHandler+0xa20>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d02c      	beq.n	8006d70 <HAL_DMA_IRQHandler+0x8b8>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a70      	ldr	r2, [pc, #448]	; (8006edc <HAL_DMA_IRQHandler+0xa24>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d027      	beq.n	8006d70 <HAL_DMA_IRQHandler+0x8b8>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a6e      	ldr	r2, [pc, #440]	; (8006ee0 <HAL_DMA_IRQHandler+0xa28>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d022      	beq.n	8006d70 <HAL_DMA_IRQHandler+0x8b8>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a6d      	ldr	r2, [pc, #436]	; (8006ee4 <HAL_DMA_IRQHandler+0xa2c>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d01d      	beq.n	8006d70 <HAL_DMA_IRQHandler+0x8b8>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a6b      	ldr	r2, [pc, #428]	; (8006ee8 <HAL_DMA_IRQHandler+0xa30>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d018      	beq.n	8006d70 <HAL_DMA_IRQHandler+0x8b8>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a6a      	ldr	r2, [pc, #424]	; (8006eec <HAL_DMA_IRQHandler+0xa34>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d013      	beq.n	8006d70 <HAL_DMA_IRQHandler+0x8b8>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a68      	ldr	r2, [pc, #416]	; (8006ef0 <HAL_DMA_IRQHandler+0xa38>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d00e      	beq.n	8006d70 <HAL_DMA_IRQHandler+0x8b8>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a67      	ldr	r2, [pc, #412]	; (8006ef4 <HAL_DMA_IRQHandler+0xa3c>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d009      	beq.n	8006d70 <HAL_DMA_IRQHandler+0x8b8>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a65      	ldr	r2, [pc, #404]	; (8006ef8 <HAL_DMA_IRQHandler+0xa40>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d004      	beq.n	8006d70 <HAL_DMA_IRQHandler+0x8b8>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a64      	ldr	r2, [pc, #400]	; (8006efc <HAL_DMA_IRQHandler+0xa44>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d108      	bne.n	8006d82 <HAL_DMA_IRQHandler+0x8ca>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f022 0201 	bic.w	r2, r2, #1
 8006d7e:	601a      	str	r2, [r3, #0]
 8006d80:	e007      	b.n	8006d92 <HAL_DMA_IRQHandler+0x8da>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f022 0201 	bic.w	r2, r2, #1
 8006d90:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	3301      	adds	r3, #1
 8006d96:	60fb      	str	r3, [r7, #12]
 8006d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d9a:	429a      	cmp	r2, r3
 8006d9c:	d307      	bcc.n	8006dae <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f003 0301 	and.w	r3, r3, #1
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d1f2      	bne.n	8006d92 <HAL_DMA_IRQHandler+0x8da>
 8006dac:	e000      	b.n	8006db0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006dae:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f003 0301 	and.w	r3, r3, #1
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d004      	beq.n	8006dc8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2203      	movs	r2, #3
 8006dc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006dc6:	e003      	b.n	8006dd0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	f000 8272 	beq.w	80072c6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	4798      	blx	r3
 8006dea:	e26c      	b.n	80072c6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a43      	ldr	r2, [pc, #268]	; (8006f00 <HAL_DMA_IRQHandler+0xa48>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d022      	beq.n	8006e3c <HAL_DMA_IRQHandler+0x984>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a42      	ldr	r2, [pc, #264]	; (8006f04 <HAL_DMA_IRQHandler+0xa4c>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d01d      	beq.n	8006e3c <HAL_DMA_IRQHandler+0x984>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a40      	ldr	r2, [pc, #256]	; (8006f08 <HAL_DMA_IRQHandler+0xa50>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d018      	beq.n	8006e3c <HAL_DMA_IRQHandler+0x984>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a3f      	ldr	r2, [pc, #252]	; (8006f0c <HAL_DMA_IRQHandler+0xa54>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d013      	beq.n	8006e3c <HAL_DMA_IRQHandler+0x984>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a3d      	ldr	r2, [pc, #244]	; (8006f10 <HAL_DMA_IRQHandler+0xa58>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d00e      	beq.n	8006e3c <HAL_DMA_IRQHandler+0x984>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a3c      	ldr	r2, [pc, #240]	; (8006f14 <HAL_DMA_IRQHandler+0xa5c>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d009      	beq.n	8006e3c <HAL_DMA_IRQHandler+0x984>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a3a      	ldr	r2, [pc, #232]	; (8006f18 <HAL_DMA_IRQHandler+0xa60>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d004      	beq.n	8006e3c <HAL_DMA_IRQHandler+0x984>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a39      	ldr	r2, [pc, #228]	; (8006f1c <HAL_DMA_IRQHandler+0xa64>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d101      	bne.n	8006e40 <HAL_DMA_IRQHandler+0x988>
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	e000      	b.n	8006e42 <HAL_DMA_IRQHandler+0x98a>
 8006e40:	2300      	movs	r3, #0
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	f000 823f 	beq.w	80072c6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e54:	f003 031f 	and.w	r3, r3, #31
 8006e58:	2204      	movs	r2, #4
 8006e5a:	409a      	lsls	r2, r3
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	4013      	ands	r3, r2
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	f000 80cd 	beq.w	8007000 <HAL_DMA_IRQHandler+0xb48>
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	f003 0304 	and.w	r3, r3, #4
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	f000 80c7 	beq.w	8007000 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e76:	f003 031f 	and.w	r3, r3, #31
 8006e7a:	2204      	movs	r2, #4
 8006e7c:	409a      	lsls	r2, r3
 8006e7e:	69fb      	ldr	r3, [r7, #28]
 8006e80:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d049      	beq.n	8006f20 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d109      	bne.n	8006eaa <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	f000 8210 	beq.w	80072c0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ea8:	e20a      	b.n	80072c0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	f000 8206 	beq.w	80072c0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ebc:	e200      	b.n	80072c0 <HAL_DMA_IRQHandler+0xe08>
 8006ebe:	bf00      	nop
 8006ec0:	40020010 	.word	0x40020010
 8006ec4:	40020028 	.word	0x40020028
 8006ec8:	40020040 	.word	0x40020040
 8006ecc:	40020058 	.word	0x40020058
 8006ed0:	40020070 	.word	0x40020070
 8006ed4:	40020088 	.word	0x40020088
 8006ed8:	400200a0 	.word	0x400200a0
 8006edc:	400200b8 	.word	0x400200b8
 8006ee0:	40020410 	.word	0x40020410
 8006ee4:	40020428 	.word	0x40020428
 8006ee8:	40020440 	.word	0x40020440
 8006eec:	40020458 	.word	0x40020458
 8006ef0:	40020470 	.word	0x40020470
 8006ef4:	40020488 	.word	0x40020488
 8006ef8:	400204a0 	.word	0x400204a0
 8006efc:	400204b8 	.word	0x400204b8
 8006f00:	58025408 	.word	0x58025408
 8006f04:	5802541c 	.word	0x5802541c
 8006f08:	58025430 	.word	0x58025430
 8006f0c:	58025444 	.word	0x58025444
 8006f10:	58025458 	.word	0x58025458
 8006f14:	5802546c 	.word	0x5802546c
 8006f18:	58025480 	.word	0x58025480
 8006f1c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	f003 0320 	and.w	r3, r3, #32
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d160      	bne.n	8006fec <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a7f      	ldr	r2, [pc, #508]	; (800712c <HAL_DMA_IRQHandler+0xc74>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d04a      	beq.n	8006fca <HAL_DMA_IRQHandler+0xb12>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a7d      	ldr	r2, [pc, #500]	; (8007130 <HAL_DMA_IRQHandler+0xc78>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d045      	beq.n	8006fca <HAL_DMA_IRQHandler+0xb12>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a7c      	ldr	r2, [pc, #496]	; (8007134 <HAL_DMA_IRQHandler+0xc7c>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d040      	beq.n	8006fca <HAL_DMA_IRQHandler+0xb12>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a7a      	ldr	r2, [pc, #488]	; (8007138 <HAL_DMA_IRQHandler+0xc80>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d03b      	beq.n	8006fca <HAL_DMA_IRQHandler+0xb12>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a79      	ldr	r2, [pc, #484]	; (800713c <HAL_DMA_IRQHandler+0xc84>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d036      	beq.n	8006fca <HAL_DMA_IRQHandler+0xb12>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a77      	ldr	r2, [pc, #476]	; (8007140 <HAL_DMA_IRQHandler+0xc88>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d031      	beq.n	8006fca <HAL_DMA_IRQHandler+0xb12>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a76      	ldr	r2, [pc, #472]	; (8007144 <HAL_DMA_IRQHandler+0xc8c>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d02c      	beq.n	8006fca <HAL_DMA_IRQHandler+0xb12>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a74      	ldr	r2, [pc, #464]	; (8007148 <HAL_DMA_IRQHandler+0xc90>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d027      	beq.n	8006fca <HAL_DMA_IRQHandler+0xb12>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a73      	ldr	r2, [pc, #460]	; (800714c <HAL_DMA_IRQHandler+0xc94>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d022      	beq.n	8006fca <HAL_DMA_IRQHandler+0xb12>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a71      	ldr	r2, [pc, #452]	; (8007150 <HAL_DMA_IRQHandler+0xc98>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d01d      	beq.n	8006fca <HAL_DMA_IRQHandler+0xb12>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a70      	ldr	r2, [pc, #448]	; (8007154 <HAL_DMA_IRQHandler+0xc9c>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d018      	beq.n	8006fca <HAL_DMA_IRQHandler+0xb12>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a6e      	ldr	r2, [pc, #440]	; (8007158 <HAL_DMA_IRQHandler+0xca0>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d013      	beq.n	8006fca <HAL_DMA_IRQHandler+0xb12>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a6d      	ldr	r2, [pc, #436]	; (800715c <HAL_DMA_IRQHandler+0xca4>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d00e      	beq.n	8006fca <HAL_DMA_IRQHandler+0xb12>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a6b      	ldr	r2, [pc, #428]	; (8007160 <HAL_DMA_IRQHandler+0xca8>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d009      	beq.n	8006fca <HAL_DMA_IRQHandler+0xb12>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a6a      	ldr	r2, [pc, #424]	; (8007164 <HAL_DMA_IRQHandler+0xcac>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d004      	beq.n	8006fca <HAL_DMA_IRQHandler+0xb12>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a68      	ldr	r2, [pc, #416]	; (8007168 <HAL_DMA_IRQHandler+0xcb0>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d108      	bne.n	8006fdc <HAL_DMA_IRQHandler+0xb24>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f022 0208 	bic.w	r2, r2, #8
 8006fd8:	601a      	str	r2, [r3, #0]
 8006fda:	e007      	b.n	8006fec <HAL_DMA_IRQHandler+0xb34>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f022 0204 	bic.w	r2, r2, #4
 8006fea:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	f000 8165 	beq.w	80072c0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ffe:	e15f      	b.n	80072c0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007004:	f003 031f 	and.w	r3, r3, #31
 8007008:	2202      	movs	r2, #2
 800700a:	409a      	lsls	r2, r3
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	4013      	ands	r3, r2
 8007010:	2b00      	cmp	r3, #0
 8007012:	f000 80c5 	beq.w	80071a0 <HAL_DMA_IRQHandler+0xce8>
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	f003 0302 	and.w	r3, r3, #2
 800701c:	2b00      	cmp	r3, #0
 800701e:	f000 80bf 	beq.w	80071a0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007026:	f003 031f 	and.w	r3, r3, #31
 800702a:	2202      	movs	r2, #2
 800702c:	409a      	lsls	r2, r3
 800702e:	69fb      	ldr	r3, [r7, #28]
 8007030:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007038:	2b00      	cmp	r3, #0
 800703a:	d018      	beq.n	800706e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007042:	2b00      	cmp	r3, #0
 8007044:	d109      	bne.n	800705a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800704a:	2b00      	cmp	r3, #0
 800704c:	f000 813a 	beq.w	80072c4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007058:	e134      	b.n	80072c4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800705e:	2b00      	cmp	r3, #0
 8007060:	f000 8130 	beq.w	80072c4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800706c:	e12a      	b.n	80072c4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	f003 0320 	and.w	r3, r3, #32
 8007074:	2b00      	cmp	r3, #0
 8007076:	f040 8089 	bne.w	800718c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a2b      	ldr	r2, [pc, #172]	; (800712c <HAL_DMA_IRQHandler+0xc74>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d04a      	beq.n	800711a <HAL_DMA_IRQHandler+0xc62>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a29      	ldr	r2, [pc, #164]	; (8007130 <HAL_DMA_IRQHandler+0xc78>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d045      	beq.n	800711a <HAL_DMA_IRQHandler+0xc62>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a28      	ldr	r2, [pc, #160]	; (8007134 <HAL_DMA_IRQHandler+0xc7c>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d040      	beq.n	800711a <HAL_DMA_IRQHandler+0xc62>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a26      	ldr	r2, [pc, #152]	; (8007138 <HAL_DMA_IRQHandler+0xc80>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d03b      	beq.n	800711a <HAL_DMA_IRQHandler+0xc62>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a25      	ldr	r2, [pc, #148]	; (800713c <HAL_DMA_IRQHandler+0xc84>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d036      	beq.n	800711a <HAL_DMA_IRQHandler+0xc62>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a23      	ldr	r2, [pc, #140]	; (8007140 <HAL_DMA_IRQHandler+0xc88>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d031      	beq.n	800711a <HAL_DMA_IRQHandler+0xc62>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a22      	ldr	r2, [pc, #136]	; (8007144 <HAL_DMA_IRQHandler+0xc8c>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d02c      	beq.n	800711a <HAL_DMA_IRQHandler+0xc62>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a20      	ldr	r2, [pc, #128]	; (8007148 <HAL_DMA_IRQHandler+0xc90>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d027      	beq.n	800711a <HAL_DMA_IRQHandler+0xc62>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a1f      	ldr	r2, [pc, #124]	; (800714c <HAL_DMA_IRQHandler+0xc94>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d022      	beq.n	800711a <HAL_DMA_IRQHandler+0xc62>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a1d      	ldr	r2, [pc, #116]	; (8007150 <HAL_DMA_IRQHandler+0xc98>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d01d      	beq.n	800711a <HAL_DMA_IRQHandler+0xc62>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a1c      	ldr	r2, [pc, #112]	; (8007154 <HAL_DMA_IRQHandler+0xc9c>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d018      	beq.n	800711a <HAL_DMA_IRQHandler+0xc62>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a1a      	ldr	r2, [pc, #104]	; (8007158 <HAL_DMA_IRQHandler+0xca0>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d013      	beq.n	800711a <HAL_DMA_IRQHandler+0xc62>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a19      	ldr	r2, [pc, #100]	; (800715c <HAL_DMA_IRQHandler+0xca4>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d00e      	beq.n	800711a <HAL_DMA_IRQHandler+0xc62>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a17      	ldr	r2, [pc, #92]	; (8007160 <HAL_DMA_IRQHandler+0xca8>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d009      	beq.n	800711a <HAL_DMA_IRQHandler+0xc62>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a16      	ldr	r2, [pc, #88]	; (8007164 <HAL_DMA_IRQHandler+0xcac>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d004      	beq.n	800711a <HAL_DMA_IRQHandler+0xc62>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a14      	ldr	r2, [pc, #80]	; (8007168 <HAL_DMA_IRQHandler+0xcb0>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d128      	bne.n	800716c <HAL_DMA_IRQHandler+0xcb4>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f022 0214 	bic.w	r2, r2, #20
 8007128:	601a      	str	r2, [r3, #0]
 800712a:	e027      	b.n	800717c <HAL_DMA_IRQHandler+0xcc4>
 800712c:	40020010 	.word	0x40020010
 8007130:	40020028 	.word	0x40020028
 8007134:	40020040 	.word	0x40020040
 8007138:	40020058 	.word	0x40020058
 800713c:	40020070 	.word	0x40020070
 8007140:	40020088 	.word	0x40020088
 8007144:	400200a0 	.word	0x400200a0
 8007148:	400200b8 	.word	0x400200b8
 800714c:	40020410 	.word	0x40020410
 8007150:	40020428 	.word	0x40020428
 8007154:	40020440 	.word	0x40020440
 8007158:	40020458 	.word	0x40020458
 800715c:	40020470 	.word	0x40020470
 8007160:	40020488 	.word	0x40020488
 8007164:	400204a0 	.word	0x400204a0
 8007168:	400204b8 	.word	0x400204b8
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	681a      	ldr	r2, [r3, #0]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f022 020a 	bic.w	r2, r2, #10
 800717a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007190:	2b00      	cmp	r3, #0
 8007192:	f000 8097 	beq.w	80072c4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800719e:	e091      	b.n	80072c4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071a4:	f003 031f 	and.w	r3, r3, #31
 80071a8:	2208      	movs	r2, #8
 80071aa:	409a      	lsls	r2, r3
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	4013      	ands	r3, r2
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	f000 8088 	beq.w	80072c6 <HAL_DMA_IRQHandler+0xe0e>
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	f003 0308 	and.w	r3, r3, #8
 80071bc:	2b00      	cmp	r3, #0
 80071be:	f000 8082 	beq.w	80072c6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a41      	ldr	r2, [pc, #260]	; (80072cc <HAL_DMA_IRQHandler+0xe14>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d04a      	beq.n	8007262 <HAL_DMA_IRQHandler+0xdaa>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a3f      	ldr	r2, [pc, #252]	; (80072d0 <HAL_DMA_IRQHandler+0xe18>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d045      	beq.n	8007262 <HAL_DMA_IRQHandler+0xdaa>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a3e      	ldr	r2, [pc, #248]	; (80072d4 <HAL_DMA_IRQHandler+0xe1c>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d040      	beq.n	8007262 <HAL_DMA_IRQHandler+0xdaa>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a3c      	ldr	r2, [pc, #240]	; (80072d8 <HAL_DMA_IRQHandler+0xe20>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d03b      	beq.n	8007262 <HAL_DMA_IRQHandler+0xdaa>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a3b      	ldr	r2, [pc, #236]	; (80072dc <HAL_DMA_IRQHandler+0xe24>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d036      	beq.n	8007262 <HAL_DMA_IRQHandler+0xdaa>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a39      	ldr	r2, [pc, #228]	; (80072e0 <HAL_DMA_IRQHandler+0xe28>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d031      	beq.n	8007262 <HAL_DMA_IRQHandler+0xdaa>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a38      	ldr	r2, [pc, #224]	; (80072e4 <HAL_DMA_IRQHandler+0xe2c>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d02c      	beq.n	8007262 <HAL_DMA_IRQHandler+0xdaa>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a36      	ldr	r2, [pc, #216]	; (80072e8 <HAL_DMA_IRQHandler+0xe30>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d027      	beq.n	8007262 <HAL_DMA_IRQHandler+0xdaa>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a35      	ldr	r2, [pc, #212]	; (80072ec <HAL_DMA_IRQHandler+0xe34>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d022      	beq.n	8007262 <HAL_DMA_IRQHandler+0xdaa>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a33      	ldr	r2, [pc, #204]	; (80072f0 <HAL_DMA_IRQHandler+0xe38>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d01d      	beq.n	8007262 <HAL_DMA_IRQHandler+0xdaa>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a32      	ldr	r2, [pc, #200]	; (80072f4 <HAL_DMA_IRQHandler+0xe3c>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d018      	beq.n	8007262 <HAL_DMA_IRQHandler+0xdaa>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a30      	ldr	r2, [pc, #192]	; (80072f8 <HAL_DMA_IRQHandler+0xe40>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d013      	beq.n	8007262 <HAL_DMA_IRQHandler+0xdaa>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a2f      	ldr	r2, [pc, #188]	; (80072fc <HAL_DMA_IRQHandler+0xe44>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d00e      	beq.n	8007262 <HAL_DMA_IRQHandler+0xdaa>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a2d      	ldr	r2, [pc, #180]	; (8007300 <HAL_DMA_IRQHandler+0xe48>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d009      	beq.n	8007262 <HAL_DMA_IRQHandler+0xdaa>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a2c      	ldr	r2, [pc, #176]	; (8007304 <HAL_DMA_IRQHandler+0xe4c>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d004      	beq.n	8007262 <HAL_DMA_IRQHandler+0xdaa>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a2a      	ldr	r2, [pc, #168]	; (8007308 <HAL_DMA_IRQHandler+0xe50>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d108      	bne.n	8007274 <HAL_DMA_IRQHandler+0xdbc>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f022 021c 	bic.w	r2, r2, #28
 8007270:	601a      	str	r2, [r3, #0]
 8007272:	e007      	b.n	8007284 <HAL_DMA_IRQHandler+0xdcc>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f022 020e 	bic.w	r2, r2, #14
 8007282:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007288:	f003 031f 	and.w	r3, r3, #31
 800728c:	2201      	movs	r2, #1
 800728e:	409a      	lsls	r2, r3
 8007290:	69fb      	ldr	r3, [r7, #28]
 8007292:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2201      	movs	r2, #1
 8007298:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2201      	movs	r2, #1
 800729e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2200      	movs	r2, #0
 80072a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d009      	beq.n	80072c6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	4798      	blx	r3
 80072ba:	e004      	b.n	80072c6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80072bc:	bf00      	nop
 80072be:	e002      	b.n	80072c6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80072c0:	bf00      	nop
 80072c2:	e000      	b.n	80072c6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80072c4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80072c6:	3728      	adds	r7, #40	; 0x28
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}
 80072cc:	40020010 	.word	0x40020010
 80072d0:	40020028 	.word	0x40020028
 80072d4:	40020040 	.word	0x40020040
 80072d8:	40020058 	.word	0x40020058
 80072dc:	40020070 	.word	0x40020070
 80072e0:	40020088 	.word	0x40020088
 80072e4:	400200a0 	.word	0x400200a0
 80072e8:	400200b8 	.word	0x400200b8
 80072ec:	40020410 	.word	0x40020410
 80072f0:	40020428 	.word	0x40020428
 80072f4:	40020440 	.word	0x40020440
 80072f8:	40020458 	.word	0x40020458
 80072fc:	40020470 	.word	0x40020470
 8007300:	40020488 	.word	0x40020488
 8007304:	400204a0 	.word	0x400204a0
 8007308:	400204b8 	.word	0x400204b8

0800730c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800730c:	b480      	push	{r7}
 800730e:	b087      	sub	sp, #28
 8007310:	af00      	add	r7, sp, #0
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	60b9      	str	r1, [r7, #8]
 8007316:	607a      	str	r2, [r7, #4]
 8007318:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800731e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007324:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a7f      	ldr	r2, [pc, #508]	; (8007528 <DMA_SetConfig+0x21c>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d072      	beq.n	8007416 <DMA_SetConfig+0x10a>
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a7d      	ldr	r2, [pc, #500]	; (800752c <DMA_SetConfig+0x220>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d06d      	beq.n	8007416 <DMA_SetConfig+0x10a>
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a7c      	ldr	r2, [pc, #496]	; (8007530 <DMA_SetConfig+0x224>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d068      	beq.n	8007416 <DMA_SetConfig+0x10a>
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a7a      	ldr	r2, [pc, #488]	; (8007534 <DMA_SetConfig+0x228>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d063      	beq.n	8007416 <DMA_SetConfig+0x10a>
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a79      	ldr	r2, [pc, #484]	; (8007538 <DMA_SetConfig+0x22c>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d05e      	beq.n	8007416 <DMA_SetConfig+0x10a>
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	4a77      	ldr	r2, [pc, #476]	; (800753c <DMA_SetConfig+0x230>)
 800735e:	4293      	cmp	r3, r2
 8007360:	d059      	beq.n	8007416 <DMA_SetConfig+0x10a>
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a76      	ldr	r2, [pc, #472]	; (8007540 <DMA_SetConfig+0x234>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d054      	beq.n	8007416 <DMA_SetConfig+0x10a>
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	4a74      	ldr	r2, [pc, #464]	; (8007544 <DMA_SetConfig+0x238>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d04f      	beq.n	8007416 <DMA_SetConfig+0x10a>
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	4a73      	ldr	r2, [pc, #460]	; (8007548 <DMA_SetConfig+0x23c>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d04a      	beq.n	8007416 <DMA_SetConfig+0x10a>
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a71      	ldr	r2, [pc, #452]	; (800754c <DMA_SetConfig+0x240>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d045      	beq.n	8007416 <DMA_SetConfig+0x10a>
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a70      	ldr	r2, [pc, #448]	; (8007550 <DMA_SetConfig+0x244>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d040      	beq.n	8007416 <DMA_SetConfig+0x10a>
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a6e      	ldr	r2, [pc, #440]	; (8007554 <DMA_SetConfig+0x248>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d03b      	beq.n	8007416 <DMA_SetConfig+0x10a>
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a6d      	ldr	r2, [pc, #436]	; (8007558 <DMA_SetConfig+0x24c>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d036      	beq.n	8007416 <DMA_SetConfig+0x10a>
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a6b      	ldr	r2, [pc, #428]	; (800755c <DMA_SetConfig+0x250>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d031      	beq.n	8007416 <DMA_SetConfig+0x10a>
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a6a      	ldr	r2, [pc, #424]	; (8007560 <DMA_SetConfig+0x254>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d02c      	beq.n	8007416 <DMA_SetConfig+0x10a>
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a68      	ldr	r2, [pc, #416]	; (8007564 <DMA_SetConfig+0x258>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d027      	beq.n	8007416 <DMA_SetConfig+0x10a>
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a67      	ldr	r2, [pc, #412]	; (8007568 <DMA_SetConfig+0x25c>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d022      	beq.n	8007416 <DMA_SetConfig+0x10a>
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a65      	ldr	r2, [pc, #404]	; (800756c <DMA_SetConfig+0x260>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d01d      	beq.n	8007416 <DMA_SetConfig+0x10a>
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a64      	ldr	r2, [pc, #400]	; (8007570 <DMA_SetConfig+0x264>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d018      	beq.n	8007416 <DMA_SetConfig+0x10a>
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a62      	ldr	r2, [pc, #392]	; (8007574 <DMA_SetConfig+0x268>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d013      	beq.n	8007416 <DMA_SetConfig+0x10a>
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a61      	ldr	r2, [pc, #388]	; (8007578 <DMA_SetConfig+0x26c>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d00e      	beq.n	8007416 <DMA_SetConfig+0x10a>
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a5f      	ldr	r2, [pc, #380]	; (800757c <DMA_SetConfig+0x270>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d009      	beq.n	8007416 <DMA_SetConfig+0x10a>
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a5e      	ldr	r2, [pc, #376]	; (8007580 <DMA_SetConfig+0x274>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d004      	beq.n	8007416 <DMA_SetConfig+0x10a>
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a5c      	ldr	r2, [pc, #368]	; (8007584 <DMA_SetConfig+0x278>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d101      	bne.n	800741a <DMA_SetConfig+0x10e>
 8007416:	2301      	movs	r3, #1
 8007418:	e000      	b.n	800741c <DMA_SetConfig+0x110>
 800741a:	2300      	movs	r3, #0
 800741c:	2b00      	cmp	r3, #0
 800741e:	d00d      	beq.n	800743c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007424:	68fa      	ldr	r2, [r7, #12]
 8007426:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007428:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800742e:	2b00      	cmp	r3, #0
 8007430:	d004      	beq.n	800743c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007436:	68fa      	ldr	r2, [r7, #12]
 8007438:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800743a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a39      	ldr	r2, [pc, #228]	; (8007528 <DMA_SetConfig+0x21c>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d04a      	beq.n	80074dc <DMA_SetConfig+0x1d0>
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a38      	ldr	r2, [pc, #224]	; (800752c <DMA_SetConfig+0x220>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d045      	beq.n	80074dc <DMA_SetConfig+0x1d0>
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a36      	ldr	r2, [pc, #216]	; (8007530 <DMA_SetConfig+0x224>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d040      	beq.n	80074dc <DMA_SetConfig+0x1d0>
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a35      	ldr	r2, [pc, #212]	; (8007534 <DMA_SetConfig+0x228>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d03b      	beq.n	80074dc <DMA_SetConfig+0x1d0>
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a33      	ldr	r2, [pc, #204]	; (8007538 <DMA_SetConfig+0x22c>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d036      	beq.n	80074dc <DMA_SetConfig+0x1d0>
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a32      	ldr	r2, [pc, #200]	; (800753c <DMA_SetConfig+0x230>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d031      	beq.n	80074dc <DMA_SetConfig+0x1d0>
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a30      	ldr	r2, [pc, #192]	; (8007540 <DMA_SetConfig+0x234>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d02c      	beq.n	80074dc <DMA_SetConfig+0x1d0>
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a2f      	ldr	r2, [pc, #188]	; (8007544 <DMA_SetConfig+0x238>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d027      	beq.n	80074dc <DMA_SetConfig+0x1d0>
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a2d      	ldr	r2, [pc, #180]	; (8007548 <DMA_SetConfig+0x23c>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d022      	beq.n	80074dc <DMA_SetConfig+0x1d0>
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a2c      	ldr	r2, [pc, #176]	; (800754c <DMA_SetConfig+0x240>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d01d      	beq.n	80074dc <DMA_SetConfig+0x1d0>
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a2a      	ldr	r2, [pc, #168]	; (8007550 <DMA_SetConfig+0x244>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d018      	beq.n	80074dc <DMA_SetConfig+0x1d0>
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a29      	ldr	r2, [pc, #164]	; (8007554 <DMA_SetConfig+0x248>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d013      	beq.n	80074dc <DMA_SetConfig+0x1d0>
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a27      	ldr	r2, [pc, #156]	; (8007558 <DMA_SetConfig+0x24c>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d00e      	beq.n	80074dc <DMA_SetConfig+0x1d0>
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a26      	ldr	r2, [pc, #152]	; (800755c <DMA_SetConfig+0x250>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d009      	beq.n	80074dc <DMA_SetConfig+0x1d0>
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a24      	ldr	r2, [pc, #144]	; (8007560 <DMA_SetConfig+0x254>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d004      	beq.n	80074dc <DMA_SetConfig+0x1d0>
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a23      	ldr	r2, [pc, #140]	; (8007564 <DMA_SetConfig+0x258>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	d101      	bne.n	80074e0 <DMA_SetConfig+0x1d4>
 80074dc:	2301      	movs	r3, #1
 80074de:	e000      	b.n	80074e2 <DMA_SetConfig+0x1d6>
 80074e0:	2300      	movs	r3, #0
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d059      	beq.n	800759a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074ea:	f003 031f 	and.w	r3, r3, #31
 80074ee:	223f      	movs	r2, #63	; 0x3f
 80074f0:	409a      	lsls	r2, r3
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007504:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	683a      	ldr	r2, [r7, #0]
 800750c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	2b40      	cmp	r3, #64	; 0x40
 8007514:	d138      	bne.n	8007588 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	68ba      	ldr	r2, [r7, #8]
 8007524:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007526:	e086      	b.n	8007636 <DMA_SetConfig+0x32a>
 8007528:	40020010 	.word	0x40020010
 800752c:	40020028 	.word	0x40020028
 8007530:	40020040 	.word	0x40020040
 8007534:	40020058 	.word	0x40020058
 8007538:	40020070 	.word	0x40020070
 800753c:	40020088 	.word	0x40020088
 8007540:	400200a0 	.word	0x400200a0
 8007544:	400200b8 	.word	0x400200b8
 8007548:	40020410 	.word	0x40020410
 800754c:	40020428 	.word	0x40020428
 8007550:	40020440 	.word	0x40020440
 8007554:	40020458 	.word	0x40020458
 8007558:	40020470 	.word	0x40020470
 800755c:	40020488 	.word	0x40020488
 8007560:	400204a0 	.word	0x400204a0
 8007564:	400204b8 	.word	0x400204b8
 8007568:	58025408 	.word	0x58025408
 800756c:	5802541c 	.word	0x5802541c
 8007570:	58025430 	.word	0x58025430
 8007574:	58025444 	.word	0x58025444
 8007578:	58025458 	.word	0x58025458
 800757c:	5802546c 	.word	0x5802546c
 8007580:	58025480 	.word	0x58025480
 8007584:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	68ba      	ldr	r2, [r7, #8]
 800758e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	60da      	str	r2, [r3, #12]
}
 8007598:	e04d      	b.n	8007636 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a29      	ldr	r2, [pc, #164]	; (8007644 <DMA_SetConfig+0x338>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d022      	beq.n	80075ea <DMA_SetConfig+0x2de>
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a27      	ldr	r2, [pc, #156]	; (8007648 <DMA_SetConfig+0x33c>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d01d      	beq.n	80075ea <DMA_SetConfig+0x2de>
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a26      	ldr	r2, [pc, #152]	; (800764c <DMA_SetConfig+0x340>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d018      	beq.n	80075ea <DMA_SetConfig+0x2de>
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a24      	ldr	r2, [pc, #144]	; (8007650 <DMA_SetConfig+0x344>)
 80075be:	4293      	cmp	r3, r2
 80075c0:	d013      	beq.n	80075ea <DMA_SetConfig+0x2de>
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a23      	ldr	r2, [pc, #140]	; (8007654 <DMA_SetConfig+0x348>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d00e      	beq.n	80075ea <DMA_SetConfig+0x2de>
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a21      	ldr	r2, [pc, #132]	; (8007658 <DMA_SetConfig+0x34c>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d009      	beq.n	80075ea <DMA_SetConfig+0x2de>
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4a20      	ldr	r2, [pc, #128]	; (800765c <DMA_SetConfig+0x350>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d004      	beq.n	80075ea <DMA_SetConfig+0x2de>
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a1e      	ldr	r2, [pc, #120]	; (8007660 <DMA_SetConfig+0x354>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d101      	bne.n	80075ee <DMA_SetConfig+0x2e2>
 80075ea:	2301      	movs	r3, #1
 80075ec:	e000      	b.n	80075f0 <DMA_SetConfig+0x2e4>
 80075ee:	2300      	movs	r3, #0
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d020      	beq.n	8007636 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075f8:	f003 031f 	and.w	r3, r3, #31
 80075fc:	2201      	movs	r2, #1
 80075fe:	409a      	lsls	r2, r3
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	683a      	ldr	r2, [r7, #0]
 800760a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	2b40      	cmp	r3, #64	; 0x40
 8007612:	d108      	bne.n	8007626 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	68ba      	ldr	r2, [r7, #8]
 8007622:	60da      	str	r2, [r3, #12]
}
 8007624:	e007      	b.n	8007636 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	68ba      	ldr	r2, [r7, #8]
 800762c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	687a      	ldr	r2, [r7, #4]
 8007634:	60da      	str	r2, [r3, #12]
}
 8007636:	bf00      	nop
 8007638:	371c      	adds	r7, #28
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr
 8007642:	bf00      	nop
 8007644:	58025408 	.word	0x58025408
 8007648:	5802541c 	.word	0x5802541c
 800764c:	58025430 	.word	0x58025430
 8007650:	58025444 	.word	0x58025444
 8007654:	58025458 	.word	0x58025458
 8007658:	5802546c 	.word	0x5802546c
 800765c:	58025480 	.word	0x58025480
 8007660:	58025494 	.word	0x58025494

08007664 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007664:	b480      	push	{r7}
 8007666:	b085      	sub	sp, #20
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a42      	ldr	r2, [pc, #264]	; (800777c <DMA_CalcBaseAndBitshift+0x118>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d04a      	beq.n	800770c <DMA_CalcBaseAndBitshift+0xa8>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a41      	ldr	r2, [pc, #260]	; (8007780 <DMA_CalcBaseAndBitshift+0x11c>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d045      	beq.n	800770c <DMA_CalcBaseAndBitshift+0xa8>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a3f      	ldr	r2, [pc, #252]	; (8007784 <DMA_CalcBaseAndBitshift+0x120>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d040      	beq.n	800770c <DMA_CalcBaseAndBitshift+0xa8>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a3e      	ldr	r2, [pc, #248]	; (8007788 <DMA_CalcBaseAndBitshift+0x124>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d03b      	beq.n	800770c <DMA_CalcBaseAndBitshift+0xa8>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a3c      	ldr	r2, [pc, #240]	; (800778c <DMA_CalcBaseAndBitshift+0x128>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d036      	beq.n	800770c <DMA_CalcBaseAndBitshift+0xa8>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a3b      	ldr	r2, [pc, #236]	; (8007790 <DMA_CalcBaseAndBitshift+0x12c>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d031      	beq.n	800770c <DMA_CalcBaseAndBitshift+0xa8>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a39      	ldr	r2, [pc, #228]	; (8007794 <DMA_CalcBaseAndBitshift+0x130>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d02c      	beq.n	800770c <DMA_CalcBaseAndBitshift+0xa8>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a38      	ldr	r2, [pc, #224]	; (8007798 <DMA_CalcBaseAndBitshift+0x134>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d027      	beq.n	800770c <DMA_CalcBaseAndBitshift+0xa8>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a36      	ldr	r2, [pc, #216]	; (800779c <DMA_CalcBaseAndBitshift+0x138>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d022      	beq.n	800770c <DMA_CalcBaseAndBitshift+0xa8>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a35      	ldr	r2, [pc, #212]	; (80077a0 <DMA_CalcBaseAndBitshift+0x13c>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d01d      	beq.n	800770c <DMA_CalcBaseAndBitshift+0xa8>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a33      	ldr	r2, [pc, #204]	; (80077a4 <DMA_CalcBaseAndBitshift+0x140>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d018      	beq.n	800770c <DMA_CalcBaseAndBitshift+0xa8>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a32      	ldr	r2, [pc, #200]	; (80077a8 <DMA_CalcBaseAndBitshift+0x144>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d013      	beq.n	800770c <DMA_CalcBaseAndBitshift+0xa8>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a30      	ldr	r2, [pc, #192]	; (80077ac <DMA_CalcBaseAndBitshift+0x148>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d00e      	beq.n	800770c <DMA_CalcBaseAndBitshift+0xa8>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a2f      	ldr	r2, [pc, #188]	; (80077b0 <DMA_CalcBaseAndBitshift+0x14c>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d009      	beq.n	800770c <DMA_CalcBaseAndBitshift+0xa8>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a2d      	ldr	r2, [pc, #180]	; (80077b4 <DMA_CalcBaseAndBitshift+0x150>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d004      	beq.n	800770c <DMA_CalcBaseAndBitshift+0xa8>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a2c      	ldr	r2, [pc, #176]	; (80077b8 <DMA_CalcBaseAndBitshift+0x154>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d101      	bne.n	8007710 <DMA_CalcBaseAndBitshift+0xac>
 800770c:	2301      	movs	r3, #1
 800770e:	e000      	b.n	8007712 <DMA_CalcBaseAndBitshift+0xae>
 8007710:	2300      	movs	r3, #0
 8007712:	2b00      	cmp	r3, #0
 8007714:	d024      	beq.n	8007760 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	b2db      	uxtb	r3, r3
 800771c:	3b10      	subs	r3, #16
 800771e:	4a27      	ldr	r2, [pc, #156]	; (80077bc <DMA_CalcBaseAndBitshift+0x158>)
 8007720:	fba2 2303 	umull	r2, r3, r2, r3
 8007724:	091b      	lsrs	r3, r3, #4
 8007726:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f003 0307 	and.w	r3, r3, #7
 800772e:	4a24      	ldr	r2, [pc, #144]	; (80077c0 <DMA_CalcBaseAndBitshift+0x15c>)
 8007730:	5cd3      	ldrb	r3, [r2, r3]
 8007732:	461a      	mov	r2, r3
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2b03      	cmp	r3, #3
 800773c:	d908      	bls.n	8007750 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	461a      	mov	r2, r3
 8007744:	4b1f      	ldr	r3, [pc, #124]	; (80077c4 <DMA_CalcBaseAndBitshift+0x160>)
 8007746:	4013      	ands	r3, r2
 8007748:	1d1a      	adds	r2, r3, #4
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	659a      	str	r2, [r3, #88]	; 0x58
 800774e:	e00d      	b.n	800776c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	461a      	mov	r2, r3
 8007756:	4b1b      	ldr	r3, [pc, #108]	; (80077c4 <DMA_CalcBaseAndBitshift+0x160>)
 8007758:	4013      	ands	r3, r2
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	6593      	str	r3, [r2, #88]	; 0x58
 800775e:	e005      	b.n	800776c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007770:	4618      	mov	r0, r3
 8007772:	3714      	adds	r7, #20
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr
 800777c:	40020010 	.word	0x40020010
 8007780:	40020028 	.word	0x40020028
 8007784:	40020040 	.word	0x40020040
 8007788:	40020058 	.word	0x40020058
 800778c:	40020070 	.word	0x40020070
 8007790:	40020088 	.word	0x40020088
 8007794:	400200a0 	.word	0x400200a0
 8007798:	400200b8 	.word	0x400200b8
 800779c:	40020410 	.word	0x40020410
 80077a0:	40020428 	.word	0x40020428
 80077a4:	40020440 	.word	0x40020440
 80077a8:	40020458 	.word	0x40020458
 80077ac:	40020470 	.word	0x40020470
 80077b0:	40020488 	.word	0x40020488
 80077b4:	400204a0 	.word	0x400204a0
 80077b8:	400204b8 	.word	0x400204b8
 80077bc:	aaaaaaab 	.word	0xaaaaaaab
 80077c0:	08014a50 	.word	0x08014a50
 80077c4:	fffffc00 	.word	0xfffffc00

080077c8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b085      	sub	sp, #20
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80077d0:	2300      	movs	r3, #0
 80077d2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	699b      	ldr	r3, [r3, #24]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d120      	bne.n	800781e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077e0:	2b03      	cmp	r3, #3
 80077e2:	d858      	bhi.n	8007896 <DMA_CheckFifoParam+0xce>
 80077e4:	a201      	add	r2, pc, #4	; (adr r2, 80077ec <DMA_CheckFifoParam+0x24>)
 80077e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ea:	bf00      	nop
 80077ec:	080077fd 	.word	0x080077fd
 80077f0:	0800780f 	.word	0x0800780f
 80077f4:	080077fd 	.word	0x080077fd
 80077f8:	08007897 	.word	0x08007897
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007800:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007804:	2b00      	cmp	r3, #0
 8007806:	d048      	beq.n	800789a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800780c:	e045      	b.n	800789a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007812:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007816:	d142      	bne.n	800789e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007818:	2301      	movs	r3, #1
 800781a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800781c:	e03f      	b.n	800789e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	699b      	ldr	r3, [r3, #24]
 8007822:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007826:	d123      	bne.n	8007870 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800782c:	2b03      	cmp	r3, #3
 800782e:	d838      	bhi.n	80078a2 <DMA_CheckFifoParam+0xda>
 8007830:	a201      	add	r2, pc, #4	; (adr r2, 8007838 <DMA_CheckFifoParam+0x70>)
 8007832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007836:	bf00      	nop
 8007838:	08007849 	.word	0x08007849
 800783c:	0800784f 	.word	0x0800784f
 8007840:	08007849 	.word	0x08007849
 8007844:	08007861 	.word	0x08007861
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007848:	2301      	movs	r3, #1
 800784a:	73fb      	strb	r3, [r7, #15]
        break;
 800784c:	e030      	b.n	80078b0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007852:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007856:	2b00      	cmp	r3, #0
 8007858:	d025      	beq.n	80078a6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800785a:	2301      	movs	r3, #1
 800785c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800785e:	e022      	b.n	80078a6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007864:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007868:	d11f      	bne.n	80078aa <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800786a:	2301      	movs	r3, #1
 800786c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800786e:	e01c      	b.n	80078aa <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007874:	2b02      	cmp	r3, #2
 8007876:	d902      	bls.n	800787e <DMA_CheckFifoParam+0xb6>
 8007878:	2b03      	cmp	r3, #3
 800787a:	d003      	beq.n	8007884 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800787c:	e018      	b.n	80078b0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	73fb      	strb	r3, [r7, #15]
        break;
 8007882:	e015      	b.n	80078b0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007888:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800788c:	2b00      	cmp	r3, #0
 800788e:	d00e      	beq.n	80078ae <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	73fb      	strb	r3, [r7, #15]
    break;
 8007894:	e00b      	b.n	80078ae <DMA_CheckFifoParam+0xe6>
        break;
 8007896:	bf00      	nop
 8007898:	e00a      	b.n	80078b0 <DMA_CheckFifoParam+0xe8>
        break;
 800789a:	bf00      	nop
 800789c:	e008      	b.n	80078b0 <DMA_CheckFifoParam+0xe8>
        break;
 800789e:	bf00      	nop
 80078a0:	e006      	b.n	80078b0 <DMA_CheckFifoParam+0xe8>
        break;
 80078a2:	bf00      	nop
 80078a4:	e004      	b.n	80078b0 <DMA_CheckFifoParam+0xe8>
        break;
 80078a6:	bf00      	nop
 80078a8:	e002      	b.n	80078b0 <DMA_CheckFifoParam+0xe8>
        break;
 80078aa:	bf00      	nop
 80078ac:	e000      	b.n	80078b0 <DMA_CheckFifoParam+0xe8>
    break;
 80078ae:	bf00      	nop
    }
  }

  return status;
 80078b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3714      	adds	r7, #20
 80078b6:	46bd      	mov	sp, r7
 80078b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078bc:	4770      	bx	lr
 80078be:	bf00      	nop

080078c0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b085      	sub	sp, #20
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a38      	ldr	r2, [pc, #224]	; (80079b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d022      	beq.n	800791e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a36      	ldr	r2, [pc, #216]	; (80079b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d01d      	beq.n	800791e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a35      	ldr	r2, [pc, #212]	; (80079bc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d018      	beq.n	800791e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a33      	ldr	r2, [pc, #204]	; (80079c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d013      	beq.n	800791e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a32      	ldr	r2, [pc, #200]	; (80079c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d00e      	beq.n	800791e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a30      	ldr	r2, [pc, #192]	; (80079c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d009      	beq.n	800791e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a2f      	ldr	r2, [pc, #188]	; (80079cc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d004      	beq.n	800791e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a2d      	ldr	r2, [pc, #180]	; (80079d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d101      	bne.n	8007922 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800791e:	2301      	movs	r3, #1
 8007920:	e000      	b.n	8007924 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007922:	2300      	movs	r3, #0
 8007924:	2b00      	cmp	r3, #0
 8007926:	d01a      	beq.n	800795e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	b2db      	uxtb	r3, r3
 800792e:	3b08      	subs	r3, #8
 8007930:	4a28      	ldr	r2, [pc, #160]	; (80079d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007932:	fba2 2303 	umull	r2, r3, r2, r3
 8007936:	091b      	lsrs	r3, r3, #4
 8007938:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800793a:	68fa      	ldr	r2, [r7, #12]
 800793c:	4b26      	ldr	r3, [pc, #152]	; (80079d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800793e:	4413      	add	r3, r2
 8007940:	009b      	lsls	r3, r3, #2
 8007942:	461a      	mov	r2, r3
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	4a24      	ldr	r2, [pc, #144]	; (80079dc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800794c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	f003 031f 	and.w	r3, r3, #31
 8007954:	2201      	movs	r2, #1
 8007956:	409a      	lsls	r2, r3
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800795c:	e024      	b.n	80079a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	b2db      	uxtb	r3, r3
 8007964:	3b10      	subs	r3, #16
 8007966:	4a1e      	ldr	r2, [pc, #120]	; (80079e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007968:	fba2 2303 	umull	r2, r3, r2, r3
 800796c:	091b      	lsrs	r3, r3, #4
 800796e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	4a1c      	ldr	r2, [pc, #112]	; (80079e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d806      	bhi.n	8007986 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	4a1b      	ldr	r2, [pc, #108]	; (80079e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d902      	bls.n	8007986 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	3308      	adds	r3, #8
 8007984:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007986:	68fa      	ldr	r2, [r7, #12]
 8007988:	4b18      	ldr	r3, [pc, #96]	; (80079ec <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800798a:	4413      	add	r3, r2
 800798c:	009b      	lsls	r3, r3, #2
 800798e:	461a      	mov	r2, r3
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	4a16      	ldr	r2, [pc, #88]	; (80079f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007998:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	f003 031f 	and.w	r3, r3, #31
 80079a0:	2201      	movs	r2, #1
 80079a2:	409a      	lsls	r2, r3
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80079a8:	bf00      	nop
 80079aa:	3714      	adds	r7, #20
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr
 80079b4:	58025408 	.word	0x58025408
 80079b8:	5802541c 	.word	0x5802541c
 80079bc:	58025430 	.word	0x58025430
 80079c0:	58025444 	.word	0x58025444
 80079c4:	58025458 	.word	0x58025458
 80079c8:	5802546c 	.word	0x5802546c
 80079cc:	58025480 	.word	0x58025480
 80079d0:	58025494 	.word	0x58025494
 80079d4:	cccccccd 	.word	0xcccccccd
 80079d8:	16009600 	.word	0x16009600
 80079dc:	58025880 	.word	0x58025880
 80079e0:	aaaaaaab 	.word	0xaaaaaaab
 80079e4:	400204b8 	.word	0x400204b8
 80079e8:	4002040f 	.word	0x4002040f
 80079ec:	10008200 	.word	0x10008200
 80079f0:	40020880 	.word	0x40020880

080079f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b085      	sub	sp, #20
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d04a      	beq.n	8007aa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2b08      	cmp	r3, #8
 8007a0e:	d847      	bhi.n	8007aa0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a25      	ldr	r2, [pc, #148]	; (8007aac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d022      	beq.n	8007a60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a24      	ldr	r2, [pc, #144]	; (8007ab0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d01d      	beq.n	8007a60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4a22      	ldr	r2, [pc, #136]	; (8007ab4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d018      	beq.n	8007a60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a21      	ldr	r2, [pc, #132]	; (8007ab8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d013      	beq.n	8007a60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a1f      	ldr	r2, [pc, #124]	; (8007abc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d00e      	beq.n	8007a60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a1e      	ldr	r2, [pc, #120]	; (8007ac0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d009      	beq.n	8007a60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a1c      	ldr	r2, [pc, #112]	; (8007ac4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d004      	beq.n	8007a60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a1b      	ldr	r2, [pc, #108]	; (8007ac8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d101      	bne.n	8007a64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007a60:	2301      	movs	r3, #1
 8007a62:	e000      	b.n	8007a66 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007a64:	2300      	movs	r3, #0
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d00a      	beq.n	8007a80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007a6a:	68fa      	ldr	r2, [r7, #12]
 8007a6c:	4b17      	ldr	r3, [pc, #92]	; (8007acc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007a6e:	4413      	add	r3, r2
 8007a70:	009b      	lsls	r3, r3, #2
 8007a72:	461a      	mov	r2, r3
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	4a15      	ldr	r2, [pc, #84]	; (8007ad0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007a7c:	671a      	str	r2, [r3, #112]	; 0x70
 8007a7e:	e009      	b.n	8007a94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007a80:	68fa      	ldr	r2, [r7, #12]
 8007a82:	4b14      	ldr	r3, [pc, #80]	; (8007ad4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007a84:	4413      	add	r3, r2
 8007a86:	009b      	lsls	r3, r3, #2
 8007a88:	461a      	mov	r2, r3
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4a11      	ldr	r2, [pc, #68]	; (8007ad8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007a92:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	3b01      	subs	r3, #1
 8007a98:	2201      	movs	r2, #1
 8007a9a:	409a      	lsls	r2, r3
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007aa0:	bf00      	nop
 8007aa2:	3714      	adds	r7, #20
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr
 8007aac:	58025408 	.word	0x58025408
 8007ab0:	5802541c 	.word	0x5802541c
 8007ab4:	58025430 	.word	0x58025430
 8007ab8:	58025444 	.word	0x58025444
 8007abc:	58025458 	.word	0x58025458
 8007ac0:	5802546c 	.word	0x5802546c
 8007ac4:	58025480 	.word	0x58025480
 8007ac8:	58025494 	.word	0x58025494
 8007acc:	1600963f 	.word	0x1600963f
 8007ad0:	58025940 	.word	0x58025940
 8007ad4:	1000823f 	.word	0x1000823f
 8007ad8:	40020940 	.word	0x40020940

08007adc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b084      	sub	sp, #16
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d101      	bne.n	8007aee <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8007aea:	2301      	movs	r3, #1
 8007aec:	e0cf      	b.n	8007c8e <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d106      	bne.n	8007b06 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2223      	movs	r2, #35	; 0x23
 8007afc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f7f9 fcb3 	bl	800146c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b06:	4b64      	ldr	r3, [pc, #400]	; (8007c98 <HAL_ETH_Init+0x1bc>)
 8007b08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007b0c:	4a62      	ldr	r2, [pc, #392]	; (8007c98 <HAL_ETH_Init+0x1bc>)
 8007b0e:	f043 0302 	orr.w	r3, r3, #2
 8007b12:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007b16:	4b60      	ldr	r3, [pc, #384]	; (8007c98 <HAL_ETH_Init+0x1bc>)
 8007b18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007b1c:	f003 0302 	and.w	r3, r3, #2
 8007b20:	60bb      	str	r3, [r7, #8]
 8007b22:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	7a1b      	ldrb	r3, [r3, #8]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d103      	bne.n	8007b34 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8007b2c:	2000      	movs	r0, #0
 8007b2e:	f7fc fafb 	bl	8004128 <HAL_SYSCFG_ETHInterfaceSelect>
 8007b32:	e003      	b.n	8007b3c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8007b34:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8007b38:	f7fc faf6 	bl	8004128 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8007b3c:	4b57      	ldr	r3, [pc, #348]	; (8007c9c <HAL_ETH_Init+0x1c0>)
 8007b3e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	6812      	ldr	r2, [r2, #0]
 8007b4e:	f043 0301 	orr.w	r3, r3, #1
 8007b52:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007b56:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007b58:	f7fc faaa 	bl	80040b0 <HAL_GetTick>
 8007b5c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8007b5e:	e011      	b.n	8007b84 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8007b60:	f7fc faa6 	bl	80040b0 <HAL_GetTick>
 8007b64:	4602      	mov	r2, r0
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	1ad3      	subs	r3, r2, r3
 8007b6a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007b6e:	d909      	bls.n	8007b84 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2204      	movs	r2, #4
 8007b74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	22e0      	movs	r2, #224	; 0xe0
 8007b7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8007b80:	2301      	movs	r3, #1
 8007b82:	e084      	b.n	8007c8e <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f003 0301 	and.w	r3, r3, #1
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d1e4      	bne.n	8007b60 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 f886 	bl	8007ca8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8007b9c:	f001 fe7c 	bl	8009898 <HAL_RCC_GetHCLKFreq>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	4a3f      	ldr	r2, [pc, #252]	; (8007ca0 <HAL_ETH_Init+0x1c4>)
 8007ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ba8:	0c9a      	lsrs	r2, r3, #18
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	3a01      	subs	r2, #1
 8007bb0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 fa71 	bl	800809c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bc2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8007bc6:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	6812      	ldr	r2, [r2, #0]
 8007bce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007bd2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007bd6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	695b      	ldr	r3, [r3, #20]
 8007bde:	f003 0303 	and.w	r3, r3, #3
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d009      	beq.n	8007bfa <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2201      	movs	r2, #1
 8007bea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	22e0      	movs	r2, #224	; 0xe0
 8007bf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	e049      	b.n	8007c8e <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007c02:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8007c06:	4b27      	ldr	r3, [pc, #156]	; (8007ca4 <HAL_ETH_Init+0x1c8>)
 8007c08:	4013      	ands	r3, r2
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	6952      	ldr	r2, [r2, #20]
 8007c0e:	0051      	lsls	r1, r2, #1
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	6812      	ldr	r2, [r2, #0]
 8007c14:	430b      	orrs	r3, r1
 8007c16:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007c1a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 fad9 	bl	80081d6 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f000 fb1f 	bl	8008268 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	685b      	ldr	r3, [r3, #4]
 8007c2e:	3305      	adds	r3, #5
 8007c30:	781b      	ldrb	r3, [r3, #0]
 8007c32:	021a      	lsls	r2, r3, #8
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	3304      	adds	r3, #4
 8007c3a:	781b      	ldrb	r3, [r3, #0]
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	430a      	orrs	r2, r1
 8007c44:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	3303      	adds	r3, #3
 8007c4e:	781b      	ldrb	r3, [r3, #0]
 8007c50:	061a      	lsls	r2, r3, #24
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	3302      	adds	r3, #2
 8007c58:	781b      	ldrb	r3, [r3, #0]
 8007c5a:	041b      	lsls	r3, r3, #16
 8007c5c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	3301      	adds	r3, #1
 8007c64:	781b      	ldrb	r3, [r3, #0]
 8007c66:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8007c68:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8007c76:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8007c78:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2210      	movs	r2, #16
 8007c88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007c8c:	2300      	movs	r3, #0
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3710      	adds	r7, #16
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop
 8007c98:	58024400 	.word	0x58024400
 8007c9c:	58000400 	.word	0x58000400
 8007ca0:	431bde83 	.word	0x431bde83
 8007ca4:	ffff8001 	.word	0xffff8001

08007ca8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b084      	sub	sp, #16
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007cb8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007cc0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8007cc2:	f001 fde9 	bl	8009898 <HAL_RCC_GetHCLKFreq>
 8007cc6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	4a1e      	ldr	r2, [pc, #120]	; (8007d44 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d908      	bls.n	8007ce2 <HAL_ETH_SetMDIOClockRange+0x3a>
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	4a1d      	ldr	r2, [pc, #116]	; (8007d48 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8007cd4:	4293      	cmp	r3, r2
 8007cd6:	d804      	bhi.n	8007ce2 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007cde:	60fb      	str	r3, [r7, #12]
 8007ce0:	e027      	b.n	8007d32 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	4a18      	ldr	r2, [pc, #96]	; (8007d48 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d908      	bls.n	8007cfc <HAL_ETH_SetMDIOClockRange+0x54>
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	4a17      	ldr	r2, [pc, #92]	; (8007d4c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d204      	bcs.n	8007cfc <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007cf8:	60fb      	str	r3, [r7, #12]
 8007cfa:	e01a      	b.n	8007d32 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	4a13      	ldr	r2, [pc, #76]	; (8007d4c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d303      	bcc.n	8007d0c <HAL_ETH_SetMDIOClockRange+0x64>
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	4a12      	ldr	r2, [pc, #72]	; (8007d50 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d911      	bls.n	8007d30 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	4a10      	ldr	r2, [pc, #64]	; (8007d50 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d908      	bls.n	8007d26 <HAL_ETH_SetMDIOClockRange+0x7e>
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	4a0f      	ldr	r2, [pc, #60]	; (8007d54 <HAL_ETH_SetMDIOClockRange+0xac>)
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	d804      	bhi.n	8007d26 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d22:	60fb      	str	r3, [r7, #12]
 8007d24:	e005      	b.n	8007d32 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007d2c:	60fb      	str	r3, [r7, #12]
 8007d2e:	e000      	b.n	8007d32 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8007d30:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	68fa      	ldr	r2, [r7, #12]
 8007d38:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8007d3c:	bf00      	nop
 8007d3e:	3710      	adds	r7, #16
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}
 8007d44:	01312cff 	.word	0x01312cff
 8007d48:	02160ebf 	.word	0x02160ebf
 8007d4c:	03938700 	.word	0x03938700
 8007d50:	05f5e0ff 	.word	0x05f5e0ff
 8007d54:	08f0d17f 	.word	0x08f0d17f

08007d58 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b085      	sub	sp, #20
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8007d6a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	791b      	ldrb	r3, [r3, #4]
 8007d70:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8007d72:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	7b1b      	ldrb	r3, [r3, #12]
 8007d78:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8007d7a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	7b5b      	ldrb	r3, [r3, #13]
 8007d80:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8007d82:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	7b9b      	ldrb	r3, [r3, #14]
 8007d88:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8007d8a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	7bdb      	ldrb	r3, [r3, #15]
 8007d90:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8007d92:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8007d94:	683a      	ldr	r2, [r7, #0]
 8007d96:	7c12      	ldrb	r2, [r2, #16]
 8007d98:	2a00      	cmp	r2, #0
 8007d9a:	d102      	bne.n	8007da2 <ETH_SetMACConfig+0x4a>
 8007d9c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007da0:	e000      	b.n	8007da4 <ETH_SetMACConfig+0x4c>
 8007da2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8007da4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8007da6:	683a      	ldr	r2, [r7, #0]
 8007da8:	7c52      	ldrb	r2, [r2, #17]
 8007daa:	2a00      	cmp	r2, #0
 8007dac:	d102      	bne.n	8007db4 <ETH_SetMACConfig+0x5c>
 8007dae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007db2:	e000      	b.n	8007db6 <ETH_SetMACConfig+0x5e>
 8007db4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8007db6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	7c9b      	ldrb	r3, [r3, #18]
 8007dbc:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8007dbe:	431a      	orrs	r2, r3
               macconf->Speed |
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8007dc4:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8007dca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	7f1b      	ldrb	r3, [r3, #28]
 8007dd0:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8007dd2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	7f5b      	ldrb	r3, [r3, #29]
 8007dd8:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8007dda:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8007ddc:	683a      	ldr	r2, [r7, #0]
 8007dde:	7f92      	ldrb	r2, [r2, #30]
 8007de0:	2a00      	cmp	r2, #0
 8007de2:	d102      	bne.n	8007dea <ETH_SetMACConfig+0x92>
 8007de4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007de8:	e000      	b.n	8007dec <ETH_SetMACConfig+0x94>
 8007dea:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8007dec:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	7fdb      	ldrb	r3, [r3, #31]
 8007df2:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8007df4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8007df6:	683a      	ldr	r2, [r7, #0]
 8007df8:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007dfc:	2a00      	cmp	r2, #0
 8007dfe:	d102      	bne.n	8007e06 <ETH_SetMACConfig+0xae>
 8007e00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e04:	e000      	b.n	8007e08 <ETH_SetMACConfig+0xb0>
 8007e06:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8007e08:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8007e0e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e16:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8007e18:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	4b56      	ldr	r3, [pc, #344]	; (8007f84 <ETH_SetMACConfig+0x22c>)
 8007e2a:	4013      	ands	r3, r2
 8007e2c:	687a      	ldr	r2, [r7, #4]
 8007e2e:	6812      	ldr	r2, [r2, #0]
 8007e30:	68f9      	ldr	r1, [r7, #12]
 8007e32:	430b      	orrs	r3, r1
 8007e34:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e3a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007e42:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8007e44:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007e4c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8007e4e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007e56:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8007e58:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8007e5a:	683a      	ldr	r2, [r7, #0]
 8007e5c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8007e60:	2a00      	cmp	r2, #0
 8007e62:	d102      	bne.n	8007e6a <ETH_SetMACConfig+0x112>
 8007e64:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007e68:	e000      	b.n	8007e6c <ETH_SetMACConfig+0x114>
 8007e6a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8007e6c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8007e72:	4313      	orrs	r3, r2
 8007e74:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	685a      	ldr	r2, [r3, #4]
 8007e7c:	4b42      	ldr	r3, [pc, #264]	; (8007f88 <ETH_SetMACConfig+0x230>)
 8007e7e:	4013      	ands	r3, r2
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	6812      	ldr	r2, [r2, #0]
 8007e84:	68f9      	ldr	r1, [r7, #12]
 8007e86:	430b      	orrs	r3, r1
 8007e88:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e90:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8007e96:	4313      	orrs	r3, r2
 8007e98:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	68da      	ldr	r2, [r3, #12]
 8007ea0:	4b3a      	ldr	r3, [pc, #232]	; (8007f8c <ETH_SetMACConfig+0x234>)
 8007ea2:	4013      	ands	r3, r2
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	6812      	ldr	r2, [r2, #0]
 8007ea8:	68f9      	ldr	r1, [r7, #12]
 8007eaa:	430b      	orrs	r3, r1
 8007eac:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007eb4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8007eba:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8007ebc:	683a      	ldr	r2, [r7, #0]
 8007ebe:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8007ec2:	2a00      	cmp	r2, #0
 8007ec4:	d101      	bne.n	8007eca <ETH_SetMACConfig+0x172>
 8007ec6:	2280      	movs	r2, #128	; 0x80
 8007ec8:	e000      	b.n	8007ecc <ETH_SetMACConfig+0x174>
 8007eca:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8007ecc:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ed2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007ede:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8007ee2:	4013      	ands	r3, r2
 8007ee4:	687a      	ldr	r2, [r7, #4]
 8007ee6:	6812      	ldr	r2, [r2, #0]
 8007ee8:	68f9      	ldr	r1, [r7, #12]
 8007eea:	430b      	orrs	r3, r1
 8007eec:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007ef4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8007efc:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8007efe:	4313      	orrs	r3, r2
 8007f00:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f0a:	f023 0103 	bic.w	r1, r3, #3
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	68fa      	ldr	r2, [r7, #12]
 8007f14:	430a      	orrs	r2, r1
 8007f16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8007f22:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	430a      	orrs	r2, r1
 8007f30:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8007f38:	683a      	ldr	r2, [r7, #0]
 8007f3a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8007f3e:	2a00      	cmp	r2, #0
 8007f40:	d101      	bne.n	8007f46 <ETH_SetMACConfig+0x1ee>
 8007f42:	2240      	movs	r2, #64	; 0x40
 8007f44:	e000      	b.n	8007f48 <ETH_SetMACConfig+0x1f0>
 8007f46:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8007f48:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8007f50:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8007f52:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8007f5a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8007f5c:	4313      	orrs	r3, r2
 8007f5e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8007f68:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	68fa      	ldr	r2, [r7, #12]
 8007f72:	430a      	orrs	r2, r1
 8007f74:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8007f78:	bf00      	nop
 8007f7a:	3714      	adds	r7, #20
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr
 8007f84:	00048083 	.word	0x00048083
 8007f88:	c0f88000 	.word	0xc0f88000
 8007f8c:	fffffef0 	.word	0xfffffef0

08007f90 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b085      	sub	sp, #20
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	4b38      	ldr	r3, [pc, #224]	; (8008088 <ETH_SetDMAConfig+0xf8>)
 8007fa6:	4013      	ands	r3, r2
 8007fa8:	683a      	ldr	r2, [r7, #0]
 8007faa:	6811      	ldr	r1, [r2, #0]
 8007fac:	687a      	ldr	r2, [r7, #4]
 8007fae:	6812      	ldr	r2, [r2, #0]
 8007fb0:	430b      	orrs	r3, r1
 8007fb2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007fb6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	791b      	ldrb	r3, [r3, #4]
 8007fbc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8007fc2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	7b1b      	ldrb	r3, [r3, #12]
 8007fc8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8007fca:	4313      	orrs	r3, r2
 8007fcc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fd6:	685a      	ldr	r2, [r3, #4]
 8007fd8:	4b2c      	ldr	r3, [pc, #176]	; (800808c <ETH_SetDMAConfig+0xfc>)
 8007fda:	4013      	ands	r3, r2
 8007fdc:	687a      	ldr	r2, [r7, #4]
 8007fde:	6812      	ldr	r2, [r2, #0]
 8007fe0:	68f9      	ldr	r1, [r7, #12]
 8007fe2:	430b      	orrs	r3, r1
 8007fe4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007fe8:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	7b5b      	ldrb	r3, [r3, #13]
 8007fee:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008000:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8008004:	4b22      	ldr	r3, [pc, #136]	; (8008090 <ETH_SetDMAConfig+0x100>)
 8008006:	4013      	ands	r3, r2
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	6812      	ldr	r2, [r2, #0]
 800800c:	68f9      	ldr	r1, [r7, #12]
 800800e:	430b      	orrs	r3, r1
 8008010:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008014:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	7d1b      	ldrb	r3, [r3, #20]
 8008020:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8008022:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	7f5b      	ldrb	r3, [r3, #29]
 8008028:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800802a:	4313      	orrs	r3, r2
 800802c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008036:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800803a:	4b16      	ldr	r3, [pc, #88]	; (8008094 <ETH_SetDMAConfig+0x104>)
 800803c:	4013      	ands	r3, r2
 800803e:	687a      	ldr	r2, [r7, #4]
 8008040:	6812      	ldr	r2, [r2, #0]
 8008042:	68f9      	ldr	r1, [r7, #12]
 8008044:	430b      	orrs	r3, r1
 8008046:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800804a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	7f1b      	ldrb	r3, [r3, #28]
 8008052:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8008058:	4313      	orrs	r3, r2
 800805a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008064:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8008068:	4b0b      	ldr	r3, [pc, #44]	; (8008098 <ETH_SetDMAConfig+0x108>)
 800806a:	4013      	ands	r3, r2
 800806c:	687a      	ldr	r2, [r7, #4]
 800806e:	6812      	ldr	r2, [r2, #0]
 8008070:	68f9      	ldr	r1, [r7, #12]
 8008072:	430b      	orrs	r3, r1
 8008074:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008078:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 800807c:	bf00      	nop
 800807e:	3714      	adds	r7, #20
 8008080:	46bd      	mov	sp, r7
 8008082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008086:	4770      	bx	lr
 8008088:	ffff87fd 	.word	0xffff87fd
 800808c:	ffff2ffe 	.word	0xffff2ffe
 8008090:	fffec000 	.word	0xfffec000
 8008094:	ffc0efef 	.word	0xffc0efef
 8008098:	7fc0ffff 	.word	0x7fc0ffff

0800809c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b0a4      	sub	sp, #144	; 0x90
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80080a4:	2301      	movs	r3, #1
 80080a6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80080aa:	2300      	movs	r3, #0
 80080ac:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80080ae:	2300      	movs	r3, #0
 80080b0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80080b4:	2300      	movs	r3, #0
 80080b6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80080ba:	2301      	movs	r3, #1
 80080bc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80080c0:	2301      	movs	r3, #1
 80080c2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80080c6:	2301      	movs	r3, #1
 80080c8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80080cc:	2300      	movs	r3, #0
 80080ce:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80080d2:	2301      	movs	r3, #1
 80080d4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80080d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80080dc:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80080de:	2300      	movs	r3, #0
 80080e0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80080e4:	2300      	movs	r3, #0
 80080e6:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80080e8:	2300      	movs	r3, #0
 80080ea:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80080ee:	2300      	movs	r3, #0
 80080f0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80080f4:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80080f8:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80080fa:	2300      	movs	r3, #0
 80080fc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8008100:	2300      	movs	r3, #0
 8008102:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8008104:	2301      	movs	r3, #1
 8008106:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800810a:	2300      	movs	r3, #0
 800810c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8008110:	2300      	movs	r3, #0
 8008112:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8008116:	2300      	movs	r3, #0
 8008118:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800811a:	2300      	movs	r3, #0
 800811c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800811e:	2300      	movs	r3, #0
 8008120:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8008122:	2300      	movs	r3, #0
 8008124:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8008128:	2300      	movs	r3, #0
 800812a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800812e:	2301      	movs	r3, #1
 8008130:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8008134:	2320      	movs	r3, #32
 8008136:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800813a:	2301      	movs	r3, #1
 800813c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8008140:	2300      	movs	r3, #0
 8008142:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8008146:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800814a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800814c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008150:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8008152:	2300      	movs	r3, #0
 8008154:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8008158:	2302      	movs	r3, #2
 800815a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800815e:	2300      	movs	r3, #0
 8008160:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8008164:	2300      	movs	r3, #0
 8008166:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800816a:	2300      	movs	r3, #0
 800816c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8008170:	2301      	movs	r3, #1
 8008172:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8008176:	2300      	movs	r3, #0
 8008178:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800817a:	2301      	movs	r3, #1
 800817c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8008180:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008184:	4619      	mov	r1, r3
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f7ff fde6 	bl	8007d58 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800818c:	2301      	movs	r3, #1
 800818e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8008190:	2301      	movs	r3, #1
 8008192:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8008194:	2300      	movs	r3, #0
 8008196:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8008198:	2300      	movs	r3, #0
 800819a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800819e:	2300      	movs	r3, #0
 80081a0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80081a2:	2300      	movs	r3, #0
 80081a4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80081a6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80081aa:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80081ac:	2300      	movs	r3, #0
 80081ae:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80081b0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80081b4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80081b6:	2300      	movs	r3, #0
 80081b8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80081bc:	f44f 7306 	mov.w	r3, #536	; 0x218
 80081c0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80081c2:	f107 0308 	add.w	r3, r7, #8
 80081c6:	4619      	mov	r1, r3
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f7ff fee1 	bl	8007f90 <ETH_SetDMAConfig>
}
 80081ce:	bf00      	nop
 80081d0:	3790      	adds	r7, #144	; 0x90
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}

080081d6 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80081d6:	b480      	push	{r7}
 80081d8:	b085      	sub	sp, #20
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80081de:	2300      	movs	r3, #0
 80081e0:	60fb      	str	r3, [r7, #12]
 80081e2:	e01d      	b.n	8008220 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	68d9      	ldr	r1, [r3, #12]
 80081e8:	68fa      	ldr	r2, [r7, #12]
 80081ea:	4613      	mov	r3, r2
 80081ec:	005b      	lsls	r3, r3, #1
 80081ee:	4413      	add	r3, r2
 80081f0:	00db      	lsls	r3, r3, #3
 80081f2:	440b      	add	r3, r1
 80081f4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	2200      	movs	r2, #0
 80081fa:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	2200      	movs	r2, #0
 8008200:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	2200      	movs	r2, #0
 8008206:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	2200      	movs	r2, #0
 800820c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800820e:	68b9      	ldr	r1, [r7, #8]
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	68fa      	ldr	r2, [r7, #12]
 8008214:	3206      	adds	r2, #6
 8008216:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	3301      	adds	r3, #1
 800821e:	60fb      	str	r3, [r7, #12]
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2b03      	cmp	r3, #3
 8008224:	d9de      	bls.n	80081e4 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2200      	movs	r2, #0
 800822a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008234:	461a      	mov	r2, r3
 8008236:	2303      	movs	r3, #3
 8008238:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	68da      	ldr	r2, [r3, #12]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008248:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	68da      	ldr	r2, [r3, #12]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008258:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 800825c:	bf00      	nop
 800825e:	3714      	adds	r7, #20
 8008260:	46bd      	mov	sp, r7
 8008262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008266:	4770      	bx	lr

08008268 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8008268:	b480      	push	{r7}
 800826a:	b085      	sub	sp, #20
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8008270:	2300      	movs	r3, #0
 8008272:	60fb      	str	r3, [r7, #12]
 8008274:	e023      	b.n	80082be <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6919      	ldr	r1, [r3, #16]
 800827a:	68fa      	ldr	r2, [r7, #12]
 800827c:	4613      	mov	r3, r2
 800827e:	005b      	lsls	r3, r3, #1
 8008280:	4413      	add	r3, r2
 8008282:	00db      	lsls	r3, r3, #3
 8008284:	440b      	add	r3, r1
 8008286:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	2200      	movs	r2, #0
 800828c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	2200      	movs	r2, #0
 8008292:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	2200      	movs	r2, #0
 8008298:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	2200      	movs	r2, #0
 800829e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	2200      	movs	r2, #0
 80082a4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	2200      	movs	r2, #0
 80082aa:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80082ac:	68b9      	ldr	r1, [r7, #8]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	68fa      	ldr	r2, [r7, #12]
 80082b2:	3212      	adds	r2, #18
 80082b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	3301      	adds	r3, #1
 80082bc:	60fb      	str	r3, [r7, #12]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2b03      	cmp	r3, #3
 80082c2:	d9d8      	bls.n	8008276 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2200      	movs	r2, #0
 80082c8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2200      	movs	r2, #0
 80082ce:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2200      	movs	r2, #0
 80082d4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2200      	movs	r2, #0
 80082da:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2200      	movs	r2, #0
 80082e0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082ea:	461a      	mov	r2, r3
 80082ec:	2303      	movs	r3, #3
 80082ee:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	691a      	ldr	r2, [r3, #16]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80082fe:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	691b      	ldr	r3, [r3, #16]
 8008306:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008312:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8008316:	bf00      	nop
 8008318:	3714      	adds	r7, #20
 800831a:	46bd      	mov	sp, r7
 800831c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008320:	4770      	bx	lr
	...

08008324 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008324:	b480      	push	{r7}
 8008326:	b089      	sub	sp, #36	; 0x24
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800832e:	2300      	movs	r3, #0
 8008330:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008332:	4b89      	ldr	r3, [pc, #548]	; (8008558 <HAL_GPIO_Init+0x234>)
 8008334:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008336:	e194      	b.n	8008662 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	2101      	movs	r1, #1
 800833e:	69fb      	ldr	r3, [r7, #28]
 8008340:	fa01 f303 	lsl.w	r3, r1, r3
 8008344:	4013      	ands	r3, r2
 8008346:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	2b00      	cmp	r3, #0
 800834c:	f000 8186 	beq.w	800865c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	f003 0303 	and.w	r3, r3, #3
 8008358:	2b01      	cmp	r3, #1
 800835a:	d005      	beq.n	8008368 <HAL_GPIO_Init+0x44>
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	685b      	ldr	r3, [r3, #4]
 8008360:	f003 0303 	and.w	r3, r3, #3
 8008364:	2b02      	cmp	r3, #2
 8008366:	d130      	bne.n	80083ca <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800836e:	69fb      	ldr	r3, [r7, #28]
 8008370:	005b      	lsls	r3, r3, #1
 8008372:	2203      	movs	r2, #3
 8008374:	fa02 f303 	lsl.w	r3, r2, r3
 8008378:	43db      	mvns	r3, r3
 800837a:	69ba      	ldr	r2, [r7, #24]
 800837c:	4013      	ands	r3, r2
 800837e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	68da      	ldr	r2, [r3, #12]
 8008384:	69fb      	ldr	r3, [r7, #28]
 8008386:	005b      	lsls	r3, r3, #1
 8008388:	fa02 f303 	lsl.w	r3, r2, r3
 800838c:	69ba      	ldr	r2, [r7, #24]
 800838e:	4313      	orrs	r3, r2
 8008390:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	69ba      	ldr	r2, [r7, #24]
 8008396:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800839e:	2201      	movs	r2, #1
 80083a0:	69fb      	ldr	r3, [r7, #28]
 80083a2:	fa02 f303 	lsl.w	r3, r2, r3
 80083a6:	43db      	mvns	r3, r3
 80083a8:	69ba      	ldr	r2, [r7, #24]
 80083aa:	4013      	ands	r3, r2
 80083ac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80083ae:	683b      	ldr	r3, [r7, #0]
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	091b      	lsrs	r3, r3, #4
 80083b4:	f003 0201 	and.w	r2, r3, #1
 80083b8:	69fb      	ldr	r3, [r7, #28]
 80083ba:	fa02 f303 	lsl.w	r3, r2, r3
 80083be:	69ba      	ldr	r2, [r7, #24]
 80083c0:	4313      	orrs	r3, r2
 80083c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	69ba      	ldr	r2, [r7, #24]
 80083c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	f003 0303 	and.w	r3, r3, #3
 80083d2:	2b03      	cmp	r3, #3
 80083d4:	d017      	beq.n	8008406 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	68db      	ldr	r3, [r3, #12]
 80083da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80083dc:	69fb      	ldr	r3, [r7, #28]
 80083de:	005b      	lsls	r3, r3, #1
 80083e0:	2203      	movs	r2, #3
 80083e2:	fa02 f303 	lsl.w	r3, r2, r3
 80083e6:	43db      	mvns	r3, r3
 80083e8:	69ba      	ldr	r2, [r7, #24]
 80083ea:	4013      	ands	r3, r2
 80083ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	689a      	ldr	r2, [r3, #8]
 80083f2:	69fb      	ldr	r3, [r7, #28]
 80083f4:	005b      	lsls	r3, r3, #1
 80083f6:	fa02 f303 	lsl.w	r3, r2, r3
 80083fa:	69ba      	ldr	r2, [r7, #24]
 80083fc:	4313      	orrs	r3, r2
 80083fe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	69ba      	ldr	r2, [r7, #24]
 8008404:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	685b      	ldr	r3, [r3, #4]
 800840a:	f003 0303 	and.w	r3, r3, #3
 800840e:	2b02      	cmp	r3, #2
 8008410:	d123      	bne.n	800845a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008412:	69fb      	ldr	r3, [r7, #28]
 8008414:	08da      	lsrs	r2, r3, #3
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	3208      	adds	r2, #8
 800841a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800841e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008420:	69fb      	ldr	r3, [r7, #28]
 8008422:	f003 0307 	and.w	r3, r3, #7
 8008426:	009b      	lsls	r3, r3, #2
 8008428:	220f      	movs	r2, #15
 800842a:	fa02 f303 	lsl.w	r3, r2, r3
 800842e:	43db      	mvns	r3, r3
 8008430:	69ba      	ldr	r2, [r7, #24]
 8008432:	4013      	ands	r3, r2
 8008434:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	691a      	ldr	r2, [r3, #16]
 800843a:	69fb      	ldr	r3, [r7, #28]
 800843c:	f003 0307 	and.w	r3, r3, #7
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	fa02 f303 	lsl.w	r3, r2, r3
 8008446:	69ba      	ldr	r2, [r7, #24]
 8008448:	4313      	orrs	r3, r2
 800844a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800844c:	69fb      	ldr	r3, [r7, #28]
 800844e:	08da      	lsrs	r2, r3, #3
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	3208      	adds	r2, #8
 8008454:	69b9      	ldr	r1, [r7, #24]
 8008456:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008460:	69fb      	ldr	r3, [r7, #28]
 8008462:	005b      	lsls	r3, r3, #1
 8008464:	2203      	movs	r2, #3
 8008466:	fa02 f303 	lsl.w	r3, r2, r3
 800846a:	43db      	mvns	r3, r3
 800846c:	69ba      	ldr	r2, [r7, #24]
 800846e:	4013      	ands	r3, r2
 8008470:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	f003 0203 	and.w	r2, r3, #3
 800847a:	69fb      	ldr	r3, [r7, #28]
 800847c:	005b      	lsls	r3, r3, #1
 800847e:	fa02 f303 	lsl.w	r3, r2, r3
 8008482:	69ba      	ldr	r2, [r7, #24]
 8008484:	4313      	orrs	r3, r2
 8008486:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	69ba      	ldr	r2, [r7, #24]
 800848c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008496:	2b00      	cmp	r3, #0
 8008498:	f000 80e0 	beq.w	800865c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800849c:	4b2f      	ldr	r3, [pc, #188]	; (800855c <HAL_GPIO_Init+0x238>)
 800849e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80084a2:	4a2e      	ldr	r2, [pc, #184]	; (800855c <HAL_GPIO_Init+0x238>)
 80084a4:	f043 0302 	orr.w	r3, r3, #2
 80084a8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80084ac:	4b2b      	ldr	r3, [pc, #172]	; (800855c <HAL_GPIO_Init+0x238>)
 80084ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80084b2:	f003 0302 	and.w	r3, r3, #2
 80084b6:	60fb      	str	r3, [r7, #12]
 80084b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80084ba:	4a29      	ldr	r2, [pc, #164]	; (8008560 <HAL_GPIO_Init+0x23c>)
 80084bc:	69fb      	ldr	r3, [r7, #28]
 80084be:	089b      	lsrs	r3, r3, #2
 80084c0:	3302      	adds	r3, #2
 80084c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80084c8:	69fb      	ldr	r3, [r7, #28]
 80084ca:	f003 0303 	and.w	r3, r3, #3
 80084ce:	009b      	lsls	r3, r3, #2
 80084d0:	220f      	movs	r2, #15
 80084d2:	fa02 f303 	lsl.w	r3, r2, r3
 80084d6:	43db      	mvns	r3, r3
 80084d8:	69ba      	ldr	r2, [r7, #24]
 80084da:	4013      	ands	r3, r2
 80084dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	4a20      	ldr	r2, [pc, #128]	; (8008564 <HAL_GPIO_Init+0x240>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d052      	beq.n	800858c <HAL_GPIO_Init+0x268>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	4a1f      	ldr	r2, [pc, #124]	; (8008568 <HAL_GPIO_Init+0x244>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d031      	beq.n	8008552 <HAL_GPIO_Init+0x22e>
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	4a1e      	ldr	r2, [pc, #120]	; (800856c <HAL_GPIO_Init+0x248>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d02b      	beq.n	800854e <HAL_GPIO_Init+0x22a>
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	4a1d      	ldr	r2, [pc, #116]	; (8008570 <HAL_GPIO_Init+0x24c>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d025      	beq.n	800854a <HAL_GPIO_Init+0x226>
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	4a1c      	ldr	r2, [pc, #112]	; (8008574 <HAL_GPIO_Init+0x250>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d01f      	beq.n	8008546 <HAL_GPIO_Init+0x222>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	4a1b      	ldr	r2, [pc, #108]	; (8008578 <HAL_GPIO_Init+0x254>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d019      	beq.n	8008542 <HAL_GPIO_Init+0x21e>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	4a1a      	ldr	r2, [pc, #104]	; (800857c <HAL_GPIO_Init+0x258>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d013      	beq.n	800853e <HAL_GPIO_Init+0x21a>
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	4a19      	ldr	r2, [pc, #100]	; (8008580 <HAL_GPIO_Init+0x25c>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d00d      	beq.n	800853a <HAL_GPIO_Init+0x216>
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	4a18      	ldr	r2, [pc, #96]	; (8008584 <HAL_GPIO_Init+0x260>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d007      	beq.n	8008536 <HAL_GPIO_Init+0x212>
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	4a17      	ldr	r2, [pc, #92]	; (8008588 <HAL_GPIO_Init+0x264>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d101      	bne.n	8008532 <HAL_GPIO_Init+0x20e>
 800852e:	2309      	movs	r3, #9
 8008530:	e02d      	b.n	800858e <HAL_GPIO_Init+0x26a>
 8008532:	230a      	movs	r3, #10
 8008534:	e02b      	b.n	800858e <HAL_GPIO_Init+0x26a>
 8008536:	2308      	movs	r3, #8
 8008538:	e029      	b.n	800858e <HAL_GPIO_Init+0x26a>
 800853a:	2307      	movs	r3, #7
 800853c:	e027      	b.n	800858e <HAL_GPIO_Init+0x26a>
 800853e:	2306      	movs	r3, #6
 8008540:	e025      	b.n	800858e <HAL_GPIO_Init+0x26a>
 8008542:	2305      	movs	r3, #5
 8008544:	e023      	b.n	800858e <HAL_GPIO_Init+0x26a>
 8008546:	2304      	movs	r3, #4
 8008548:	e021      	b.n	800858e <HAL_GPIO_Init+0x26a>
 800854a:	2303      	movs	r3, #3
 800854c:	e01f      	b.n	800858e <HAL_GPIO_Init+0x26a>
 800854e:	2302      	movs	r3, #2
 8008550:	e01d      	b.n	800858e <HAL_GPIO_Init+0x26a>
 8008552:	2301      	movs	r3, #1
 8008554:	e01b      	b.n	800858e <HAL_GPIO_Init+0x26a>
 8008556:	bf00      	nop
 8008558:	58000080 	.word	0x58000080
 800855c:	58024400 	.word	0x58024400
 8008560:	58000400 	.word	0x58000400
 8008564:	58020000 	.word	0x58020000
 8008568:	58020400 	.word	0x58020400
 800856c:	58020800 	.word	0x58020800
 8008570:	58020c00 	.word	0x58020c00
 8008574:	58021000 	.word	0x58021000
 8008578:	58021400 	.word	0x58021400
 800857c:	58021800 	.word	0x58021800
 8008580:	58021c00 	.word	0x58021c00
 8008584:	58022000 	.word	0x58022000
 8008588:	58022400 	.word	0x58022400
 800858c:	2300      	movs	r3, #0
 800858e:	69fa      	ldr	r2, [r7, #28]
 8008590:	f002 0203 	and.w	r2, r2, #3
 8008594:	0092      	lsls	r2, r2, #2
 8008596:	4093      	lsls	r3, r2
 8008598:	69ba      	ldr	r2, [r7, #24]
 800859a:	4313      	orrs	r3, r2
 800859c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800859e:	4938      	ldr	r1, [pc, #224]	; (8008680 <HAL_GPIO_Init+0x35c>)
 80085a0:	69fb      	ldr	r3, [r7, #28]
 80085a2:	089b      	lsrs	r3, r3, #2
 80085a4:	3302      	adds	r3, #2
 80085a6:	69ba      	ldr	r2, [r7, #24]
 80085a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80085ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	43db      	mvns	r3, r3
 80085b8:	69ba      	ldr	r2, [r7, #24]
 80085ba:	4013      	ands	r3, r2
 80085bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d003      	beq.n	80085d2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80085ca:	69ba      	ldr	r2, [r7, #24]
 80085cc:	693b      	ldr	r3, [r7, #16]
 80085ce:	4313      	orrs	r3, r2
 80085d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80085d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80085d6:	69bb      	ldr	r3, [r7, #24]
 80085d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80085da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	43db      	mvns	r3, r3
 80085e6:	69ba      	ldr	r2, [r7, #24]
 80085e8:	4013      	ands	r3, r2
 80085ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d003      	beq.n	8008600 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80085f8:	69ba      	ldr	r2, [r7, #24]
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	4313      	orrs	r3, r2
 80085fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008600:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008604:	69bb      	ldr	r3, [r7, #24]
 8008606:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	43db      	mvns	r3, r3
 8008612:	69ba      	ldr	r2, [r7, #24]
 8008614:	4013      	ands	r3, r2
 8008616:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008620:	2b00      	cmp	r3, #0
 8008622:	d003      	beq.n	800862c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008624:	69ba      	ldr	r2, [r7, #24]
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	4313      	orrs	r3, r2
 800862a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	69ba      	ldr	r2, [r7, #24]
 8008630:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	43db      	mvns	r3, r3
 800863c:	69ba      	ldr	r2, [r7, #24]
 800863e:	4013      	ands	r3, r2
 8008640:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800864a:	2b00      	cmp	r3, #0
 800864c:	d003      	beq.n	8008656 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800864e:	69ba      	ldr	r2, [r7, #24]
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	4313      	orrs	r3, r2
 8008654:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	69ba      	ldr	r2, [r7, #24]
 800865a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800865c:	69fb      	ldr	r3, [r7, #28]
 800865e:	3301      	adds	r3, #1
 8008660:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	681a      	ldr	r2, [r3, #0]
 8008666:	69fb      	ldr	r3, [r7, #28]
 8008668:	fa22 f303 	lsr.w	r3, r2, r3
 800866c:	2b00      	cmp	r3, #0
 800866e:	f47f ae63 	bne.w	8008338 <HAL_GPIO_Init+0x14>
  }
}
 8008672:	bf00      	nop
 8008674:	bf00      	nop
 8008676:	3724      	adds	r7, #36	; 0x24
 8008678:	46bd      	mov	sp, r7
 800867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867e:	4770      	bx	lr
 8008680:	58000400 	.word	0x58000400

08008684 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008684:	b480      	push	{r7}
 8008686:	b083      	sub	sp, #12
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	460b      	mov	r3, r1
 800868e:	807b      	strh	r3, [r7, #2]
 8008690:	4613      	mov	r3, r2
 8008692:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008694:	787b      	ldrb	r3, [r7, #1]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d003      	beq.n	80086a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800869a:	887a      	ldrh	r2, [r7, #2]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80086a0:	e003      	b.n	80086aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80086a2:	887b      	ldrh	r3, [r7, #2]
 80086a4:	041a      	lsls	r2, r3, #16
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	619a      	str	r2, [r3, #24]
}
 80086aa:	bf00      	nop
 80086ac:	370c      	adds	r7, #12
 80086ae:	46bd      	mov	sp, r7
 80086b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b4:	4770      	bx	lr

080086b6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80086b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086b8:	b08f      	sub	sp, #60	; 0x3c
 80086ba:	af0a      	add	r7, sp, #40	; 0x28
 80086bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d101      	bne.n	80086c8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80086c4:	2301      	movs	r3, #1
 80086c6:	e116      	b.n	80088f6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80086d4:	b2db      	uxtb	r3, r3
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d106      	bne.n	80086e8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2200      	movs	r2, #0
 80086de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f7f8 fff6 	bl	80016d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2203      	movs	r2, #3
 80086ec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d102      	bne.n	8008702 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2200      	movs	r2, #0
 8008700:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4618      	mov	r0, r3
 8008708:	f004 fc22 	bl	800cf50 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	603b      	str	r3, [r7, #0]
 8008712:	687e      	ldr	r6, [r7, #4]
 8008714:	466d      	mov	r5, sp
 8008716:	f106 0410 	add.w	r4, r6, #16
 800871a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800871c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800871e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008720:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008722:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008726:	e885 0003 	stmia.w	r5, {r0, r1}
 800872a:	1d33      	adds	r3, r6, #4
 800872c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800872e:	6838      	ldr	r0, [r7, #0]
 8008730:	f004 fba0 	bl	800ce74 <USB_CoreInit>
 8008734:	4603      	mov	r3, r0
 8008736:	2b00      	cmp	r3, #0
 8008738:	d005      	beq.n	8008746 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2202      	movs	r2, #2
 800873e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008742:	2301      	movs	r3, #1
 8008744:	e0d7      	b.n	80088f6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	2100      	movs	r1, #0
 800874c:	4618      	mov	r0, r3
 800874e:	f004 fc10 	bl	800cf72 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008752:	2300      	movs	r3, #0
 8008754:	73fb      	strb	r3, [r7, #15]
 8008756:	e04a      	b.n	80087ee <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008758:	7bfa      	ldrb	r2, [r7, #15]
 800875a:	6879      	ldr	r1, [r7, #4]
 800875c:	4613      	mov	r3, r2
 800875e:	00db      	lsls	r3, r3, #3
 8008760:	4413      	add	r3, r2
 8008762:	009b      	lsls	r3, r3, #2
 8008764:	440b      	add	r3, r1
 8008766:	333d      	adds	r3, #61	; 0x3d
 8008768:	2201      	movs	r2, #1
 800876a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800876c:	7bfa      	ldrb	r2, [r7, #15]
 800876e:	6879      	ldr	r1, [r7, #4]
 8008770:	4613      	mov	r3, r2
 8008772:	00db      	lsls	r3, r3, #3
 8008774:	4413      	add	r3, r2
 8008776:	009b      	lsls	r3, r3, #2
 8008778:	440b      	add	r3, r1
 800877a:	333c      	adds	r3, #60	; 0x3c
 800877c:	7bfa      	ldrb	r2, [r7, #15]
 800877e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008780:	7bfa      	ldrb	r2, [r7, #15]
 8008782:	7bfb      	ldrb	r3, [r7, #15]
 8008784:	b298      	uxth	r0, r3
 8008786:	6879      	ldr	r1, [r7, #4]
 8008788:	4613      	mov	r3, r2
 800878a:	00db      	lsls	r3, r3, #3
 800878c:	4413      	add	r3, r2
 800878e:	009b      	lsls	r3, r3, #2
 8008790:	440b      	add	r3, r1
 8008792:	3344      	adds	r3, #68	; 0x44
 8008794:	4602      	mov	r2, r0
 8008796:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008798:	7bfa      	ldrb	r2, [r7, #15]
 800879a:	6879      	ldr	r1, [r7, #4]
 800879c:	4613      	mov	r3, r2
 800879e:	00db      	lsls	r3, r3, #3
 80087a0:	4413      	add	r3, r2
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	440b      	add	r3, r1
 80087a6:	3340      	adds	r3, #64	; 0x40
 80087a8:	2200      	movs	r2, #0
 80087aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80087ac:	7bfa      	ldrb	r2, [r7, #15]
 80087ae:	6879      	ldr	r1, [r7, #4]
 80087b0:	4613      	mov	r3, r2
 80087b2:	00db      	lsls	r3, r3, #3
 80087b4:	4413      	add	r3, r2
 80087b6:	009b      	lsls	r3, r3, #2
 80087b8:	440b      	add	r3, r1
 80087ba:	3348      	adds	r3, #72	; 0x48
 80087bc:	2200      	movs	r2, #0
 80087be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80087c0:	7bfa      	ldrb	r2, [r7, #15]
 80087c2:	6879      	ldr	r1, [r7, #4]
 80087c4:	4613      	mov	r3, r2
 80087c6:	00db      	lsls	r3, r3, #3
 80087c8:	4413      	add	r3, r2
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	440b      	add	r3, r1
 80087ce:	334c      	adds	r3, #76	; 0x4c
 80087d0:	2200      	movs	r2, #0
 80087d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80087d4:	7bfa      	ldrb	r2, [r7, #15]
 80087d6:	6879      	ldr	r1, [r7, #4]
 80087d8:	4613      	mov	r3, r2
 80087da:	00db      	lsls	r3, r3, #3
 80087dc:	4413      	add	r3, r2
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	440b      	add	r3, r1
 80087e2:	3354      	adds	r3, #84	; 0x54
 80087e4:	2200      	movs	r2, #0
 80087e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80087e8:	7bfb      	ldrb	r3, [r7, #15]
 80087ea:	3301      	adds	r3, #1
 80087ec:	73fb      	strb	r3, [r7, #15]
 80087ee:	7bfa      	ldrb	r2, [r7, #15]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	429a      	cmp	r2, r3
 80087f6:	d3af      	bcc.n	8008758 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80087f8:	2300      	movs	r3, #0
 80087fa:	73fb      	strb	r3, [r7, #15]
 80087fc:	e044      	b.n	8008888 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80087fe:	7bfa      	ldrb	r2, [r7, #15]
 8008800:	6879      	ldr	r1, [r7, #4]
 8008802:	4613      	mov	r3, r2
 8008804:	00db      	lsls	r3, r3, #3
 8008806:	4413      	add	r3, r2
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	440b      	add	r3, r1
 800880c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8008810:	2200      	movs	r2, #0
 8008812:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008814:	7bfa      	ldrb	r2, [r7, #15]
 8008816:	6879      	ldr	r1, [r7, #4]
 8008818:	4613      	mov	r3, r2
 800881a:	00db      	lsls	r3, r3, #3
 800881c:	4413      	add	r3, r2
 800881e:	009b      	lsls	r3, r3, #2
 8008820:	440b      	add	r3, r1
 8008822:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8008826:	7bfa      	ldrb	r2, [r7, #15]
 8008828:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800882a:	7bfa      	ldrb	r2, [r7, #15]
 800882c:	6879      	ldr	r1, [r7, #4]
 800882e:	4613      	mov	r3, r2
 8008830:	00db      	lsls	r3, r3, #3
 8008832:	4413      	add	r3, r2
 8008834:	009b      	lsls	r3, r3, #2
 8008836:	440b      	add	r3, r1
 8008838:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800883c:	2200      	movs	r2, #0
 800883e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008840:	7bfa      	ldrb	r2, [r7, #15]
 8008842:	6879      	ldr	r1, [r7, #4]
 8008844:	4613      	mov	r3, r2
 8008846:	00db      	lsls	r3, r3, #3
 8008848:	4413      	add	r3, r2
 800884a:	009b      	lsls	r3, r3, #2
 800884c:	440b      	add	r3, r1
 800884e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8008852:	2200      	movs	r2, #0
 8008854:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008856:	7bfa      	ldrb	r2, [r7, #15]
 8008858:	6879      	ldr	r1, [r7, #4]
 800885a:	4613      	mov	r3, r2
 800885c:	00db      	lsls	r3, r3, #3
 800885e:	4413      	add	r3, r2
 8008860:	009b      	lsls	r3, r3, #2
 8008862:	440b      	add	r3, r1
 8008864:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008868:	2200      	movs	r2, #0
 800886a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800886c:	7bfa      	ldrb	r2, [r7, #15]
 800886e:	6879      	ldr	r1, [r7, #4]
 8008870:	4613      	mov	r3, r2
 8008872:	00db      	lsls	r3, r3, #3
 8008874:	4413      	add	r3, r2
 8008876:	009b      	lsls	r3, r3, #2
 8008878:	440b      	add	r3, r1
 800887a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800887e:	2200      	movs	r2, #0
 8008880:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008882:	7bfb      	ldrb	r3, [r7, #15]
 8008884:	3301      	adds	r3, #1
 8008886:	73fb      	strb	r3, [r7, #15]
 8008888:	7bfa      	ldrb	r2, [r7, #15]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	429a      	cmp	r2, r3
 8008890:	d3b5      	bcc.n	80087fe <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	603b      	str	r3, [r7, #0]
 8008898:	687e      	ldr	r6, [r7, #4]
 800889a:	466d      	mov	r5, sp
 800889c:	f106 0410 	add.w	r4, r6, #16
 80088a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80088a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80088a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80088a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80088a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80088ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80088b0:	1d33      	adds	r3, r6, #4
 80088b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80088b4:	6838      	ldr	r0, [r7, #0]
 80088b6:	f004 fba9 	bl	800d00c <USB_DevInit>
 80088ba:	4603      	mov	r3, r0
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d005      	beq.n	80088cc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2202      	movs	r2, #2
 80088c4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80088c8:	2301      	movs	r3, #1
 80088ca:	e014      	b.n	80088f6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2200      	movs	r2, #0
 80088d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2201      	movs	r2, #1
 80088d8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e0:	2b01      	cmp	r3, #1
 80088e2:	d102      	bne.n	80088ea <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80088e4:	6878      	ldr	r0, [r7, #4]
 80088e6:	f000 f80b 	bl	8008900 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4618      	mov	r0, r3
 80088f0:	f004 fd67 	bl	800d3c2 <USB_DevDisconnect>

  return HAL_OK;
 80088f4:	2300      	movs	r3, #0
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3714      	adds	r7, #20
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08008900 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008900:	b480      	push	{r7}
 8008902:	b085      	sub	sp, #20
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2201      	movs	r2, #1
 8008912:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2200      	movs	r2, #0
 800891a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	699b      	ldr	r3, [r3, #24]
 8008922:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800892e:	4b05      	ldr	r3, [pc, #20]	; (8008944 <HAL_PCDEx_ActivateLPM+0x44>)
 8008930:	4313      	orrs	r3, r2
 8008932:	68fa      	ldr	r2, [r7, #12]
 8008934:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8008936:	2300      	movs	r3, #0
}
 8008938:	4618      	mov	r0, r3
 800893a:	3714      	adds	r7, #20
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr
 8008944:	10000003 	.word	0x10000003

08008948 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b084      	sub	sp, #16
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008950:	4b19      	ldr	r3, [pc, #100]	; (80089b8 <HAL_PWREx_ConfigSupply+0x70>)
 8008952:	68db      	ldr	r3, [r3, #12]
 8008954:	f003 0304 	and.w	r3, r3, #4
 8008958:	2b04      	cmp	r3, #4
 800895a:	d00a      	beq.n	8008972 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800895c:	4b16      	ldr	r3, [pc, #88]	; (80089b8 <HAL_PWREx_ConfigSupply+0x70>)
 800895e:	68db      	ldr	r3, [r3, #12]
 8008960:	f003 0307 	and.w	r3, r3, #7
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	429a      	cmp	r2, r3
 8008968:	d001      	beq.n	800896e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800896a:	2301      	movs	r3, #1
 800896c:	e01f      	b.n	80089ae <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800896e:	2300      	movs	r3, #0
 8008970:	e01d      	b.n	80089ae <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008972:	4b11      	ldr	r3, [pc, #68]	; (80089b8 <HAL_PWREx_ConfigSupply+0x70>)
 8008974:	68db      	ldr	r3, [r3, #12]
 8008976:	f023 0207 	bic.w	r2, r3, #7
 800897a:	490f      	ldr	r1, [pc, #60]	; (80089b8 <HAL_PWREx_ConfigSupply+0x70>)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	4313      	orrs	r3, r2
 8008980:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008982:	f7fb fb95 	bl	80040b0 <HAL_GetTick>
 8008986:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008988:	e009      	b.n	800899e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800898a:	f7fb fb91 	bl	80040b0 <HAL_GetTick>
 800898e:	4602      	mov	r2, r0
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	1ad3      	subs	r3, r2, r3
 8008994:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008998:	d901      	bls.n	800899e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800899a:	2301      	movs	r3, #1
 800899c:	e007      	b.n	80089ae <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800899e:	4b06      	ldr	r3, [pc, #24]	; (80089b8 <HAL_PWREx_ConfigSupply+0x70>)
 80089a0:	685b      	ldr	r3, [r3, #4]
 80089a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80089a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089aa:	d1ee      	bne.n	800898a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80089ac:	2300      	movs	r3, #0
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3710      	adds	r7, #16
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
 80089b6:	bf00      	nop
 80089b8:	58024800 	.word	0x58024800

080089bc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80089bc:	b480      	push	{r7}
 80089be:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80089c0:	4b05      	ldr	r3, [pc, #20]	; (80089d8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80089c2:	68db      	ldr	r3, [r3, #12]
 80089c4:	4a04      	ldr	r2, [pc, #16]	; (80089d8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80089c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80089ca:	60d3      	str	r3, [r2, #12]
}
 80089cc:	bf00      	nop
 80089ce:	46bd      	mov	sp, r7
 80089d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d4:	4770      	bx	lr
 80089d6:	bf00      	nop
 80089d8:	58024800 	.word	0x58024800

080089dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b08c      	sub	sp, #48	; 0x30
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d102      	bne.n	80089f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80089ea:	2301      	movs	r3, #1
 80089ec:	f000 bc1d 	b.w	800922a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f003 0301 	and.w	r3, r3, #1
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	f000 8087 	beq.w	8008b0c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80089fe:	4b99      	ldr	r3, [pc, #612]	; (8008c64 <HAL_RCC_OscConfig+0x288>)
 8008a00:	691b      	ldr	r3, [r3, #16]
 8008a02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a06:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008a08:	4b96      	ldr	r3, [pc, #600]	; (8008c64 <HAL_RCC_OscConfig+0x288>)
 8008a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a0c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a10:	2b10      	cmp	r3, #16
 8008a12:	d007      	beq.n	8008a24 <HAL_RCC_OscConfig+0x48>
 8008a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a16:	2b18      	cmp	r3, #24
 8008a18:	d110      	bne.n	8008a3c <HAL_RCC_OscConfig+0x60>
 8008a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a1c:	f003 0303 	and.w	r3, r3, #3
 8008a20:	2b02      	cmp	r3, #2
 8008a22:	d10b      	bne.n	8008a3c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a24:	4b8f      	ldr	r3, [pc, #572]	; (8008c64 <HAL_RCC_OscConfig+0x288>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d06c      	beq.n	8008b0a <HAL_RCC_OscConfig+0x12e>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d168      	bne.n	8008b0a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8008a38:	2301      	movs	r3, #1
 8008a3a:	e3f6      	b.n	800922a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a44:	d106      	bne.n	8008a54 <HAL_RCC_OscConfig+0x78>
 8008a46:	4b87      	ldr	r3, [pc, #540]	; (8008c64 <HAL_RCC_OscConfig+0x288>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4a86      	ldr	r2, [pc, #536]	; (8008c64 <HAL_RCC_OscConfig+0x288>)
 8008a4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a50:	6013      	str	r3, [r2, #0]
 8008a52:	e02e      	b.n	8008ab2 <HAL_RCC_OscConfig+0xd6>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d10c      	bne.n	8008a76 <HAL_RCC_OscConfig+0x9a>
 8008a5c:	4b81      	ldr	r3, [pc, #516]	; (8008c64 <HAL_RCC_OscConfig+0x288>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a80      	ldr	r2, [pc, #512]	; (8008c64 <HAL_RCC_OscConfig+0x288>)
 8008a62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a66:	6013      	str	r3, [r2, #0]
 8008a68:	4b7e      	ldr	r3, [pc, #504]	; (8008c64 <HAL_RCC_OscConfig+0x288>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a7d      	ldr	r2, [pc, #500]	; (8008c64 <HAL_RCC_OscConfig+0x288>)
 8008a6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008a72:	6013      	str	r3, [r2, #0]
 8008a74:	e01d      	b.n	8008ab2 <HAL_RCC_OscConfig+0xd6>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008a7e:	d10c      	bne.n	8008a9a <HAL_RCC_OscConfig+0xbe>
 8008a80:	4b78      	ldr	r3, [pc, #480]	; (8008c64 <HAL_RCC_OscConfig+0x288>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4a77      	ldr	r2, [pc, #476]	; (8008c64 <HAL_RCC_OscConfig+0x288>)
 8008a86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008a8a:	6013      	str	r3, [r2, #0]
 8008a8c:	4b75      	ldr	r3, [pc, #468]	; (8008c64 <HAL_RCC_OscConfig+0x288>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a74      	ldr	r2, [pc, #464]	; (8008c64 <HAL_RCC_OscConfig+0x288>)
 8008a92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a96:	6013      	str	r3, [r2, #0]
 8008a98:	e00b      	b.n	8008ab2 <HAL_RCC_OscConfig+0xd6>
 8008a9a:	4b72      	ldr	r3, [pc, #456]	; (8008c64 <HAL_RCC_OscConfig+0x288>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4a71      	ldr	r2, [pc, #452]	; (8008c64 <HAL_RCC_OscConfig+0x288>)
 8008aa0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008aa4:	6013      	str	r3, [r2, #0]
 8008aa6:	4b6f      	ldr	r3, [pc, #444]	; (8008c64 <HAL_RCC_OscConfig+0x288>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4a6e      	ldr	r2, [pc, #440]	; (8008c64 <HAL_RCC_OscConfig+0x288>)
 8008aac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008ab0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d013      	beq.n	8008ae2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008aba:	f7fb faf9 	bl	80040b0 <HAL_GetTick>
 8008abe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008ac0:	e008      	b.n	8008ad4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008ac2:	f7fb faf5 	bl	80040b0 <HAL_GetTick>
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aca:	1ad3      	subs	r3, r2, r3
 8008acc:	2b64      	cmp	r3, #100	; 0x64
 8008ace:	d901      	bls.n	8008ad4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8008ad0:	2303      	movs	r3, #3
 8008ad2:	e3aa      	b.n	800922a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008ad4:	4b63      	ldr	r3, [pc, #396]	; (8008c64 <HAL_RCC_OscConfig+0x288>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d0f0      	beq.n	8008ac2 <HAL_RCC_OscConfig+0xe6>
 8008ae0:	e014      	b.n	8008b0c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ae2:	f7fb fae5 	bl	80040b0 <HAL_GetTick>
 8008ae6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008ae8:	e008      	b.n	8008afc <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008aea:	f7fb fae1 	bl	80040b0 <HAL_GetTick>
 8008aee:	4602      	mov	r2, r0
 8008af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af2:	1ad3      	subs	r3, r2, r3
 8008af4:	2b64      	cmp	r3, #100	; 0x64
 8008af6:	d901      	bls.n	8008afc <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8008af8:	2303      	movs	r3, #3
 8008afa:	e396      	b.n	800922a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008afc:	4b59      	ldr	r3, [pc, #356]	; (8008c64 <HAL_RCC_OscConfig+0x288>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d1f0      	bne.n	8008aea <HAL_RCC_OscConfig+0x10e>
 8008b08:	e000      	b.n	8008b0c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b0a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f003 0302 	and.w	r3, r3, #2
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	f000 80cb 	beq.w	8008cb0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008b1a:	4b52      	ldr	r3, [pc, #328]	; (8008c64 <HAL_RCC_OscConfig+0x288>)
 8008b1c:	691b      	ldr	r3, [r3, #16]
 8008b1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008b22:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008b24:	4b4f      	ldr	r3, [pc, #316]	; (8008c64 <HAL_RCC_OscConfig+0x288>)
 8008b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b28:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008b2a:	6a3b      	ldr	r3, [r7, #32]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d007      	beq.n	8008b40 <HAL_RCC_OscConfig+0x164>
 8008b30:	6a3b      	ldr	r3, [r7, #32]
 8008b32:	2b18      	cmp	r3, #24
 8008b34:	d156      	bne.n	8008be4 <HAL_RCC_OscConfig+0x208>
 8008b36:	69fb      	ldr	r3, [r7, #28]
 8008b38:	f003 0303 	and.w	r3, r3, #3
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d151      	bne.n	8008be4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008b40:	4b48      	ldr	r3, [pc, #288]	; (8008c64 <HAL_RCC_OscConfig+0x288>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f003 0304 	and.w	r3, r3, #4
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d005      	beq.n	8008b58 <HAL_RCC_OscConfig+0x17c>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	68db      	ldr	r3, [r3, #12]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d101      	bne.n	8008b58 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8008b54:	2301      	movs	r3, #1
 8008b56:	e368      	b.n	800922a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008b58:	4b42      	ldr	r3, [pc, #264]	; (8008c64 <HAL_RCC_OscConfig+0x288>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f023 0219 	bic.w	r2, r3, #25
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	68db      	ldr	r3, [r3, #12]
 8008b64:	493f      	ldr	r1, [pc, #252]	; (8008c64 <HAL_RCC_OscConfig+0x288>)
 8008b66:	4313      	orrs	r3, r2
 8008b68:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008b6a:	f7fb faa1 	bl	80040b0 <HAL_GetTick>
 8008b6e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008b70:	e008      	b.n	8008b84 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008b72:	f7fb fa9d 	bl	80040b0 <HAL_GetTick>
 8008b76:	4602      	mov	r2, r0
 8008b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b7a:	1ad3      	subs	r3, r2, r3
 8008b7c:	2b02      	cmp	r3, #2
 8008b7e:	d901      	bls.n	8008b84 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8008b80:	2303      	movs	r3, #3
 8008b82:	e352      	b.n	800922a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008b84:	4b37      	ldr	r3, [pc, #220]	; (8008c64 <HAL_RCC_OscConfig+0x288>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f003 0304 	and.w	r3, r3, #4
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d0f0      	beq.n	8008b72 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b90:	f7fb fabe 	bl	8004110 <HAL_GetREVID>
 8008b94:	4603      	mov	r3, r0
 8008b96:	f241 0203 	movw	r2, #4099	; 0x1003
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d817      	bhi.n	8008bce <HAL_RCC_OscConfig+0x1f2>
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	691b      	ldr	r3, [r3, #16]
 8008ba2:	2b40      	cmp	r3, #64	; 0x40
 8008ba4:	d108      	bne.n	8008bb8 <HAL_RCC_OscConfig+0x1dc>
 8008ba6:	4b2f      	ldr	r3, [pc, #188]	; (8008c64 <HAL_RCC_OscConfig+0x288>)
 8008ba8:	685b      	ldr	r3, [r3, #4]
 8008baa:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008bae:	4a2d      	ldr	r2, [pc, #180]	; (8008c64 <HAL_RCC_OscConfig+0x288>)
 8008bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008bb4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008bb6:	e07b      	b.n	8008cb0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008bb8:	4b2a      	ldr	r3, [pc, #168]	; (8008c64 <HAL_RCC_OscConfig+0x288>)
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	691b      	ldr	r3, [r3, #16]
 8008bc4:	031b      	lsls	r3, r3, #12
 8008bc6:	4927      	ldr	r1, [pc, #156]	; (8008c64 <HAL_RCC_OscConfig+0x288>)
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008bcc:	e070      	b.n	8008cb0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008bce:	4b25      	ldr	r3, [pc, #148]	; (8008c64 <HAL_RCC_OscConfig+0x288>)
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	691b      	ldr	r3, [r3, #16]
 8008bda:	061b      	lsls	r3, r3, #24
 8008bdc:	4921      	ldr	r1, [pc, #132]	; (8008c64 <HAL_RCC_OscConfig+0x288>)
 8008bde:	4313      	orrs	r3, r2
 8008be0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008be2:	e065      	b.n	8008cb0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	68db      	ldr	r3, [r3, #12]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d048      	beq.n	8008c7e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008bec:	4b1d      	ldr	r3, [pc, #116]	; (8008c64 <HAL_RCC_OscConfig+0x288>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f023 0219 	bic.w	r2, r3, #25
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	68db      	ldr	r3, [r3, #12]
 8008bf8:	491a      	ldr	r1, [pc, #104]	; (8008c64 <HAL_RCC_OscConfig+0x288>)
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008bfe:	f7fb fa57 	bl	80040b0 <HAL_GetTick>
 8008c02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008c04:	e008      	b.n	8008c18 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008c06:	f7fb fa53 	bl	80040b0 <HAL_GetTick>
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c0e:	1ad3      	subs	r3, r2, r3
 8008c10:	2b02      	cmp	r3, #2
 8008c12:	d901      	bls.n	8008c18 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8008c14:	2303      	movs	r3, #3
 8008c16:	e308      	b.n	800922a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008c18:	4b12      	ldr	r3, [pc, #72]	; (8008c64 <HAL_RCC_OscConfig+0x288>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f003 0304 	and.w	r3, r3, #4
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d0f0      	beq.n	8008c06 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008c24:	f7fb fa74 	bl	8004110 <HAL_GetREVID>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	f241 0203 	movw	r2, #4099	; 0x1003
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d81a      	bhi.n	8008c68 <HAL_RCC_OscConfig+0x28c>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	691b      	ldr	r3, [r3, #16]
 8008c36:	2b40      	cmp	r3, #64	; 0x40
 8008c38:	d108      	bne.n	8008c4c <HAL_RCC_OscConfig+0x270>
 8008c3a:	4b0a      	ldr	r3, [pc, #40]	; (8008c64 <HAL_RCC_OscConfig+0x288>)
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008c42:	4a08      	ldr	r2, [pc, #32]	; (8008c64 <HAL_RCC_OscConfig+0x288>)
 8008c44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c48:	6053      	str	r3, [r2, #4]
 8008c4a:	e031      	b.n	8008cb0 <HAL_RCC_OscConfig+0x2d4>
 8008c4c:	4b05      	ldr	r3, [pc, #20]	; (8008c64 <HAL_RCC_OscConfig+0x288>)
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	691b      	ldr	r3, [r3, #16]
 8008c58:	031b      	lsls	r3, r3, #12
 8008c5a:	4902      	ldr	r1, [pc, #8]	; (8008c64 <HAL_RCC_OscConfig+0x288>)
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	604b      	str	r3, [r1, #4]
 8008c60:	e026      	b.n	8008cb0 <HAL_RCC_OscConfig+0x2d4>
 8008c62:	bf00      	nop
 8008c64:	58024400 	.word	0x58024400
 8008c68:	4b9a      	ldr	r3, [pc, #616]	; (8008ed4 <HAL_RCC_OscConfig+0x4f8>)
 8008c6a:	685b      	ldr	r3, [r3, #4]
 8008c6c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	691b      	ldr	r3, [r3, #16]
 8008c74:	061b      	lsls	r3, r3, #24
 8008c76:	4997      	ldr	r1, [pc, #604]	; (8008ed4 <HAL_RCC_OscConfig+0x4f8>)
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	604b      	str	r3, [r1, #4]
 8008c7c:	e018      	b.n	8008cb0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008c7e:	4b95      	ldr	r3, [pc, #596]	; (8008ed4 <HAL_RCC_OscConfig+0x4f8>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	4a94      	ldr	r2, [pc, #592]	; (8008ed4 <HAL_RCC_OscConfig+0x4f8>)
 8008c84:	f023 0301 	bic.w	r3, r3, #1
 8008c88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c8a:	f7fb fa11 	bl	80040b0 <HAL_GetTick>
 8008c8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008c90:	e008      	b.n	8008ca4 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008c92:	f7fb fa0d 	bl	80040b0 <HAL_GetTick>
 8008c96:	4602      	mov	r2, r0
 8008c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c9a:	1ad3      	subs	r3, r2, r3
 8008c9c:	2b02      	cmp	r3, #2
 8008c9e:	d901      	bls.n	8008ca4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008ca0:	2303      	movs	r3, #3
 8008ca2:	e2c2      	b.n	800922a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008ca4:	4b8b      	ldr	r3, [pc, #556]	; (8008ed4 <HAL_RCC_OscConfig+0x4f8>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f003 0304 	and.w	r3, r3, #4
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d1f0      	bne.n	8008c92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f003 0310 	and.w	r3, r3, #16
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	f000 80a9 	beq.w	8008e10 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008cbe:	4b85      	ldr	r3, [pc, #532]	; (8008ed4 <HAL_RCC_OscConfig+0x4f8>)
 8008cc0:	691b      	ldr	r3, [r3, #16]
 8008cc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008cc6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008cc8:	4b82      	ldr	r3, [pc, #520]	; (8008ed4 <HAL_RCC_OscConfig+0x4f8>)
 8008cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ccc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008cce:	69bb      	ldr	r3, [r7, #24]
 8008cd0:	2b08      	cmp	r3, #8
 8008cd2:	d007      	beq.n	8008ce4 <HAL_RCC_OscConfig+0x308>
 8008cd4:	69bb      	ldr	r3, [r7, #24]
 8008cd6:	2b18      	cmp	r3, #24
 8008cd8:	d13a      	bne.n	8008d50 <HAL_RCC_OscConfig+0x374>
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	f003 0303 	and.w	r3, r3, #3
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d135      	bne.n	8008d50 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008ce4:	4b7b      	ldr	r3, [pc, #492]	; (8008ed4 <HAL_RCC_OscConfig+0x4f8>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d005      	beq.n	8008cfc <HAL_RCC_OscConfig+0x320>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	69db      	ldr	r3, [r3, #28]
 8008cf4:	2b80      	cmp	r3, #128	; 0x80
 8008cf6:	d001      	beq.n	8008cfc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	e296      	b.n	800922a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008cfc:	f7fb fa08 	bl	8004110 <HAL_GetREVID>
 8008d00:	4603      	mov	r3, r0
 8008d02:	f241 0203 	movw	r2, #4099	; 0x1003
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d817      	bhi.n	8008d3a <HAL_RCC_OscConfig+0x35e>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6a1b      	ldr	r3, [r3, #32]
 8008d0e:	2b20      	cmp	r3, #32
 8008d10:	d108      	bne.n	8008d24 <HAL_RCC_OscConfig+0x348>
 8008d12:	4b70      	ldr	r3, [pc, #448]	; (8008ed4 <HAL_RCC_OscConfig+0x4f8>)
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008d1a:	4a6e      	ldr	r2, [pc, #440]	; (8008ed4 <HAL_RCC_OscConfig+0x4f8>)
 8008d1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d20:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008d22:	e075      	b.n	8008e10 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008d24:	4b6b      	ldr	r3, [pc, #428]	; (8008ed4 <HAL_RCC_OscConfig+0x4f8>)
 8008d26:	685b      	ldr	r3, [r3, #4]
 8008d28:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6a1b      	ldr	r3, [r3, #32]
 8008d30:	069b      	lsls	r3, r3, #26
 8008d32:	4968      	ldr	r1, [pc, #416]	; (8008ed4 <HAL_RCC_OscConfig+0x4f8>)
 8008d34:	4313      	orrs	r3, r2
 8008d36:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008d38:	e06a      	b.n	8008e10 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008d3a:	4b66      	ldr	r3, [pc, #408]	; (8008ed4 <HAL_RCC_OscConfig+0x4f8>)
 8008d3c:	68db      	ldr	r3, [r3, #12]
 8008d3e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6a1b      	ldr	r3, [r3, #32]
 8008d46:	061b      	lsls	r3, r3, #24
 8008d48:	4962      	ldr	r1, [pc, #392]	; (8008ed4 <HAL_RCC_OscConfig+0x4f8>)
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008d4e:	e05f      	b.n	8008e10 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	69db      	ldr	r3, [r3, #28]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d042      	beq.n	8008dde <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008d58:	4b5e      	ldr	r3, [pc, #376]	; (8008ed4 <HAL_RCC_OscConfig+0x4f8>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a5d      	ldr	r2, [pc, #372]	; (8008ed4 <HAL_RCC_OscConfig+0x4f8>)
 8008d5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d64:	f7fb f9a4 	bl	80040b0 <HAL_GetTick>
 8008d68:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008d6a:	e008      	b.n	8008d7e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008d6c:	f7fb f9a0 	bl	80040b0 <HAL_GetTick>
 8008d70:	4602      	mov	r2, r0
 8008d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d74:	1ad3      	subs	r3, r2, r3
 8008d76:	2b02      	cmp	r3, #2
 8008d78:	d901      	bls.n	8008d7e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008d7a:	2303      	movs	r3, #3
 8008d7c:	e255      	b.n	800922a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008d7e:	4b55      	ldr	r3, [pc, #340]	; (8008ed4 <HAL_RCC_OscConfig+0x4f8>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d0f0      	beq.n	8008d6c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008d8a:	f7fb f9c1 	bl	8004110 <HAL_GetREVID>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	f241 0203 	movw	r2, #4099	; 0x1003
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d817      	bhi.n	8008dc8 <HAL_RCC_OscConfig+0x3ec>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6a1b      	ldr	r3, [r3, #32]
 8008d9c:	2b20      	cmp	r3, #32
 8008d9e:	d108      	bne.n	8008db2 <HAL_RCC_OscConfig+0x3d6>
 8008da0:	4b4c      	ldr	r3, [pc, #304]	; (8008ed4 <HAL_RCC_OscConfig+0x4f8>)
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008da8:	4a4a      	ldr	r2, [pc, #296]	; (8008ed4 <HAL_RCC_OscConfig+0x4f8>)
 8008daa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008dae:	6053      	str	r3, [r2, #4]
 8008db0:	e02e      	b.n	8008e10 <HAL_RCC_OscConfig+0x434>
 8008db2:	4b48      	ldr	r3, [pc, #288]	; (8008ed4 <HAL_RCC_OscConfig+0x4f8>)
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6a1b      	ldr	r3, [r3, #32]
 8008dbe:	069b      	lsls	r3, r3, #26
 8008dc0:	4944      	ldr	r1, [pc, #272]	; (8008ed4 <HAL_RCC_OscConfig+0x4f8>)
 8008dc2:	4313      	orrs	r3, r2
 8008dc4:	604b      	str	r3, [r1, #4]
 8008dc6:	e023      	b.n	8008e10 <HAL_RCC_OscConfig+0x434>
 8008dc8:	4b42      	ldr	r3, [pc, #264]	; (8008ed4 <HAL_RCC_OscConfig+0x4f8>)
 8008dca:	68db      	ldr	r3, [r3, #12]
 8008dcc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6a1b      	ldr	r3, [r3, #32]
 8008dd4:	061b      	lsls	r3, r3, #24
 8008dd6:	493f      	ldr	r1, [pc, #252]	; (8008ed4 <HAL_RCC_OscConfig+0x4f8>)
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	60cb      	str	r3, [r1, #12]
 8008ddc:	e018      	b.n	8008e10 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008dde:	4b3d      	ldr	r3, [pc, #244]	; (8008ed4 <HAL_RCC_OscConfig+0x4f8>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	4a3c      	ldr	r2, [pc, #240]	; (8008ed4 <HAL_RCC_OscConfig+0x4f8>)
 8008de4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008de8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dea:	f7fb f961 	bl	80040b0 <HAL_GetTick>
 8008dee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008df0:	e008      	b.n	8008e04 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008df2:	f7fb f95d 	bl	80040b0 <HAL_GetTick>
 8008df6:	4602      	mov	r2, r0
 8008df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dfa:	1ad3      	subs	r3, r2, r3
 8008dfc:	2b02      	cmp	r3, #2
 8008dfe:	d901      	bls.n	8008e04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008e00:	2303      	movs	r3, #3
 8008e02:	e212      	b.n	800922a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008e04:	4b33      	ldr	r3, [pc, #204]	; (8008ed4 <HAL_RCC_OscConfig+0x4f8>)
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d1f0      	bne.n	8008df2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f003 0308 	and.w	r3, r3, #8
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d036      	beq.n	8008e8a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	695b      	ldr	r3, [r3, #20]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d019      	beq.n	8008e58 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008e24:	4b2b      	ldr	r3, [pc, #172]	; (8008ed4 <HAL_RCC_OscConfig+0x4f8>)
 8008e26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e28:	4a2a      	ldr	r2, [pc, #168]	; (8008ed4 <HAL_RCC_OscConfig+0x4f8>)
 8008e2a:	f043 0301 	orr.w	r3, r3, #1
 8008e2e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e30:	f7fb f93e 	bl	80040b0 <HAL_GetTick>
 8008e34:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008e36:	e008      	b.n	8008e4a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008e38:	f7fb f93a 	bl	80040b0 <HAL_GetTick>
 8008e3c:	4602      	mov	r2, r0
 8008e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e40:	1ad3      	subs	r3, r2, r3
 8008e42:	2b02      	cmp	r3, #2
 8008e44:	d901      	bls.n	8008e4a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008e46:	2303      	movs	r3, #3
 8008e48:	e1ef      	b.n	800922a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008e4a:	4b22      	ldr	r3, [pc, #136]	; (8008ed4 <HAL_RCC_OscConfig+0x4f8>)
 8008e4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e4e:	f003 0302 	and.w	r3, r3, #2
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d0f0      	beq.n	8008e38 <HAL_RCC_OscConfig+0x45c>
 8008e56:	e018      	b.n	8008e8a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008e58:	4b1e      	ldr	r3, [pc, #120]	; (8008ed4 <HAL_RCC_OscConfig+0x4f8>)
 8008e5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e5c:	4a1d      	ldr	r2, [pc, #116]	; (8008ed4 <HAL_RCC_OscConfig+0x4f8>)
 8008e5e:	f023 0301 	bic.w	r3, r3, #1
 8008e62:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e64:	f7fb f924 	bl	80040b0 <HAL_GetTick>
 8008e68:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008e6a:	e008      	b.n	8008e7e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008e6c:	f7fb f920 	bl	80040b0 <HAL_GetTick>
 8008e70:	4602      	mov	r2, r0
 8008e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e74:	1ad3      	subs	r3, r2, r3
 8008e76:	2b02      	cmp	r3, #2
 8008e78:	d901      	bls.n	8008e7e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008e7a:	2303      	movs	r3, #3
 8008e7c:	e1d5      	b.n	800922a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008e7e:	4b15      	ldr	r3, [pc, #84]	; (8008ed4 <HAL_RCC_OscConfig+0x4f8>)
 8008e80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e82:	f003 0302 	and.w	r3, r3, #2
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d1f0      	bne.n	8008e6c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f003 0320 	and.w	r3, r3, #32
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d039      	beq.n	8008f0a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	699b      	ldr	r3, [r3, #24]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d01c      	beq.n	8008ed8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008e9e:	4b0d      	ldr	r3, [pc, #52]	; (8008ed4 <HAL_RCC_OscConfig+0x4f8>)
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	4a0c      	ldr	r2, [pc, #48]	; (8008ed4 <HAL_RCC_OscConfig+0x4f8>)
 8008ea4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008ea8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008eaa:	f7fb f901 	bl	80040b0 <HAL_GetTick>
 8008eae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008eb0:	e008      	b.n	8008ec4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008eb2:	f7fb f8fd 	bl	80040b0 <HAL_GetTick>
 8008eb6:	4602      	mov	r2, r0
 8008eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eba:	1ad3      	subs	r3, r2, r3
 8008ebc:	2b02      	cmp	r3, #2
 8008ebe:	d901      	bls.n	8008ec4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008ec0:	2303      	movs	r3, #3
 8008ec2:	e1b2      	b.n	800922a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008ec4:	4b03      	ldr	r3, [pc, #12]	; (8008ed4 <HAL_RCC_OscConfig+0x4f8>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d0f0      	beq.n	8008eb2 <HAL_RCC_OscConfig+0x4d6>
 8008ed0:	e01b      	b.n	8008f0a <HAL_RCC_OscConfig+0x52e>
 8008ed2:	bf00      	nop
 8008ed4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008ed8:	4b9b      	ldr	r3, [pc, #620]	; (8009148 <HAL_RCC_OscConfig+0x76c>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4a9a      	ldr	r2, [pc, #616]	; (8009148 <HAL_RCC_OscConfig+0x76c>)
 8008ede:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ee2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008ee4:	f7fb f8e4 	bl	80040b0 <HAL_GetTick>
 8008ee8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008eea:	e008      	b.n	8008efe <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008eec:	f7fb f8e0 	bl	80040b0 <HAL_GetTick>
 8008ef0:	4602      	mov	r2, r0
 8008ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef4:	1ad3      	subs	r3, r2, r3
 8008ef6:	2b02      	cmp	r3, #2
 8008ef8:	d901      	bls.n	8008efe <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008efa:	2303      	movs	r3, #3
 8008efc:	e195      	b.n	800922a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008efe:	4b92      	ldr	r3, [pc, #584]	; (8009148 <HAL_RCC_OscConfig+0x76c>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d1f0      	bne.n	8008eec <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f003 0304 	and.w	r3, r3, #4
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	f000 8081 	beq.w	800901a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008f18:	4b8c      	ldr	r3, [pc, #560]	; (800914c <HAL_RCC_OscConfig+0x770>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4a8b      	ldr	r2, [pc, #556]	; (800914c <HAL_RCC_OscConfig+0x770>)
 8008f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f22:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008f24:	f7fb f8c4 	bl	80040b0 <HAL_GetTick>
 8008f28:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008f2a:	e008      	b.n	8008f3e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008f2c:	f7fb f8c0 	bl	80040b0 <HAL_GetTick>
 8008f30:	4602      	mov	r2, r0
 8008f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f34:	1ad3      	subs	r3, r2, r3
 8008f36:	2b64      	cmp	r3, #100	; 0x64
 8008f38:	d901      	bls.n	8008f3e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008f3a:	2303      	movs	r3, #3
 8008f3c:	e175      	b.n	800922a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008f3e:	4b83      	ldr	r3, [pc, #524]	; (800914c <HAL_RCC_OscConfig+0x770>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d0f0      	beq.n	8008f2c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	689b      	ldr	r3, [r3, #8]
 8008f4e:	2b01      	cmp	r3, #1
 8008f50:	d106      	bne.n	8008f60 <HAL_RCC_OscConfig+0x584>
 8008f52:	4b7d      	ldr	r3, [pc, #500]	; (8009148 <HAL_RCC_OscConfig+0x76c>)
 8008f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f56:	4a7c      	ldr	r2, [pc, #496]	; (8009148 <HAL_RCC_OscConfig+0x76c>)
 8008f58:	f043 0301 	orr.w	r3, r3, #1
 8008f5c:	6713      	str	r3, [r2, #112]	; 0x70
 8008f5e:	e02d      	b.n	8008fbc <HAL_RCC_OscConfig+0x5e0>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	689b      	ldr	r3, [r3, #8]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d10c      	bne.n	8008f82 <HAL_RCC_OscConfig+0x5a6>
 8008f68:	4b77      	ldr	r3, [pc, #476]	; (8009148 <HAL_RCC_OscConfig+0x76c>)
 8008f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f6c:	4a76      	ldr	r2, [pc, #472]	; (8009148 <HAL_RCC_OscConfig+0x76c>)
 8008f6e:	f023 0301 	bic.w	r3, r3, #1
 8008f72:	6713      	str	r3, [r2, #112]	; 0x70
 8008f74:	4b74      	ldr	r3, [pc, #464]	; (8009148 <HAL_RCC_OscConfig+0x76c>)
 8008f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f78:	4a73      	ldr	r2, [pc, #460]	; (8009148 <HAL_RCC_OscConfig+0x76c>)
 8008f7a:	f023 0304 	bic.w	r3, r3, #4
 8008f7e:	6713      	str	r3, [r2, #112]	; 0x70
 8008f80:	e01c      	b.n	8008fbc <HAL_RCC_OscConfig+0x5e0>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	689b      	ldr	r3, [r3, #8]
 8008f86:	2b05      	cmp	r3, #5
 8008f88:	d10c      	bne.n	8008fa4 <HAL_RCC_OscConfig+0x5c8>
 8008f8a:	4b6f      	ldr	r3, [pc, #444]	; (8009148 <HAL_RCC_OscConfig+0x76c>)
 8008f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f8e:	4a6e      	ldr	r2, [pc, #440]	; (8009148 <HAL_RCC_OscConfig+0x76c>)
 8008f90:	f043 0304 	orr.w	r3, r3, #4
 8008f94:	6713      	str	r3, [r2, #112]	; 0x70
 8008f96:	4b6c      	ldr	r3, [pc, #432]	; (8009148 <HAL_RCC_OscConfig+0x76c>)
 8008f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f9a:	4a6b      	ldr	r2, [pc, #428]	; (8009148 <HAL_RCC_OscConfig+0x76c>)
 8008f9c:	f043 0301 	orr.w	r3, r3, #1
 8008fa0:	6713      	str	r3, [r2, #112]	; 0x70
 8008fa2:	e00b      	b.n	8008fbc <HAL_RCC_OscConfig+0x5e0>
 8008fa4:	4b68      	ldr	r3, [pc, #416]	; (8009148 <HAL_RCC_OscConfig+0x76c>)
 8008fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fa8:	4a67      	ldr	r2, [pc, #412]	; (8009148 <HAL_RCC_OscConfig+0x76c>)
 8008faa:	f023 0301 	bic.w	r3, r3, #1
 8008fae:	6713      	str	r3, [r2, #112]	; 0x70
 8008fb0:	4b65      	ldr	r3, [pc, #404]	; (8009148 <HAL_RCC_OscConfig+0x76c>)
 8008fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fb4:	4a64      	ldr	r2, [pc, #400]	; (8009148 <HAL_RCC_OscConfig+0x76c>)
 8008fb6:	f023 0304 	bic.w	r3, r3, #4
 8008fba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	689b      	ldr	r3, [r3, #8]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d015      	beq.n	8008ff0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fc4:	f7fb f874 	bl	80040b0 <HAL_GetTick>
 8008fc8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008fca:	e00a      	b.n	8008fe2 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008fcc:	f7fb f870 	bl	80040b0 <HAL_GetTick>
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd4:	1ad3      	subs	r3, r2, r3
 8008fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d901      	bls.n	8008fe2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008fde:	2303      	movs	r3, #3
 8008fe0:	e123      	b.n	800922a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008fe2:	4b59      	ldr	r3, [pc, #356]	; (8009148 <HAL_RCC_OscConfig+0x76c>)
 8008fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fe6:	f003 0302 	and.w	r3, r3, #2
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d0ee      	beq.n	8008fcc <HAL_RCC_OscConfig+0x5f0>
 8008fee:	e014      	b.n	800901a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ff0:	f7fb f85e 	bl	80040b0 <HAL_GetTick>
 8008ff4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008ff6:	e00a      	b.n	800900e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ff8:	f7fb f85a 	bl	80040b0 <HAL_GetTick>
 8008ffc:	4602      	mov	r2, r0
 8008ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009000:	1ad3      	subs	r3, r2, r3
 8009002:	f241 3288 	movw	r2, #5000	; 0x1388
 8009006:	4293      	cmp	r3, r2
 8009008:	d901      	bls.n	800900e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800900a:	2303      	movs	r3, #3
 800900c:	e10d      	b.n	800922a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800900e:	4b4e      	ldr	r3, [pc, #312]	; (8009148 <HAL_RCC_OscConfig+0x76c>)
 8009010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009012:	f003 0302 	and.w	r3, r3, #2
 8009016:	2b00      	cmp	r3, #0
 8009018:	d1ee      	bne.n	8008ff8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800901e:	2b00      	cmp	r3, #0
 8009020:	f000 8102 	beq.w	8009228 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009024:	4b48      	ldr	r3, [pc, #288]	; (8009148 <HAL_RCC_OscConfig+0x76c>)
 8009026:	691b      	ldr	r3, [r3, #16]
 8009028:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800902c:	2b18      	cmp	r3, #24
 800902e:	f000 80bd 	beq.w	80091ac <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009036:	2b02      	cmp	r3, #2
 8009038:	f040 809e 	bne.w	8009178 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800903c:	4b42      	ldr	r3, [pc, #264]	; (8009148 <HAL_RCC_OscConfig+0x76c>)
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a41      	ldr	r2, [pc, #260]	; (8009148 <HAL_RCC_OscConfig+0x76c>)
 8009042:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009046:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009048:	f7fb f832 	bl	80040b0 <HAL_GetTick>
 800904c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800904e:	e008      	b.n	8009062 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009050:	f7fb f82e 	bl	80040b0 <HAL_GetTick>
 8009054:	4602      	mov	r2, r0
 8009056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009058:	1ad3      	subs	r3, r2, r3
 800905a:	2b02      	cmp	r3, #2
 800905c:	d901      	bls.n	8009062 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800905e:	2303      	movs	r3, #3
 8009060:	e0e3      	b.n	800922a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009062:	4b39      	ldr	r3, [pc, #228]	; (8009148 <HAL_RCC_OscConfig+0x76c>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800906a:	2b00      	cmp	r3, #0
 800906c:	d1f0      	bne.n	8009050 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800906e:	4b36      	ldr	r3, [pc, #216]	; (8009148 <HAL_RCC_OscConfig+0x76c>)
 8009070:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009072:	4b37      	ldr	r3, [pc, #220]	; (8009150 <HAL_RCC_OscConfig+0x774>)
 8009074:	4013      	ands	r3, r2
 8009076:	687a      	ldr	r2, [r7, #4]
 8009078:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800907a:	687a      	ldr	r2, [r7, #4]
 800907c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800907e:	0112      	lsls	r2, r2, #4
 8009080:	430a      	orrs	r2, r1
 8009082:	4931      	ldr	r1, [pc, #196]	; (8009148 <HAL_RCC_OscConfig+0x76c>)
 8009084:	4313      	orrs	r3, r2
 8009086:	628b      	str	r3, [r1, #40]	; 0x28
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800908c:	3b01      	subs	r3, #1
 800908e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009096:	3b01      	subs	r3, #1
 8009098:	025b      	lsls	r3, r3, #9
 800909a:	b29b      	uxth	r3, r3
 800909c:	431a      	orrs	r2, r3
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090a2:	3b01      	subs	r3, #1
 80090a4:	041b      	lsls	r3, r3, #16
 80090a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80090aa:	431a      	orrs	r2, r3
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090b0:	3b01      	subs	r3, #1
 80090b2:	061b      	lsls	r3, r3, #24
 80090b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80090b8:	4923      	ldr	r1, [pc, #140]	; (8009148 <HAL_RCC_OscConfig+0x76c>)
 80090ba:	4313      	orrs	r3, r2
 80090bc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80090be:	4b22      	ldr	r3, [pc, #136]	; (8009148 <HAL_RCC_OscConfig+0x76c>)
 80090c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090c2:	4a21      	ldr	r2, [pc, #132]	; (8009148 <HAL_RCC_OscConfig+0x76c>)
 80090c4:	f023 0301 	bic.w	r3, r3, #1
 80090c8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80090ca:	4b1f      	ldr	r3, [pc, #124]	; (8009148 <HAL_RCC_OscConfig+0x76c>)
 80090cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090ce:	4b21      	ldr	r3, [pc, #132]	; (8009154 <HAL_RCC_OscConfig+0x778>)
 80090d0:	4013      	ands	r3, r2
 80090d2:	687a      	ldr	r2, [r7, #4]
 80090d4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80090d6:	00d2      	lsls	r2, r2, #3
 80090d8:	491b      	ldr	r1, [pc, #108]	; (8009148 <HAL_RCC_OscConfig+0x76c>)
 80090da:	4313      	orrs	r3, r2
 80090dc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80090de:	4b1a      	ldr	r3, [pc, #104]	; (8009148 <HAL_RCC_OscConfig+0x76c>)
 80090e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e2:	f023 020c 	bic.w	r2, r3, #12
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ea:	4917      	ldr	r1, [pc, #92]	; (8009148 <HAL_RCC_OscConfig+0x76c>)
 80090ec:	4313      	orrs	r3, r2
 80090ee:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80090f0:	4b15      	ldr	r3, [pc, #84]	; (8009148 <HAL_RCC_OscConfig+0x76c>)
 80090f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090f4:	f023 0202 	bic.w	r2, r3, #2
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090fc:	4912      	ldr	r1, [pc, #72]	; (8009148 <HAL_RCC_OscConfig+0x76c>)
 80090fe:	4313      	orrs	r3, r2
 8009100:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009102:	4b11      	ldr	r3, [pc, #68]	; (8009148 <HAL_RCC_OscConfig+0x76c>)
 8009104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009106:	4a10      	ldr	r2, [pc, #64]	; (8009148 <HAL_RCC_OscConfig+0x76c>)
 8009108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800910c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800910e:	4b0e      	ldr	r3, [pc, #56]	; (8009148 <HAL_RCC_OscConfig+0x76c>)
 8009110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009112:	4a0d      	ldr	r2, [pc, #52]	; (8009148 <HAL_RCC_OscConfig+0x76c>)
 8009114:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009118:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800911a:	4b0b      	ldr	r3, [pc, #44]	; (8009148 <HAL_RCC_OscConfig+0x76c>)
 800911c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800911e:	4a0a      	ldr	r2, [pc, #40]	; (8009148 <HAL_RCC_OscConfig+0x76c>)
 8009120:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009124:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8009126:	4b08      	ldr	r3, [pc, #32]	; (8009148 <HAL_RCC_OscConfig+0x76c>)
 8009128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800912a:	4a07      	ldr	r2, [pc, #28]	; (8009148 <HAL_RCC_OscConfig+0x76c>)
 800912c:	f043 0301 	orr.w	r3, r3, #1
 8009130:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009132:	4b05      	ldr	r3, [pc, #20]	; (8009148 <HAL_RCC_OscConfig+0x76c>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	4a04      	ldr	r2, [pc, #16]	; (8009148 <HAL_RCC_OscConfig+0x76c>)
 8009138:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800913c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800913e:	f7fa ffb7 	bl	80040b0 <HAL_GetTick>
 8009142:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009144:	e011      	b.n	800916a <HAL_RCC_OscConfig+0x78e>
 8009146:	bf00      	nop
 8009148:	58024400 	.word	0x58024400
 800914c:	58024800 	.word	0x58024800
 8009150:	fffffc0c 	.word	0xfffffc0c
 8009154:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009158:	f7fa ffaa 	bl	80040b0 <HAL_GetTick>
 800915c:	4602      	mov	r2, r0
 800915e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009160:	1ad3      	subs	r3, r2, r3
 8009162:	2b02      	cmp	r3, #2
 8009164:	d901      	bls.n	800916a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8009166:	2303      	movs	r3, #3
 8009168:	e05f      	b.n	800922a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800916a:	4b32      	ldr	r3, [pc, #200]	; (8009234 <HAL_RCC_OscConfig+0x858>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009172:	2b00      	cmp	r3, #0
 8009174:	d0f0      	beq.n	8009158 <HAL_RCC_OscConfig+0x77c>
 8009176:	e057      	b.n	8009228 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009178:	4b2e      	ldr	r3, [pc, #184]	; (8009234 <HAL_RCC_OscConfig+0x858>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	4a2d      	ldr	r2, [pc, #180]	; (8009234 <HAL_RCC_OscConfig+0x858>)
 800917e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009182:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009184:	f7fa ff94 	bl	80040b0 <HAL_GetTick>
 8009188:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800918a:	e008      	b.n	800919e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800918c:	f7fa ff90 	bl	80040b0 <HAL_GetTick>
 8009190:	4602      	mov	r2, r0
 8009192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009194:	1ad3      	subs	r3, r2, r3
 8009196:	2b02      	cmp	r3, #2
 8009198:	d901      	bls.n	800919e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800919a:	2303      	movs	r3, #3
 800919c:	e045      	b.n	800922a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800919e:	4b25      	ldr	r3, [pc, #148]	; (8009234 <HAL_RCC_OscConfig+0x858>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d1f0      	bne.n	800918c <HAL_RCC_OscConfig+0x7b0>
 80091aa:	e03d      	b.n	8009228 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80091ac:	4b21      	ldr	r3, [pc, #132]	; (8009234 <HAL_RCC_OscConfig+0x858>)
 80091ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091b0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80091b2:	4b20      	ldr	r3, [pc, #128]	; (8009234 <HAL_RCC_OscConfig+0x858>)
 80091b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091b6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091bc:	2b01      	cmp	r3, #1
 80091be:	d031      	beq.n	8009224 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	f003 0203 	and.w	r2, r3, #3
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d12a      	bne.n	8009224 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	091b      	lsrs	r3, r3, #4
 80091d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80091da:	429a      	cmp	r2, r3
 80091dc:	d122      	bne.n	8009224 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091e8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80091ea:	429a      	cmp	r2, r3
 80091ec:	d11a      	bne.n	8009224 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	0a5b      	lsrs	r3, r3, #9
 80091f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091fa:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80091fc:	429a      	cmp	r2, r3
 80091fe:	d111      	bne.n	8009224 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	0c1b      	lsrs	r3, r3, #16
 8009204:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800920c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800920e:	429a      	cmp	r2, r3
 8009210:	d108      	bne.n	8009224 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	0e1b      	lsrs	r3, r3, #24
 8009216:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800921e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009220:	429a      	cmp	r2, r3
 8009222:	d001      	beq.n	8009228 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8009224:	2301      	movs	r3, #1
 8009226:	e000      	b.n	800922a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8009228:	2300      	movs	r3, #0
}
 800922a:	4618      	mov	r0, r3
 800922c:	3730      	adds	r7, #48	; 0x30
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}
 8009232:	bf00      	nop
 8009234:	58024400 	.word	0x58024400

08009238 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b086      	sub	sp, #24
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d101      	bne.n	800924c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009248:	2301      	movs	r3, #1
 800924a:	e19c      	b.n	8009586 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800924c:	4b8a      	ldr	r3, [pc, #552]	; (8009478 <HAL_RCC_ClockConfig+0x240>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f003 030f 	and.w	r3, r3, #15
 8009254:	683a      	ldr	r2, [r7, #0]
 8009256:	429a      	cmp	r2, r3
 8009258:	d910      	bls.n	800927c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800925a:	4b87      	ldr	r3, [pc, #540]	; (8009478 <HAL_RCC_ClockConfig+0x240>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f023 020f 	bic.w	r2, r3, #15
 8009262:	4985      	ldr	r1, [pc, #532]	; (8009478 <HAL_RCC_ClockConfig+0x240>)
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	4313      	orrs	r3, r2
 8009268:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800926a:	4b83      	ldr	r3, [pc, #524]	; (8009478 <HAL_RCC_ClockConfig+0x240>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f003 030f 	and.w	r3, r3, #15
 8009272:	683a      	ldr	r2, [r7, #0]
 8009274:	429a      	cmp	r2, r3
 8009276:	d001      	beq.n	800927c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009278:	2301      	movs	r3, #1
 800927a:	e184      	b.n	8009586 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f003 0304 	and.w	r3, r3, #4
 8009284:	2b00      	cmp	r3, #0
 8009286:	d010      	beq.n	80092aa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	691a      	ldr	r2, [r3, #16]
 800928c:	4b7b      	ldr	r3, [pc, #492]	; (800947c <HAL_RCC_ClockConfig+0x244>)
 800928e:	699b      	ldr	r3, [r3, #24]
 8009290:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009294:	429a      	cmp	r2, r3
 8009296:	d908      	bls.n	80092aa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009298:	4b78      	ldr	r3, [pc, #480]	; (800947c <HAL_RCC_ClockConfig+0x244>)
 800929a:	699b      	ldr	r3, [r3, #24]
 800929c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	691b      	ldr	r3, [r3, #16]
 80092a4:	4975      	ldr	r1, [pc, #468]	; (800947c <HAL_RCC_ClockConfig+0x244>)
 80092a6:	4313      	orrs	r3, r2
 80092a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f003 0308 	and.w	r3, r3, #8
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d010      	beq.n	80092d8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	695a      	ldr	r2, [r3, #20]
 80092ba:	4b70      	ldr	r3, [pc, #448]	; (800947c <HAL_RCC_ClockConfig+0x244>)
 80092bc:	69db      	ldr	r3, [r3, #28]
 80092be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d908      	bls.n	80092d8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80092c6:	4b6d      	ldr	r3, [pc, #436]	; (800947c <HAL_RCC_ClockConfig+0x244>)
 80092c8:	69db      	ldr	r3, [r3, #28]
 80092ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	695b      	ldr	r3, [r3, #20]
 80092d2:	496a      	ldr	r1, [pc, #424]	; (800947c <HAL_RCC_ClockConfig+0x244>)
 80092d4:	4313      	orrs	r3, r2
 80092d6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f003 0310 	and.w	r3, r3, #16
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d010      	beq.n	8009306 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	699a      	ldr	r2, [r3, #24]
 80092e8:	4b64      	ldr	r3, [pc, #400]	; (800947c <HAL_RCC_ClockConfig+0x244>)
 80092ea:	69db      	ldr	r3, [r3, #28]
 80092ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80092f0:	429a      	cmp	r2, r3
 80092f2:	d908      	bls.n	8009306 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80092f4:	4b61      	ldr	r3, [pc, #388]	; (800947c <HAL_RCC_ClockConfig+0x244>)
 80092f6:	69db      	ldr	r3, [r3, #28]
 80092f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	699b      	ldr	r3, [r3, #24]
 8009300:	495e      	ldr	r1, [pc, #376]	; (800947c <HAL_RCC_ClockConfig+0x244>)
 8009302:	4313      	orrs	r3, r2
 8009304:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f003 0320 	and.w	r3, r3, #32
 800930e:	2b00      	cmp	r3, #0
 8009310:	d010      	beq.n	8009334 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	69da      	ldr	r2, [r3, #28]
 8009316:	4b59      	ldr	r3, [pc, #356]	; (800947c <HAL_RCC_ClockConfig+0x244>)
 8009318:	6a1b      	ldr	r3, [r3, #32]
 800931a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800931e:	429a      	cmp	r2, r3
 8009320:	d908      	bls.n	8009334 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009322:	4b56      	ldr	r3, [pc, #344]	; (800947c <HAL_RCC_ClockConfig+0x244>)
 8009324:	6a1b      	ldr	r3, [r3, #32]
 8009326:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	69db      	ldr	r3, [r3, #28]
 800932e:	4953      	ldr	r1, [pc, #332]	; (800947c <HAL_RCC_ClockConfig+0x244>)
 8009330:	4313      	orrs	r3, r2
 8009332:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f003 0302 	and.w	r3, r3, #2
 800933c:	2b00      	cmp	r3, #0
 800933e:	d010      	beq.n	8009362 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	68da      	ldr	r2, [r3, #12]
 8009344:	4b4d      	ldr	r3, [pc, #308]	; (800947c <HAL_RCC_ClockConfig+0x244>)
 8009346:	699b      	ldr	r3, [r3, #24]
 8009348:	f003 030f 	and.w	r3, r3, #15
 800934c:	429a      	cmp	r2, r3
 800934e:	d908      	bls.n	8009362 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009350:	4b4a      	ldr	r3, [pc, #296]	; (800947c <HAL_RCC_ClockConfig+0x244>)
 8009352:	699b      	ldr	r3, [r3, #24]
 8009354:	f023 020f 	bic.w	r2, r3, #15
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	68db      	ldr	r3, [r3, #12]
 800935c:	4947      	ldr	r1, [pc, #284]	; (800947c <HAL_RCC_ClockConfig+0x244>)
 800935e:	4313      	orrs	r3, r2
 8009360:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f003 0301 	and.w	r3, r3, #1
 800936a:	2b00      	cmp	r3, #0
 800936c:	d055      	beq.n	800941a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800936e:	4b43      	ldr	r3, [pc, #268]	; (800947c <HAL_RCC_ClockConfig+0x244>)
 8009370:	699b      	ldr	r3, [r3, #24]
 8009372:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	689b      	ldr	r3, [r3, #8]
 800937a:	4940      	ldr	r1, [pc, #256]	; (800947c <HAL_RCC_ClockConfig+0x244>)
 800937c:	4313      	orrs	r3, r2
 800937e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	685b      	ldr	r3, [r3, #4]
 8009384:	2b02      	cmp	r3, #2
 8009386:	d107      	bne.n	8009398 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009388:	4b3c      	ldr	r3, [pc, #240]	; (800947c <HAL_RCC_ClockConfig+0x244>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009390:	2b00      	cmp	r3, #0
 8009392:	d121      	bne.n	80093d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8009394:	2301      	movs	r3, #1
 8009396:	e0f6      	b.n	8009586 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	685b      	ldr	r3, [r3, #4]
 800939c:	2b03      	cmp	r3, #3
 800939e:	d107      	bne.n	80093b0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80093a0:	4b36      	ldr	r3, [pc, #216]	; (800947c <HAL_RCC_ClockConfig+0x244>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d115      	bne.n	80093d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80093ac:	2301      	movs	r3, #1
 80093ae:	e0ea      	b.n	8009586 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	685b      	ldr	r3, [r3, #4]
 80093b4:	2b01      	cmp	r3, #1
 80093b6:	d107      	bne.n	80093c8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80093b8:	4b30      	ldr	r3, [pc, #192]	; (800947c <HAL_RCC_ClockConfig+0x244>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d109      	bne.n	80093d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80093c4:	2301      	movs	r3, #1
 80093c6:	e0de      	b.n	8009586 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80093c8:	4b2c      	ldr	r3, [pc, #176]	; (800947c <HAL_RCC_ClockConfig+0x244>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f003 0304 	and.w	r3, r3, #4
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d101      	bne.n	80093d8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80093d4:	2301      	movs	r3, #1
 80093d6:	e0d6      	b.n	8009586 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80093d8:	4b28      	ldr	r3, [pc, #160]	; (800947c <HAL_RCC_ClockConfig+0x244>)
 80093da:	691b      	ldr	r3, [r3, #16]
 80093dc:	f023 0207 	bic.w	r2, r3, #7
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	685b      	ldr	r3, [r3, #4]
 80093e4:	4925      	ldr	r1, [pc, #148]	; (800947c <HAL_RCC_ClockConfig+0x244>)
 80093e6:	4313      	orrs	r3, r2
 80093e8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80093ea:	f7fa fe61 	bl	80040b0 <HAL_GetTick>
 80093ee:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80093f0:	e00a      	b.n	8009408 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80093f2:	f7fa fe5d 	bl	80040b0 <HAL_GetTick>
 80093f6:	4602      	mov	r2, r0
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	1ad3      	subs	r3, r2, r3
 80093fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009400:	4293      	cmp	r3, r2
 8009402:	d901      	bls.n	8009408 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8009404:	2303      	movs	r3, #3
 8009406:	e0be      	b.n	8009586 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009408:	4b1c      	ldr	r3, [pc, #112]	; (800947c <HAL_RCC_ClockConfig+0x244>)
 800940a:	691b      	ldr	r3, [r3, #16]
 800940c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	685b      	ldr	r3, [r3, #4]
 8009414:	00db      	lsls	r3, r3, #3
 8009416:	429a      	cmp	r2, r3
 8009418:	d1eb      	bne.n	80093f2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f003 0302 	and.w	r3, r3, #2
 8009422:	2b00      	cmp	r3, #0
 8009424:	d010      	beq.n	8009448 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	68da      	ldr	r2, [r3, #12]
 800942a:	4b14      	ldr	r3, [pc, #80]	; (800947c <HAL_RCC_ClockConfig+0x244>)
 800942c:	699b      	ldr	r3, [r3, #24]
 800942e:	f003 030f 	and.w	r3, r3, #15
 8009432:	429a      	cmp	r2, r3
 8009434:	d208      	bcs.n	8009448 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009436:	4b11      	ldr	r3, [pc, #68]	; (800947c <HAL_RCC_ClockConfig+0x244>)
 8009438:	699b      	ldr	r3, [r3, #24]
 800943a:	f023 020f 	bic.w	r2, r3, #15
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	68db      	ldr	r3, [r3, #12]
 8009442:	490e      	ldr	r1, [pc, #56]	; (800947c <HAL_RCC_ClockConfig+0x244>)
 8009444:	4313      	orrs	r3, r2
 8009446:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009448:	4b0b      	ldr	r3, [pc, #44]	; (8009478 <HAL_RCC_ClockConfig+0x240>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f003 030f 	and.w	r3, r3, #15
 8009450:	683a      	ldr	r2, [r7, #0]
 8009452:	429a      	cmp	r2, r3
 8009454:	d214      	bcs.n	8009480 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009456:	4b08      	ldr	r3, [pc, #32]	; (8009478 <HAL_RCC_ClockConfig+0x240>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f023 020f 	bic.w	r2, r3, #15
 800945e:	4906      	ldr	r1, [pc, #24]	; (8009478 <HAL_RCC_ClockConfig+0x240>)
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	4313      	orrs	r3, r2
 8009464:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009466:	4b04      	ldr	r3, [pc, #16]	; (8009478 <HAL_RCC_ClockConfig+0x240>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f003 030f 	and.w	r3, r3, #15
 800946e:	683a      	ldr	r2, [r7, #0]
 8009470:	429a      	cmp	r2, r3
 8009472:	d005      	beq.n	8009480 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009474:	2301      	movs	r3, #1
 8009476:	e086      	b.n	8009586 <HAL_RCC_ClockConfig+0x34e>
 8009478:	52002000 	.word	0x52002000
 800947c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f003 0304 	and.w	r3, r3, #4
 8009488:	2b00      	cmp	r3, #0
 800948a:	d010      	beq.n	80094ae <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	691a      	ldr	r2, [r3, #16]
 8009490:	4b3f      	ldr	r3, [pc, #252]	; (8009590 <HAL_RCC_ClockConfig+0x358>)
 8009492:	699b      	ldr	r3, [r3, #24]
 8009494:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009498:	429a      	cmp	r2, r3
 800949a:	d208      	bcs.n	80094ae <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800949c:	4b3c      	ldr	r3, [pc, #240]	; (8009590 <HAL_RCC_ClockConfig+0x358>)
 800949e:	699b      	ldr	r3, [r3, #24]
 80094a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	691b      	ldr	r3, [r3, #16]
 80094a8:	4939      	ldr	r1, [pc, #228]	; (8009590 <HAL_RCC_ClockConfig+0x358>)
 80094aa:	4313      	orrs	r3, r2
 80094ac:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f003 0308 	and.w	r3, r3, #8
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d010      	beq.n	80094dc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	695a      	ldr	r2, [r3, #20]
 80094be:	4b34      	ldr	r3, [pc, #208]	; (8009590 <HAL_RCC_ClockConfig+0x358>)
 80094c0:	69db      	ldr	r3, [r3, #28]
 80094c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80094c6:	429a      	cmp	r2, r3
 80094c8:	d208      	bcs.n	80094dc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80094ca:	4b31      	ldr	r3, [pc, #196]	; (8009590 <HAL_RCC_ClockConfig+0x358>)
 80094cc:	69db      	ldr	r3, [r3, #28]
 80094ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	695b      	ldr	r3, [r3, #20]
 80094d6:	492e      	ldr	r1, [pc, #184]	; (8009590 <HAL_RCC_ClockConfig+0x358>)
 80094d8:	4313      	orrs	r3, r2
 80094da:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f003 0310 	and.w	r3, r3, #16
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d010      	beq.n	800950a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	699a      	ldr	r2, [r3, #24]
 80094ec:	4b28      	ldr	r3, [pc, #160]	; (8009590 <HAL_RCC_ClockConfig+0x358>)
 80094ee:	69db      	ldr	r3, [r3, #28]
 80094f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80094f4:	429a      	cmp	r2, r3
 80094f6:	d208      	bcs.n	800950a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80094f8:	4b25      	ldr	r3, [pc, #148]	; (8009590 <HAL_RCC_ClockConfig+0x358>)
 80094fa:	69db      	ldr	r3, [r3, #28]
 80094fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	699b      	ldr	r3, [r3, #24]
 8009504:	4922      	ldr	r1, [pc, #136]	; (8009590 <HAL_RCC_ClockConfig+0x358>)
 8009506:	4313      	orrs	r3, r2
 8009508:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f003 0320 	and.w	r3, r3, #32
 8009512:	2b00      	cmp	r3, #0
 8009514:	d010      	beq.n	8009538 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	69da      	ldr	r2, [r3, #28]
 800951a:	4b1d      	ldr	r3, [pc, #116]	; (8009590 <HAL_RCC_ClockConfig+0x358>)
 800951c:	6a1b      	ldr	r3, [r3, #32]
 800951e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009522:	429a      	cmp	r2, r3
 8009524:	d208      	bcs.n	8009538 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009526:	4b1a      	ldr	r3, [pc, #104]	; (8009590 <HAL_RCC_ClockConfig+0x358>)
 8009528:	6a1b      	ldr	r3, [r3, #32]
 800952a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	69db      	ldr	r3, [r3, #28]
 8009532:	4917      	ldr	r1, [pc, #92]	; (8009590 <HAL_RCC_ClockConfig+0x358>)
 8009534:	4313      	orrs	r3, r2
 8009536:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009538:	f000 f834 	bl	80095a4 <HAL_RCC_GetSysClockFreq>
 800953c:	4602      	mov	r2, r0
 800953e:	4b14      	ldr	r3, [pc, #80]	; (8009590 <HAL_RCC_ClockConfig+0x358>)
 8009540:	699b      	ldr	r3, [r3, #24]
 8009542:	0a1b      	lsrs	r3, r3, #8
 8009544:	f003 030f 	and.w	r3, r3, #15
 8009548:	4912      	ldr	r1, [pc, #72]	; (8009594 <HAL_RCC_ClockConfig+0x35c>)
 800954a:	5ccb      	ldrb	r3, [r1, r3]
 800954c:	f003 031f 	and.w	r3, r3, #31
 8009550:	fa22 f303 	lsr.w	r3, r2, r3
 8009554:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009556:	4b0e      	ldr	r3, [pc, #56]	; (8009590 <HAL_RCC_ClockConfig+0x358>)
 8009558:	699b      	ldr	r3, [r3, #24]
 800955a:	f003 030f 	and.w	r3, r3, #15
 800955e:	4a0d      	ldr	r2, [pc, #52]	; (8009594 <HAL_RCC_ClockConfig+0x35c>)
 8009560:	5cd3      	ldrb	r3, [r2, r3]
 8009562:	f003 031f 	and.w	r3, r3, #31
 8009566:	693a      	ldr	r2, [r7, #16]
 8009568:	fa22 f303 	lsr.w	r3, r2, r3
 800956c:	4a0a      	ldr	r2, [pc, #40]	; (8009598 <HAL_RCC_ClockConfig+0x360>)
 800956e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009570:	4a0a      	ldr	r2, [pc, #40]	; (800959c <HAL_RCC_ClockConfig+0x364>)
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8009576:	4b0a      	ldr	r3, [pc, #40]	; (80095a0 <HAL_RCC_ClockConfig+0x368>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	4618      	mov	r0, r3
 800957c:	f7fa fd4e 	bl	800401c <HAL_InitTick>
 8009580:	4603      	mov	r3, r0
 8009582:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009584:	7bfb      	ldrb	r3, [r7, #15]
}
 8009586:	4618      	mov	r0, r3
 8009588:	3718      	adds	r7, #24
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}
 800958e:	bf00      	nop
 8009590:	58024400 	.word	0x58024400
 8009594:	08011c20 	.word	0x08011c20
 8009598:	24000008 	.word	0x24000008
 800959c:	24000004 	.word	0x24000004
 80095a0:	2400000c 	.word	0x2400000c

080095a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80095a4:	b480      	push	{r7}
 80095a6:	b089      	sub	sp, #36	; 0x24
 80095a8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80095aa:	4bb3      	ldr	r3, [pc, #716]	; (8009878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095ac:	691b      	ldr	r3, [r3, #16]
 80095ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80095b2:	2b18      	cmp	r3, #24
 80095b4:	f200 8155 	bhi.w	8009862 <HAL_RCC_GetSysClockFreq+0x2be>
 80095b8:	a201      	add	r2, pc, #4	; (adr r2, 80095c0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80095ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095be:	bf00      	nop
 80095c0:	08009625 	.word	0x08009625
 80095c4:	08009863 	.word	0x08009863
 80095c8:	08009863 	.word	0x08009863
 80095cc:	08009863 	.word	0x08009863
 80095d0:	08009863 	.word	0x08009863
 80095d4:	08009863 	.word	0x08009863
 80095d8:	08009863 	.word	0x08009863
 80095dc:	08009863 	.word	0x08009863
 80095e0:	0800964b 	.word	0x0800964b
 80095e4:	08009863 	.word	0x08009863
 80095e8:	08009863 	.word	0x08009863
 80095ec:	08009863 	.word	0x08009863
 80095f0:	08009863 	.word	0x08009863
 80095f4:	08009863 	.word	0x08009863
 80095f8:	08009863 	.word	0x08009863
 80095fc:	08009863 	.word	0x08009863
 8009600:	08009651 	.word	0x08009651
 8009604:	08009863 	.word	0x08009863
 8009608:	08009863 	.word	0x08009863
 800960c:	08009863 	.word	0x08009863
 8009610:	08009863 	.word	0x08009863
 8009614:	08009863 	.word	0x08009863
 8009618:	08009863 	.word	0x08009863
 800961c:	08009863 	.word	0x08009863
 8009620:	08009657 	.word	0x08009657
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009624:	4b94      	ldr	r3, [pc, #592]	; (8009878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	f003 0320 	and.w	r3, r3, #32
 800962c:	2b00      	cmp	r3, #0
 800962e:	d009      	beq.n	8009644 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009630:	4b91      	ldr	r3, [pc, #580]	; (8009878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	08db      	lsrs	r3, r3, #3
 8009636:	f003 0303 	and.w	r3, r3, #3
 800963a:	4a90      	ldr	r2, [pc, #576]	; (800987c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800963c:	fa22 f303 	lsr.w	r3, r2, r3
 8009640:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8009642:	e111      	b.n	8009868 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009644:	4b8d      	ldr	r3, [pc, #564]	; (800987c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009646:	61bb      	str	r3, [r7, #24]
    break;
 8009648:	e10e      	b.n	8009868 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800964a:	4b8d      	ldr	r3, [pc, #564]	; (8009880 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800964c:	61bb      	str	r3, [r7, #24]
    break;
 800964e:	e10b      	b.n	8009868 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8009650:	4b8c      	ldr	r3, [pc, #560]	; (8009884 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009652:	61bb      	str	r3, [r7, #24]
    break;
 8009654:	e108      	b.n	8009868 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009656:	4b88      	ldr	r3, [pc, #544]	; (8009878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800965a:	f003 0303 	and.w	r3, r3, #3
 800965e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8009660:	4b85      	ldr	r3, [pc, #532]	; (8009878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009664:	091b      	lsrs	r3, r3, #4
 8009666:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800966a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800966c:	4b82      	ldr	r3, [pc, #520]	; (8009878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800966e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009670:	f003 0301 	and.w	r3, r3, #1
 8009674:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8009676:	4b80      	ldr	r3, [pc, #512]	; (8009878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800967a:	08db      	lsrs	r3, r3, #3
 800967c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009680:	68fa      	ldr	r2, [r7, #12]
 8009682:	fb02 f303 	mul.w	r3, r2, r3
 8009686:	ee07 3a90 	vmov	s15, r3
 800968a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800968e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8009692:	693b      	ldr	r3, [r7, #16]
 8009694:	2b00      	cmp	r3, #0
 8009696:	f000 80e1 	beq.w	800985c <HAL_RCC_GetSysClockFreq+0x2b8>
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	2b02      	cmp	r3, #2
 800969e:	f000 8083 	beq.w	80097a8 <HAL_RCC_GetSysClockFreq+0x204>
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	2b02      	cmp	r3, #2
 80096a6:	f200 80a1 	bhi.w	80097ec <HAL_RCC_GetSysClockFreq+0x248>
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d003      	beq.n	80096b8 <HAL_RCC_GetSysClockFreq+0x114>
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	2b01      	cmp	r3, #1
 80096b4:	d056      	beq.n	8009764 <HAL_RCC_GetSysClockFreq+0x1c0>
 80096b6:	e099      	b.n	80097ec <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80096b8:	4b6f      	ldr	r3, [pc, #444]	; (8009878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f003 0320 	and.w	r3, r3, #32
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d02d      	beq.n	8009720 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80096c4:	4b6c      	ldr	r3, [pc, #432]	; (8009878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	08db      	lsrs	r3, r3, #3
 80096ca:	f003 0303 	and.w	r3, r3, #3
 80096ce:	4a6b      	ldr	r2, [pc, #428]	; (800987c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80096d0:	fa22 f303 	lsr.w	r3, r2, r3
 80096d4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	ee07 3a90 	vmov	s15, r3
 80096dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096e0:	693b      	ldr	r3, [r7, #16]
 80096e2:	ee07 3a90 	vmov	s15, r3
 80096e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096ee:	4b62      	ldr	r3, [pc, #392]	; (8009878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80096f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096f6:	ee07 3a90 	vmov	s15, r3
 80096fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8009702:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009888 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009706:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800970a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800970e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800971a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800971e:	e087      	b.n	8009830 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	ee07 3a90 	vmov	s15, r3
 8009726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800972a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800988c <HAL_RCC_GetSysClockFreq+0x2e8>
 800972e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009732:	4b51      	ldr	r3, [pc, #324]	; (8009878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800973a:	ee07 3a90 	vmov	s15, r3
 800973e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009742:	ed97 6a02 	vldr	s12, [r7, #8]
 8009746:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009888 <HAL_RCC_GetSysClockFreq+0x2e4>
 800974a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800974e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009752:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800975a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800975e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009762:	e065      	b.n	8009830 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	ee07 3a90 	vmov	s15, r3
 800976a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800976e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009890 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009772:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009776:	4b40      	ldr	r3, [pc, #256]	; (8009878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800977a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800977e:	ee07 3a90 	vmov	s15, r3
 8009782:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009786:	ed97 6a02 	vldr	s12, [r7, #8]
 800978a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009888 <HAL_RCC_GetSysClockFreq+0x2e4>
 800978e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009792:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009796:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800979a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800979e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80097a6:	e043      	b.n	8009830 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80097a8:	693b      	ldr	r3, [r7, #16]
 80097aa:	ee07 3a90 	vmov	s15, r3
 80097ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097b2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009894 <HAL_RCC_GetSysClockFreq+0x2f0>
 80097b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097ba:	4b2f      	ldr	r3, [pc, #188]	; (8009878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80097bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097c2:	ee07 3a90 	vmov	s15, r3
 80097c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80097ce:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009888 <HAL_RCC_GetSysClockFreq+0x2e4>
 80097d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80097ea:	e021      	b.n	8009830 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	ee07 3a90 	vmov	s15, r3
 80097f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097f6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009890 <HAL_RCC_GetSysClockFreq+0x2ec>
 80097fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097fe:	4b1e      	ldr	r3, [pc, #120]	; (8009878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009806:	ee07 3a90 	vmov	s15, r3
 800980a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800980e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009812:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009888 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009816:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800981a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800981e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009822:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800982a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800982e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8009830:	4b11      	ldr	r3, [pc, #68]	; (8009878 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009834:	0a5b      	lsrs	r3, r3, #9
 8009836:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800983a:	3301      	adds	r3, #1
 800983c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	ee07 3a90 	vmov	s15, r3
 8009844:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009848:	edd7 6a07 	vldr	s13, [r7, #28]
 800984c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009850:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009854:	ee17 3a90 	vmov	r3, s15
 8009858:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800985a:	e005      	b.n	8009868 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800985c:	2300      	movs	r3, #0
 800985e:	61bb      	str	r3, [r7, #24]
    break;
 8009860:	e002      	b.n	8009868 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8009862:	4b07      	ldr	r3, [pc, #28]	; (8009880 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009864:	61bb      	str	r3, [r7, #24]
    break;
 8009866:	bf00      	nop
  }

  return sysclockfreq;
 8009868:	69bb      	ldr	r3, [r7, #24]
}
 800986a:	4618      	mov	r0, r3
 800986c:	3724      	adds	r7, #36	; 0x24
 800986e:	46bd      	mov	sp, r7
 8009870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009874:	4770      	bx	lr
 8009876:	bf00      	nop
 8009878:	58024400 	.word	0x58024400
 800987c:	03d09000 	.word	0x03d09000
 8009880:	003d0900 	.word	0x003d0900
 8009884:	007a1200 	.word	0x007a1200
 8009888:	46000000 	.word	0x46000000
 800988c:	4c742400 	.word	0x4c742400
 8009890:	4a742400 	.word	0x4a742400
 8009894:	4af42400 	.word	0x4af42400

08009898 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b082      	sub	sp, #8
 800989c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800989e:	f7ff fe81 	bl	80095a4 <HAL_RCC_GetSysClockFreq>
 80098a2:	4602      	mov	r2, r0
 80098a4:	4b10      	ldr	r3, [pc, #64]	; (80098e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80098a6:	699b      	ldr	r3, [r3, #24]
 80098a8:	0a1b      	lsrs	r3, r3, #8
 80098aa:	f003 030f 	and.w	r3, r3, #15
 80098ae:	490f      	ldr	r1, [pc, #60]	; (80098ec <HAL_RCC_GetHCLKFreq+0x54>)
 80098b0:	5ccb      	ldrb	r3, [r1, r3]
 80098b2:	f003 031f 	and.w	r3, r3, #31
 80098b6:	fa22 f303 	lsr.w	r3, r2, r3
 80098ba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80098bc:	4b0a      	ldr	r3, [pc, #40]	; (80098e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80098be:	699b      	ldr	r3, [r3, #24]
 80098c0:	f003 030f 	and.w	r3, r3, #15
 80098c4:	4a09      	ldr	r2, [pc, #36]	; (80098ec <HAL_RCC_GetHCLKFreq+0x54>)
 80098c6:	5cd3      	ldrb	r3, [r2, r3]
 80098c8:	f003 031f 	and.w	r3, r3, #31
 80098cc:	687a      	ldr	r2, [r7, #4]
 80098ce:	fa22 f303 	lsr.w	r3, r2, r3
 80098d2:	4a07      	ldr	r2, [pc, #28]	; (80098f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80098d4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80098d6:	4a07      	ldr	r2, [pc, #28]	; (80098f4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80098dc:	4b04      	ldr	r3, [pc, #16]	; (80098f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80098de:	681b      	ldr	r3, [r3, #0]
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3708      	adds	r7, #8
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}
 80098e8:	58024400 	.word	0x58024400
 80098ec:	08011c20 	.word	0x08011c20
 80098f0:	24000008 	.word	0x24000008
 80098f4:	24000004 	.word	0x24000004

080098f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80098fc:	f7ff ffcc 	bl	8009898 <HAL_RCC_GetHCLKFreq>
 8009900:	4602      	mov	r2, r0
 8009902:	4b06      	ldr	r3, [pc, #24]	; (800991c <HAL_RCC_GetPCLK1Freq+0x24>)
 8009904:	69db      	ldr	r3, [r3, #28]
 8009906:	091b      	lsrs	r3, r3, #4
 8009908:	f003 0307 	and.w	r3, r3, #7
 800990c:	4904      	ldr	r1, [pc, #16]	; (8009920 <HAL_RCC_GetPCLK1Freq+0x28>)
 800990e:	5ccb      	ldrb	r3, [r1, r3]
 8009910:	f003 031f 	and.w	r3, r3, #31
 8009914:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009918:	4618      	mov	r0, r3
 800991a:	bd80      	pop	{r7, pc}
 800991c:	58024400 	.word	0x58024400
 8009920:	08011c20 	.word	0x08011c20

08009924 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009928:	f7ff ffb6 	bl	8009898 <HAL_RCC_GetHCLKFreq>
 800992c:	4602      	mov	r2, r0
 800992e:	4b06      	ldr	r3, [pc, #24]	; (8009948 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009930:	69db      	ldr	r3, [r3, #28]
 8009932:	0a1b      	lsrs	r3, r3, #8
 8009934:	f003 0307 	and.w	r3, r3, #7
 8009938:	4904      	ldr	r1, [pc, #16]	; (800994c <HAL_RCC_GetPCLK2Freq+0x28>)
 800993a:	5ccb      	ldrb	r3, [r1, r3]
 800993c:	f003 031f 	and.w	r3, r3, #31
 8009940:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009944:	4618      	mov	r0, r3
 8009946:	bd80      	pop	{r7, pc}
 8009948:	58024400 	.word	0x58024400
 800994c:	08011c20 	.word	0x08011c20

08009950 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b086      	sub	sp, #24
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009958:	2300      	movs	r3, #0
 800995a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800995c:	2300      	movs	r3, #0
 800995e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009968:	2b00      	cmp	r3, #0
 800996a:	d03f      	beq.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009970:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009974:	d02a      	beq.n	80099cc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8009976:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800997a:	d824      	bhi.n	80099c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800997c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009980:	d018      	beq.n	80099b4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009982:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009986:	d81e      	bhi.n	80099c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8009988:	2b00      	cmp	r3, #0
 800998a:	d003      	beq.n	8009994 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800998c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009990:	d007      	beq.n	80099a2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8009992:	e018      	b.n	80099c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009994:	4ba3      	ldr	r3, [pc, #652]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009998:	4aa2      	ldr	r2, [pc, #648]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800999a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800999e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80099a0:	e015      	b.n	80099ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	3304      	adds	r3, #4
 80099a6:	2102      	movs	r1, #2
 80099a8:	4618      	mov	r0, r3
 80099aa:	f001 fff9 	bl	800b9a0 <RCCEx_PLL2_Config>
 80099ae:	4603      	mov	r3, r0
 80099b0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80099b2:	e00c      	b.n	80099ce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	3324      	adds	r3, #36	; 0x24
 80099b8:	2102      	movs	r1, #2
 80099ba:	4618      	mov	r0, r3
 80099bc:	f002 f8a2 	bl	800bb04 <RCCEx_PLL3_Config>
 80099c0:	4603      	mov	r3, r0
 80099c2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80099c4:	e003      	b.n	80099ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80099c6:	2301      	movs	r3, #1
 80099c8:	75fb      	strb	r3, [r7, #23]
      break;
 80099ca:	e000      	b.n	80099ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80099cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80099ce:	7dfb      	ldrb	r3, [r7, #23]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d109      	bne.n	80099e8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80099d4:	4b93      	ldr	r3, [pc, #588]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80099d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80099e0:	4990      	ldr	r1, [pc, #576]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80099e2:	4313      	orrs	r3, r2
 80099e4:	650b      	str	r3, [r1, #80]	; 0x50
 80099e6:	e001      	b.n	80099ec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099e8:	7dfb      	ldrb	r3, [r7, #23]
 80099ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d03d      	beq.n	8009a74 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099fc:	2b04      	cmp	r3, #4
 80099fe:	d826      	bhi.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8009a00:	a201      	add	r2, pc, #4	; (adr r2, 8009a08 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8009a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a06:	bf00      	nop
 8009a08:	08009a1d 	.word	0x08009a1d
 8009a0c:	08009a2b 	.word	0x08009a2b
 8009a10:	08009a3d 	.word	0x08009a3d
 8009a14:	08009a55 	.word	0x08009a55
 8009a18:	08009a55 	.word	0x08009a55
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a1c:	4b81      	ldr	r3, [pc, #516]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a20:	4a80      	ldr	r2, [pc, #512]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009a22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a26:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009a28:	e015      	b.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	3304      	adds	r3, #4
 8009a2e:	2100      	movs	r1, #0
 8009a30:	4618      	mov	r0, r3
 8009a32:	f001 ffb5 	bl	800b9a0 <RCCEx_PLL2_Config>
 8009a36:	4603      	mov	r3, r0
 8009a38:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009a3a:	e00c      	b.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	3324      	adds	r3, #36	; 0x24
 8009a40:	2100      	movs	r1, #0
 8009a42:	4618      	mov	r0, r3
 8009a44:	f002 f85e 	bl	800bb04 <RCCEx_PLL3_Config>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009a4c:	e003      	b.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009a4e:	2301      	movs	r3, #1
 8009a50:	75fb      	strb	r3, [r7, #23]
      break;
 8009a52:	e000      	b.n	8009a56 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8009a54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a56:	7dfb      	ldrb	r3, [r7, #23]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d109      	bne.n	8009a70 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009a5c:	4b71      	ldr	r3, [pc, #452]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009a5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a60:	f023 0207 	bic.w	r2, r3, #7
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a68:	496e      	ldr	r1, [pc, #440]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	650b      	str	r3, [r1, #80]	; 0x50
 8009a6e:	e001      	b.n	8009a74 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a70:	7dfb      	ldrb	r3, [r7, #23]
 8009a72:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d042      	beq.n	8009b06 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a88:	d02b      	beq.n	8009ae2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8009a8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a8e:	d825      	bhi.n	8009adc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009a90:	2bc0      	cmp	r3, #192	; 0xc0
 8009a92:	d028      	beq.n	8009ae6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8009a94:	2bc0      	cmp	r3, #192	; 0xc0
 8009a96:	d821      	bhi.n	8009adc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009a98:	2b80      	cmp	r3, #128	; 0x80
 8009a9a:	d016      	beq.n	8009aca <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8009a9c:	2b80      	cmp	r3, #128	; 0x80
 8009a9e:	d81d      	bhi.n	8009adc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d002      	beq.n	8009aaa <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8009aa4:	2b40      	cmp	r3, #64	; 0x40
 8009aa6:	d007      	beq.n	8009ab8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8009aa8:	e018      	b.n	8009adc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009aaa:	4b5e      	ldr	r3, [pc, #376]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aae:	4a5d      	ldr	r2, [pc, #372]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ab4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009ab6:	e017      	b.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	3304      	adds	r3, #4
 8009abc:	2100      	movs	r1, #0
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f001 ff6e 	bl	800b9a0 <RCCEx_PLL2_Config>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009ac8:	e00e      	b.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	3324      	adds	r3, #36	; 0x24
 8009ace:	2100      	movs	r1, #0
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f002 f817 	bl	800bb04 <RCCEx_PLL3_Config>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8009ada:	e005      	b.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009adc:	2301      	movs	r3, #1
 8009ade:	75fb      	strb	r3, [r7, #23]
      break;
 8009ae0:	e002      	b.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8009ae2:	bf00      	nop
 8009ae4:	e000      	b.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8009ae6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ae8:	7dfb      	ldrb	r3, [r7, #23]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d109      	bne.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009aee:	4b4d      	ldr	r3, [pc, #308]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009af2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009afa:	494a      	ldr	r1, [pc, #296]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009afc:	4313      	orrs	r3, r2
 8009afe:	650b      	str	r3, [r1, #80]	; 0x50
 8009b00:	e001      	b.n	8009b06 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b02:	7dfb      	ldrb	r3, [r7, #23]
 8009b04:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d049      	beq.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009b18:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009b1c:	d030      	beq.n	8009b80 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8009b1e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009b22:	d82a      	bhi.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009b24:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009b28:	d02c      	beq.n	8009b84 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8009b2a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009b2e:	d824      	bhi.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009b30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009b34:	d018      	beq.n	8009b68 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8009b36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009b3a:	d81e      	bhi.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d003      	beq.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8009b40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009b44:	d007      	beq.n	8009b56 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8009b46:	e018      	b.n	8009b7a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b48:	4b36      	ldr	r3, [pc, #216]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b4c:	4a35      	ldr	r2, [pc, #212]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009b4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b52:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009b54:	e017      	b.n	8009b86 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	3304      	adds	r3, #4
 8009b5a:	2100      	movs	r1, #0
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f001 ff1f 	bl	800b9a0 <RCCEx_PLL2_Config>
 8009b62:	4603      	mov	r3, r0
 8009b64:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009b66:	e00e      	b.n	8009b86 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	3324      	adds	r3, #36	; 0x24
 8009b6c:	2100      	movs	r1, #0
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f001 ffc8 	bl	800bb04 <RCCEx_PLL3_Config>
 8009b74:	4603      	mov	r3, r0
 8009b76:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009b78:	e005      	b.n	8009b86 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	75fb      	strb	r3, [r7, #23]
      break;
 8009b7e:	e002      	b.n	8009b86 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8009b80:	bf00      	nop
 8009b82:	e000      	b.n	8009b86 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8009b84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009b86:	7dfb      	ldrb	r3, [r7, #23]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d10a      	bne.n	8009ba2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009b8c:	4b25      	ldr	r3, [pc, #148]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b90:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009b9a:	4922      	ldr	r1, [pc, #136]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009b9c:	4313      	orrs	r3, r2
 8009b9e:	658b      	str	r3, [r1, #88]	; 0x58
 8009ba0:	e001      	b.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ba2:	7dfb      	ldrb	r3, [r7, #23]
 8009ba4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d04b      	beq.n	8009c4a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009bb8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009bbc:	d030      	beq.n	8009c20 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8009bbe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009bc2:	d82a      	bhi.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009bc4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009bc8:	d02e      	beq.n	8009c28 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8009bca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009bce:	d824      	bhi.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009bd0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009bd4:	d018      	beq.n	8009c08 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8009bd6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009bda:	d81e      	bhi.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d003      	beq.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8009be0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009be4:	d007      	beq.n	8009bf6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8009be6:	e018      	b.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009be8:	4b0e      	ldr	r3, [pc, #56]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bec:	4a0d      	ldr	r2, [pc, #52]	; (8009c24 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8009bee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009bf2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009bf4:	e019      	b.n	8009c2a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	3304      	adds	r3, #4
 8009bfa:	2100      	movs	r1, #0
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f001 fecf 	bl	800b9a0 <RCCEx_PLL2_Config>
 8009c02:	4603      	mov	r3, r0
 8009c04:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8009c06:	e010      	b.n	8009c2a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	3324      	adds	r3, #36	; 0x24
 8009c0c:	2100      	movs	r1, #0
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f001 ff78 	bl	800bb04 <RCCEx_PLL3_Config>
 8009c14:	4603      	mov	r3, r0
 8009c16:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8009c18:	e007      	b.n	8009c2a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	75fb      	strb	r3, [r7, #23]
      break;
 8009c1e:	e004      	b.n	8009c2a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8009c20:	bf00      	nop
 8009c22:	e002      	b.n	8009c2a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8009c24:	58024400 	.word	0x58024400
      break;
 8009c28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c2a:	7dfb      	ldrb	r3, [r7, #23]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d10a      	bne.n	8009c46 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009c30:	4b99      	ldr	r3, [pc, #612]	; (8009e98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c34:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009c3e:	4996      	ldr	r1, [pc, #600]	; (8009e98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009c40:	4313      	orrs	r3, r2
 8009c42:	658b      	str	r3, [r1, #88]	; 0x58
 8009c44:	e001      	b.n	8009c4a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c46:	7dfb      	ldrb	r3, [r7, #23]
 8009c48:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d032      	beq.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c5a:	2b30      	cmp	r3, #48	; 0x30
 8009c5c:	d01c      	beq.n	8009c98 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8009c5e:	2b30      	cmp	r3, #48	; 0x30
 8009c60:	d817      	bhi.n	8009c92 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8009c62:	2b20      	cmp	r3, #32
 8009c64:	d00c      	beq.n	8009c80 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8009c66:	2b20      	cmp	r3, #32
 8009c68:	d813      	bhi.n	8009c92 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d016      	beq.n	8009c9c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8009c6e:	2b10      	cmp	r3, #16
 8009c70:	d10f      	bne.n	8009c92 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c72:	4b89      	ldr	r3, [pc, #548]	; (8009e98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c76:	4a88      	ldr	r2, [pc, #544]	; (8009e98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c7c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009c7e:	e00e      	b.n	8009c9e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	3304      	adds	r3, #4
 8009c84:	2102      	movs	r1, #2
 8009c86:	4618      	mov	r0, r3
 8009c88:	f001 fe8a 	bl	800b9a0 <RCCEx_PLL2_Config>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009c90:	e005      	b.n	8009c9e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009c92:	2301      	movs	r3, #1
 8009c94:	75fb      	strb	r3, [r7, #23]
      break;
 8009c96:	e002      	b.n	8009c9e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8009c98:	bf00      	nop
 8009c9a:	e000      	b.n	8009c9e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8009c9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009c9e:	7dfb      	ldrb	r3, [r7, #23]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d109      	bne.n	8009cb8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009ca4:	4b7c      	ldr	r3, [pc, #496]	; (8009e98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ca8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009cb0:	4979      	ldr	r1, [pc, #484]	; (8009e98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009cb2:	4313      	orrs	r3, r2
 8009cb4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009cb6:	e001      	b.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cb8:	7dfb      	ldrb	r3, [r7, #23]
 8009cba:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d047      	beq.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ccc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009cd0:	d030      	beq.n	8009d34 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8009cd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009cd6:	d82a      	bhi.n	8009d2e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8009cd8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009cdc:	d02c      	beq.n	8009d38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8009cde:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009ce2:	d824      	bhi.n	8009d2e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8009ce4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ce8:	d018      	beq.n	8009d1c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8009cea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009cee:	d81e      	bhi.n	8009d2e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d003      	beq.n	8009cfc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8009cf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cf8:	d007      	beq.n	8009d0a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8009cfa:	e018      	b.n	8009d2e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009cfc:	4b66      	ldr	r3, [pc, #408]	; (8009e98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d00:	4a65      	ldr	r2, [pc, #404]	; (8009e98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009d02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d06:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009d08:	e017      	b.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	3304      	adds	r3, #4
 8009d0e:	2100      	movs	r1, #0
 8009d10:	4618      	mov	r0, r3
 8009d12:	f001 fe45 	bl	800b9a0 <RCCEx_PLL2_Config>
 8009d16:	4603      	mov	r3, r0
 8009d18:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009d1a:	e00e      	b.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	3324      	adds	r3, #36	; 0x24
 8009d20:	2100      	movs	r1, #0
 8009d22:	4618      	mov	r0, r3
 8009d24:	f001 feee 	bl	800bb04 <RCCEx_PLL3_Config>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009d2c:	e005      	b.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009d2e:	2301      	movs	r3, #1
 8009d30:	75fb      	strb	r3, [r7, #23]
      break;
 8009d32:	e002      	b.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8009d34:	bf00      	nop
 8009d36:	e000      	b.n	8009d3a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8009d38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009d3a:	7dfb      	ldrb	r3, [r7, #23]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d109      	bne.n	8009d54 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009d40:	4b55      	ldr	r3, [pc, #340]	; (8009e98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009d42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d44:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d4c:	4952      	ldr	r1, [pc, #328]	; (8009e98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009d4e:	4313      	orrs	r3, r2
 8009d50:	650b      	str	r3, [r1, #80]	; 0x50
 8009d52:	e001      	b.n	8009d58 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d54:	7dfb      	ldrb	r3, [r7, #23]
 8009d56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d049      	beq.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009d6c:	d02e      	beq.n	8009dcc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8009d6e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009d72:	d828      	bhi.n	8009dc6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009d74:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009d78:	d02a      	beq.n	8009dd0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8009d7a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009d7e:	d822      	bhi.n	8009dc6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009d80:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009d84:	d026      	beq.n	8009dd4 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8009d86:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009d8a:	d81c      	bhi.n	8009dc6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009d8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d90:	d010      	beq.n	8009db4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8009d92:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d96:	d816      	bhi.n	8009dc6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d01d      	beq.n	8009dd8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8009d9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009da0:	d111      	bne.n	8009dc6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	3304      	adds	r3, #4
 8009da6:	2101      	movs	r1, #1
 8009da8:	4618      	mov	r0, r3
 8009daa:	f001 fdf9 	bl	800b9a0 <RCCEx_PLL2_Config>
 8009dae:	4603      	mov	r3, r0
 8009db0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009db2:	e012      	b.n	8009dda <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	3324      	adds	r3, #36	; 0x24
 8009db8:	2101      	movs	r1, #1
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f001 fea2 	bl	800bb04 <RCCEx_PLL3_Config>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009dc4:	e009      	b.n	8009dda <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	75fb      	strb	r3, [r7, #23]
      break;
 8009dca:	e006      	b.n	8009dda <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009dcc:	bf00      	nop
 8009dce:	e004      	b.n	8009dda <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009dd0:	bf00      	nop
 8009dd2:	e002      	b.n	8009dda <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009dd4:	bf00      	nop
 8009dd6:	e000      	b.n	8009dda <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8009dd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009dda:	7dfb      	ldrb	r3, [r7, #23]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d109      	bne.n	8009df4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009de0:	4b2d      	ldr	r3, [pc, #180]	; (8009e98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009de4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009dec:	492a      	ldr	r1, [pc, #168]	; (8009e98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009dee:	4313      	orrs	r3, r2
 8009df0:	650b      	str	r3, [r1, #80]	; 0x50
 8009df2:	e001      	b.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009df4:	7dfb      	ldrb	r3, [r7, #23]
 8009df6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d04d      	beq.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009e0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009e0e:	d02e      	beq.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8009e10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009e14:	d828      	bhi.n	8009e68 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009e16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e1a:	d02a      	beq.n	8009e72 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8009e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e20:	d822      	bhi.n	8009e68 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009e22:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009e26:	d026      	beq.n	8009e76 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8009e28:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009e2c:	d81c      	bhi.n	8009e68 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009e2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e32:	d010      	beq.n	8009e56 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8009e34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e38:	d816      	bhi.n	8009e68 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d01d      	beq.n	8009e7a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8009e3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e42:	d111      	bne.n	8009e68 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	3304      	adds	r3, #4
 8009e48:	2101      	movs	r1, #1
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f001 fda8 	bl	800b9a0 <RCCEx_PLL2_Config>
 8009e50:	4603      	mov	r3, r0
 8009e52:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009e54:	e012      	b.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	3324      	adds	r3, #36	; 0x24
 8009e5a:	2101      	movs	r1, #1
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	f001 fe51 	bl	800bb04 <RCCEx_PLL3_Config>
 8009e62:	4603      	mov	r3, r0
 8009e64:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8009e66:	e009      	b.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8009e68:	2301      	movs	r3, #1
 8009e6a:	75fb      	strb	r3, [r7, #23]
      break;
 8009e6c:	e006      	b.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009e6e:	bf00      	nop
 8009e70:	e004      	b.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009e72:	bf00      	nop
 8009e74:	e002      	b.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009e76:	bf00      	nop
 8009e78:	e000      	b.n	8009e7c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8009e7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009e7c:	7dfb      	ldrb	r3, [r7, #23]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d10c      	bne.n	8009e9c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009e82:	4b05      	ldr	r3, [pc, #20]	; (8009e98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009e84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e86:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009e90:	4901      	ldr	r1, [pc, #4]	; (8009e98 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8009e92:	4313      	orrs	r3, r2
 8009e94:	658b      	str	r3, [r1, #88]	; 0x58
 8009e96:	e003      	b.n	8009ea0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8009e98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e9c:	7dfb      	ldrb	r3, [r7, #23]
 8009e9e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d02f      	beq.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009eb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009eb4:	d00e      	beq.n	8009ed4 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8009eb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009eba:	d814      	bhi.n	8009ee6 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d015      	beq.n	8009eec <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8009ec0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009ec4:	d10f      	bne.n	8009ee6 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ec6:	4baf      	ldr	r3, [pc, #700]	; (800a184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eca:	4aae      	ldr	r2, [pc, #696]	; (800a184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ed0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009ed2:	e00c      	b.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	3304      	adds	r3, #4
 8009ed8:	2101      	movs	r1, #1
 8009eda:	4618      	mov	r0, r3
 8009edc:	f001 fd60 	bl	800b9a0 <RCCEx_PLL2_Config>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8009ee4:	e003      	b.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	75fb      	strb	r3, [r7, #23]
      break;
 8009eea:	e000      	b.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8009eec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009eee:	7dfb      	ldrb	r3, [r7, #23]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d109      	bne.n	8009f08 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009ef4:	4ba3      	ldr	r3, [pc, #652]	; (800a184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009ef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ef8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f00:	49a0      	ldr	r1, [pc, #640]	; (800a184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009f02:	4313      	orrs	r3, r2
 8009f04:	650b      	str	r3, [r1, #80]	; 0x50
 8009f06:	e001      	b.n	8009f0c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f08:	7dfb      	ldrb	r3, [r7, #23]
 8009f0a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d032      	beq.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f1c:	2b03      	cmp	r3, #3
 8009f1e:	d81b      	bhi.n	8009f58 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8009f20:	a201      	add	r2, pc, #4	; (adr r2, 8009f28 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8009f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f26:	bf00      	nop
 8009f28:	08009f5f 	.word	0x08009f5f
 8009f2c:	08009f39 	.word	0x08009f39
 8009f30:	08009f47 	.word	0x08009f47
 8009f34:	08009f5f 	.word	0x08009f5f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f38:	4b92      	ldr	r3, [pc, #584]	; (800a184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f3c:	4a91      	ldr	r2, [pc, #580]	; (800a184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009f3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009f44:	e00c      	b.n	8009f60 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	3304      	adds	r3, #4
 8009f4a:	2102      	movs	r1, #2
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f001 fd27 	bl	800b9a0 <RCCEx_PLL2_Config>
 8009f52:	4603      	mov	r3, r0
 8009f54:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009f56:	e003      	b.n	8009f60 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009f58:	2301      	movs	r3, #1
 8009f5a:	75fb      	strb	r3, [r7, #23]
      break;
 8009f5c:	e000      	b.n	8009f60 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8009f5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009f60:	7dfb      	ldrb	r3, [r7, #23]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d109      	bne.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009f66:	4b87      	ldr	r3, [pc, #540]	; (800a184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f6a:	f023 0203 	bic.w	r2, r3, #3
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f72:	4984      	ldr	r1, [pc, #528]	; (800a184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009f74:	4313      	orrs	r3, r2
 8009f76:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009f78:	e001      	b.n	8009f7e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f7a:	7dfb      	ldrb	r3, [r7, #23]
 8009f7c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	f000 8086 	beq.w	800a098 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009f8c:	4b7e      	ldr	r3, [pc, #504]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	4a7d      	ldr	r2, [pc, #500]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009f92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f96:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009f98:	f7fa f88a 	bl	80040b0 <HAL_GetTick>
 8009f9c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009f9e:	e009      	b.n	8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009fa0:	f7fa f886 	bl	80040b0 <HAL_GetTick>
 8009fa4:	4602      	mov	r2, r0
 8009fa6:	693b      	ldr	r3, [r7, #16]
 8009fa8:	1ad3      	subs	r3, r2, r3
 8009faa:	2b64      	cmp	r3, #100	; 0x64
 8009fac:	d902      	bls.n	8009fb4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8009fae:	2303      	movs	r3, #3
 8009fb0:	75fb      	strb	r3, [r7, #23]
        break;
 8009fb2:	e005      	b.n	8009fc0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009fb4:	4b74      	ldr	r3, [pc, #464]	; (800a188 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d0ef      	beq.n	8009fa0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8009fc0:	7dfb      	ldrb	r3, [r7, #23]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d166      	bne.n	800a094 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009fc6:	4b6f      	ldr	r3, [pc, #444]	; (800a184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009fc8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009fd0:	4053      	eors	r3, r2
 8009fd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d013      	beq.n	800a002 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009fda:	4b6a      	ldr	r3, [pc, #424]	; (800a184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009fe2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009fe4:	4b67      	ldr	r3, [pc, #412]	; (800a184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fe8:	4a66      	ldr	r2, [pc, #408]	; (800a184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009fea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009fee:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009ff0:	4b64      	ldr	r3, [pc, #400]	; (800a184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009ff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ff4:	4a63      	ldr	r2, [pc, #396]	; (800a184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009ff6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ffa:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009ffc:	4a61      	ldr	r2, [pc, #388]	; (800a184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a008:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a00c:	d115      	bne.n	800a03a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a00e:	f7fa f84f 	bl	80040b0 <HAL_GetTick>
 800a012:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a014:	e00b      	b.n	800a02e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a016:	f7fa f84b 	bl	80040b0 <HAL_GetTick>
 800a01a:	4602      	mov	r2, r0
 800a01c:	693b      	ldr	r3, [r7, #16]
 800a01e:	1ad3      	subs	r3, r2, r3
 800a020:	f241 3288 	movw	r2, #5000	; 0x1388
 800a024:	4293      	cmp	r3, r2
 800a026:	d902      	bls.n	800a02e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800a028:	2303      	movs	r3, #3
 800a02a:	75fb      	strb	r3, [r7, #23]
            break;
 800a02c:	e005      	b.n	800a03a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a02e:	4b55      	ldr	r3, [pc, #340]	; (800a184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a032:	f003 0302 	and.w	r3, r3, #2
 800a036:	2b00      	cmp	r3, #0
 800a038:	d0ed      	beq.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800a03a:	7dfb      	ldrb	r3, [r7, #23]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d126      	bne.n	800a08e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a04a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a04e:	d10d      	bne.n	800a06c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800a050:	4b4c      	ldr	r3, [pc, #304]	; (800a184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a052:	691b      	ldr	r3, [r3, #16]
 800a054:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a05e:	0919      	lsrs	r1, r3, #4
 800a060:	4b4a      	ldr	r3, [pc, #296]	; (800a18c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800a062:	400b      	ands	r3, r1
 800a064:	4947      	ldr	r1, [pc, #284]	; (800a184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a066:	4313      	orrs	r3, r2
 800a068:	610b      	str	r3, [r1, #16]
 800a06a:	e005      	b.n	800a078 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800a06c:	4b45      	ldr	r3, [pc, #276]	; (800a184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a06e:	691b      	ldr	r3, [r3, #16]
 800a070:	4a44      	ldr	r2, [pc, #272]	; (800a184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a072:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a076:	6113      	str	r3, [r2, #16]
 800a078:	4b42      	ldr	r3, [pc, #264]	; (800a184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a07a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a082:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a086:	493f      	ldr	r1, [pc, #252]	; (800a184 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800a088:	4313      	orrs	r3, r2
 800a08a:	670b      	str	r3, [r1, #112]	; 0x70
 800a08c:	e004      	b.n	800a098 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a08e:	7dfb      	ldrb	r3, [r7, #23]
 800a090:	75bb      	strb	r3, [r7, #22]
 800a092:	e001      	b.n	800a098 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a094:	7dfb      	ldrb	r3, [r7, #23]
 800a096:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f003 0301 	and.w	r3, r3, #1
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	f000 8085 	beq.w	800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a0aa:	2b28      	cmp	r3, #40	; 0x28
 800a0ac:	d866      	bhi.n	800a17c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800a0ae:	a201      	add	r2, pc, #4	; (adr r2, 800a0b4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800a0b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0b4:	0800a191 	.word	0x0800a191
 800a0b8:	0800a17d 	.word	0x0800a17d
 800a0bc:	0800a17d 	.word	0x0800a17d
 800a0c0:	0800a17d 	.word	0x0800a17d
 800a0c4:	0800a17d 	.word	0x0800a17d
 800a0c8:	0800a17d 	.word	0x0800a17d
 800a0cc:	0800a17d 	.word	0x0800a17d
 800a0d0:	0800a17d 	.word	0x0800a17d
 800a0d4:	0800a159 	.word	0x0800a159
 800a0d8:	0800a17d 	.word	0x0800a17d
 800a0dc:	0800a17d 	.word	0x0800a17d
 800a0e0:	0800a17d 	.word	0x0800a17d
 800a0e4:	0800a17d 	.word	0x0800a17d
 800a0e8:	0800a17d 	.word	0x0800a17d
 800a0ec:	0800a17d 	.word	0x0800a17d
 800a0f0:	0800a17d 	.word	0x0800a17d
 800a0f4:	0800a16b 	.word	0x0800a16b
 800a0f8:	0800a17d 	.word	0x0800a17d
 800a0fc:	0800a17d 	.word	0x0800a17d
 800a100:	0800a17d 	.word	0x0800a17d
 800a104:	0800a17d 	.word	0x0800a17d
 800a108:	0800a17d 	.word	0x0800a17d
 800a10c:	0800a17d 	.word	0x0800a17d
 800a110:	0800a17d 	.word	0x0800a17d
 800a114:	0800a191 	.word	0x0800a191
 800a118:	0800a17d 	.word	0x0800a17d
 800a11c:	0800a17d 	.word	0x0800a17d
 800a120:	0800a17d 	.word	0x0800a17d
 800a124:	0800a17d 	.word	0x0800a17d
 800a128:	0800a17d 	.word	0x0800a17d
 800a12c:	0800a17d 	.word	0x0800a17d
 800a130:	0800a17d 	.word	0x0800a17d
 800a134:	0800a191 	.word	0x0800a191
 800a138:	0800a17d 	.word	0x0800a17d
 800a13c:	0800a17d 	.word	0x0800a17d
 800a140:	0800a17d 	.word	0x0800a17d
 800a144:	0800a17d 	.word	0x0800a17d
 800a148:	0800a17d 	.word	0x0800a17d
 800a14c:	0800a17d 	.word	0x0800a17d
 800a150:	0800a17d 	.word	0x0800a17d
 800a154:	0800a191 	.word	0x0800a191
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	3304      	adds	r3, #4
 800a15c:	2101      	movs	r1, #1
 800a15e:	4618      	mov	r0, r3
 800a160:	f001 fc1e 	bl	800b9a0 <RCCEx_PLL2_Config>
 800a164:	4603      	mov	r3, r0
 800a166:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a168:	e013      	b.n	800a192 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	3324      	adds	r3, #36	; 0x24
 800a16e:	2101      	movs	r1, #1
 800a170:	4618      	mov	r0, r3
 800a172:	f001 fcc7 	bl	800bb04 <RCCEx_PLL3_Config>
 800a176:	4603      	mov	r3, r0
 800a178:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800a17a:	e00a      	b.n	800a192 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a17c:	2301      	movs	r3, #1
 800a17e:	75fb      	strb	r3, [r7, #23]
      break;
 800a180:	e007      	b.n	800a192 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800a182:	bf00      	nop
 800a184:	58024400 	.word	0x58024400
 800a188:	58024800 	.word	0x58024800
 800a18c:	00ffffcf 	.word	0x00ffffcf
      break;
 800a190:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a192:	7dfb      	ldrb	r3, [r7, #23]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d109      	bne.n	800a1ac <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a198:	4b96      	ldr	r3, [pc, #600]	; (800a3f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a19a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a19c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a1a4:	4993      	ldr	r1, [pc, #588]	; (800a3f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a1a6:	4313      	orrs	r3, r2
 800a1a8:	654b      	str	r3, [r1, #84]	; 0x54
 800a1aa:	e001      	b.n	800a1b0 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1ac:	7dfb      	ldrb	r3, [r7, #23]
 800a1ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f003 0302 	and.w	r3, r3, #2
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d038      	beq.n	800a22e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a1c0:	2b05      	cmp	r3, #5
 800a1c2:	d821      	bhi.n	800a208 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800a1c4:	a201      	add	r2, pc, #4	; (adr r2, 800a1cc <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800a1c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ca:	bf00      	nop
 800a1cc:	0800a20f 	.word	0x0800a20f
 800a1d0:	0800a1e5 	.word	0x0800a1e5
 800a1d4:	0800a1f7 	.word	0x0800a1f7
 800a1d8:	0800a20f 	.word	0x0800a20f
 800a1dc:	0800a20f 	.word	0x0800a20f
 800a1e0:	0800a20f 	.word	0x0800a20f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	3304      	adds	r3, #4
 800a1e8:	2101      	movs	r1, #1
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	f001 fbd8 	bl	800b9a0 <RCCEx_PLL2_Config>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a1f4:	e00c      	b.n	800a210 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	3324      	adds	r3, #36	; 0x24
 800a1fa:	2101      	movs	r1, #1
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	f001 fc81 	bl	800bb04 <RCCEx_PLL3_Config>
 800a202:	4603      	mov	r3, r0
 800a204:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800a206:	e003      	b.n	800a210 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a208:	2301      	movs	r3, #1
 800a20a:	75fb      	strb	r3, [r7, #23]
      break;
 800a20c:	e000      	b.n	800a210 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800a20e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a210:	7dfb      	ldrb	r3, [r7, #23]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d109      	bne.n	800a22a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a216:	4b77      	ldr	r3, [pc, #476]	; (800a3f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a21a:	f023 0207 	bic.w	r2, r3, #7
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a222:	4974      	ldr	r1, [pc, #464]	; (800a3f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a224:	4313      	orrs	r3, r2
 800a226:	654b      	str	r3, [r1, #84]	; 0x54
 800a228:	e001      	b.n	800a22e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a22a:	7dfb      	ldrb	r3, [r7, #23]
 800a22c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f003 0304 	and.w	r3, r3, #4
 800a236:	2b00      	cmp	r3, #0
 800a238:	d03a      	beq.n	800a2b0 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a240:	2b05      	cmp	r3, #5
 800a242:	d821      	bhi.n	800a288 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800a244:	a201      	add	r2, pc, #4	; (adr r2, 800a24c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800a246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a24a:	bf00      	nop
 800a24c:	0800a28f 	.word	0x0800a28f
 800a250:	0800a265 	.word	0x0800a265
 800a254:	0800a277 	.word	0x0800a277
 800a258:	0800a28f 	.word	0x0800a28f
 800a25c:	0800a28f 	.word	0x0800a28f
 800a260:	0800a28f 	.word	0x0800a28f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	3304      	adds	r3, #4
 800a268:	2101      	movs	r1, #1
 800a26a:	4618      	mov	r0, r3
 800a26c:	f001 fb98 	bl	800b9a0 <RCCEx_PLL2_Config>
 800a270:	4603      	mov	r3, r0
 800a272:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a274:	e00c      	b.n	800a290 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	3324      	adds	r3, #36	; 0x24
 800a27a:	2101      	movs	r1, #1
 800a27c:	4618      	mov	r0, r3
 800a27e:	f001 fc41 	bl	800bb04 <RCCEx_PLL3_Config>
 800a282:	4603      	mov	r3, r0
 800a284:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800a286:	e003      	b.n	800a290 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a288:	2301      	movs	r3, #1
 800a28a:	75fb      	strb	r3, [r7, #23]
      break;
 800a28c:	e000      	b.n	800a290 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800a28e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a290:	7dfb      	ldrb	r3, [r7, #23]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d10a      	bne.n	800a2ac <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a296:	4b57      	ldr	r3, [pc, #348]	; (800a3f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a29a:	f023 0207 	bic.w	r2, r3, #7
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2a4:	4953      	ldr	r1, [pc, #332]	; (800a3f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a2a6:	4313      	orrs	r3, r2
 800a2a8:	658b      	str	r3, [r1, #88]	; 0x58
 800a2aa:	e001      	b.n	800a2b0 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2ac:	7dfb      	ldrb	r3, [r7, #23]
 800a2ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	f003 0320 	and.w	r3, r3, #32
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d04b      	beq.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a2c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a2c6:	d02e      	beq.n	800a326 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800a2c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a2cc:	d828      	bhi.n	800a320 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800a2ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2d2:	d02a      	beq.n	800a32a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800a2d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2d8:	d822      	bhi.n	800a320 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800a2da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a2de:	d026      	beq.n	800a32e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800a2e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a2e4:	d81c      	bhi.n	800a320 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800a2e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a2ea:	d010      	beq.n	800a30e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800a2ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a2f0:	d816      	bhi.n	800a320 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d01d      	beq.n	800a332 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800a2f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a2fa:	d111      	bne.n	800a320 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	3304      	adds	r3, #4
 800a300:	2100      	movs	r1, #0
 800a302:	4618      	mov	r0, r3
 800a304:	f001 fb4c 	bl	800b9a0 <RCCEx_PLL2_Config>
 800a308:	4603      	mov	r3, r0
 800a30a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a30c:	e012      	b.n	800a334 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	3324      	adds	r3, #36	; 0x24
 800a312:	2102      	movs	r1, #2
 800a314:	4618      	mov	r0, r3
 800a316:	f001 fbf5 	bl	800bb04 <RCCEx_PLL3_Config>
 800a31a:	4603      	mov	r3, r0
 800a31c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800a31e:	e009      	b.n	800a334 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a320:	2301      	movs	r3, #1
 800a322:	75fb      	strb	r3, [r7, #23]
      break;
 800a324:	e006      	b.n	800a334 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800a326:	bf00      	nop
 800a328:	e004      	b.n	800a334 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800a32a:	bf00      	nop
 800a32c:	e002      	b.n	800a334 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800a32e:	bf00      	nop
 800a330:	e000      	b.n	800a334 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800a332:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a334:	7dfb      	ldrb	r3, [r7, #23]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d10a      	bne.n	800a350 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a33a:	4b2e      	ldr	r3, [pc, #184]	; (800a3f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a33c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a33e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a348:	492a      	ldr	r1, [pc, #168]	; (800a3f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a34a:	4313      	orrs	r3, r2
 800a34c:	654b      	str	r3, [r1, #84]	; 0x54
 800a34e:	e001      	b.n	800a354 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a350:	7dfb      	ldrb	r3, [r7, #23]
 800a352:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d04d      	beq.n	800a3fc <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a366:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a36a:	d02e      	beq.n	800a3ca <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800a36c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a370:	d828      	bhi.n	800a3c4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800a372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a376:	d02a      	beq.n	800a3ce <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800a378:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a37c:	d822      	bhi.n	800a3c4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800a37e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a382:	d026      	beq.n	800a3d2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800a384:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a388:	d81c      	bhi.n	800a3c4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800a38a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a38e:	d010      	beq.n	800a3b2 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800a390:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a394:	d816      	bhi.n	800a3c4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800a396:	2b00      	cmp	r3, #0
 800a398:	d01d      	beq.n	800a3d6 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800a39a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a39e:	d111      	bne.n	800a3c4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	3304      	adds	r3, #4
 800a3a4:	2100      	movs	r1, #0
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f001 fafa 	bl	800b9a0 <RCCEx_PLL2_Config>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a3b0:	e012      	b.n	800a3d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	3324      	adds	r3, #36	; 0x24
 800a3b6:	2102      	movs	r1, #2
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	f001 fba3 	bl	800bb04 <RCCEx_PLL3_Config>
 800a3be:	4603      	mov	r3, r0
 800a3c0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800a3c2:	e009      	b.n	800a3d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a3c4:	2301      	movs	r3, #1
 800a3c6:	75fb      	strb	r3, [r7, #23]
      break;
 800a3c8:	e006      	b.n	800a3d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800a3ca:	bf00      	nop
 800a3cc:	e004      	b.n	800a3d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800a3ce:	bf00      	nop
 800a3d0:	e002      	b.n	800a3d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800a3d2:	bf00      	nop
 800a3d4:	e000      	b.n	800a3d8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800a3d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a3d8:	7dfb      	ldrb	r3, [r7, #23]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d10c      	bne.n	800a3f8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a3de:	4b05      	ldr	r3, [pc, #20]	; (800a3f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a3e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3e2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a3ec:	4901      	ldr	r1, [pc, #4]	; (800a3f4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800a3ee:	4313      	orrs	r3, r2
 800a3f0:	658b      	str	r3, [r1, #88]	; 0x58
 800a3f2:	e003      	b.n	800a3fc <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800a3f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3f8:	7dfb      	ldrb	r3, [r7, #23]
 800a3fa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a404:	2b00      	cmp	r3, #0
 800a406:	d04b      	beq.n	800a4a0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a40e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a412:	d02e      	beq.n	800a472 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800a414:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a418:	d828      	bhi.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800a41a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a41e:	d02a      	beq.n	800a476 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800a420:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a424:	d822      	bhi.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800a426:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a42a:	d026      	beq.n	800a47a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800a42c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a430:	d81c      	bhi.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800a432:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a436:	d010      	beq.n	800a45a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800a438:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a43c:	d816      	bhi.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d01d      	beq.n	800a47e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800a442:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a446:	d111      	bne.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	3304      	adds	r3, #4
 800a44c:	2100      	movs	r1, #0
 800a44e:	4618      	mov	r0, r3
 800a450:	f001 faa6 	bl	800b9a0 <RCCEx_PLL2_Config>
 800a454:	4603      	mov	r3, r0
 800a456:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a458:	e012      	b.n	800a480 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	3324      	adds	r3, #36	; 0x24
 800a45e:	2102      	movs	r1, #2
 800a460:	4618      	mov	r0, r3
 800a462:	f001 fb4f 	bl	800bb04 <RCCEx_PLL3_Config>
 800a466:	4603      	mov	r3, r0
 800a468:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800a46a:	e009      	b.n	800a480 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a46c:	2301      	movs	r3, #1
 800a46e:	75fb      	strb	r3, [r7, #23]
      break;
 800a470:	e006      	b.n	800a480 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800a472:	bf00      	nop
 800a474:	e004      	b.n	800a480 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800a476:	bf00      	nop
 800a478:	e002      	b.n	800a480 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800a47a:	bf00      	nop
 800a47c:	e000      	b.n	800a480 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800a47e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a480:	7dfb      	ldrb	r3, [r7, #23]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d10a      	bne.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a486:	4b9d      	ldr	r3, [pc, #628]	; (800a6fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a48a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a494:	4999      	ldr	r1, [pc, #612]	; (800a6fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a496:	4313      	orrs	r3, r2
 800a498:	658b      	str	r3, [r1, #88]	; 0x58
 800a49a:	e001      	b.n	800a4a0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a49c:	7dfb      	ldrb	r3, [r7, #23]
 800a49e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	f003 0308 	and.w	r3, r3, #8
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d01a      	beq.n	800a4e2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a4b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4b6:	d10a      	bne.n	800a4ce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	3324      	adds	r3, #36	; 0x24
 800a4bc:	2102      	movs	r1, #2
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f001 fb20 	bl	800bb04 <RCCEx_PLL3_Config>
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d001      	beq.n	800a4ce <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a4ce:	4b8b      	ldr	r3, [pc, #556]	; (800a6fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a4d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4d2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a4dc:	4987      	ldr	r1, [pc, #540]	; (800a6fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a4de:	4313      	orrs	r3, r2
 800a4e0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	f003 0310 	and.w	r3, r3, #16
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d01a      	beq.n	800a524 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a4f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a4f8:	d10a      	bne.n	800a510 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	3324      	adds	r3, #36	; 0x24
 800a4fe:	2102      	movs	r1, #2
 800a500:	4618      	mov	r0, r3
 800a502:	f001 faff 	bl	800bb04 <RCCEx_PLL3_Config>
 800a506:	4603      	mov	r3, r0
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d001      	beq.n	800a510 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800a50c:	2301      	movs	r3, #1
 800a50e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a510:	4b7a      	ldr	r3, [pc, #488]	; (800a6fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a514:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a51e:	4977      	ldr	r1, [pc, #476]	; (800a6fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a520:	4313      	orrs	r3, r2
 800a522:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d034      	beq.n	800a59a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a536:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a53a:	d01d      	beq.n	800a578 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800a53c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a540:	d817      	bhi.n	800a572 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800a542:	2b00      	cmp	r3, #0
 800a544:	d003      	beq.n	800a54e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800a546:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a54a:	d009      	beq.n	800a560 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800a54c:	e011      	b.n	800a572 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	3304      	adds	r3, #4
 800a552:	2100      	movs	r1, #0
 800a554:	4618      	mov	r0, r3
 800a556:	f001 fa23 	bl	800b9a0 <RCCEx_PLL2_Config>
 800a55a:	4603      	mov	r3, r0
 800a55c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a55e:	e00c      	b.n	800a57a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	3324      	adds	r3, #36	; 0x24
 800a564:	2102      	movs	r1, #2
 800a566:	4618      	mov	r0, r3
 800a568:	f001 facc 	bl	800bb04 <RCCEx_PLL3_Config>
 800a56c:	4603      	mov	r3, r0
 800a56e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800a570:	e003      	b.n	800a57a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a572:	2301      	movs	r3, #1
 800a574:	75fb      	strb	r3, [r7, #23]
      break;
 800a576:	e000      	b.n	800a57a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800a578:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a57a:	7dfb      	ldrb	r3, [r7, #23]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d10a      	bne.n	800a596 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a580:	4b5e      	ldr	r3, [pc, #376]	; (800a6fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a584:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a58e:	495b      	ldr	r1, [pc, #364]	; (800a6fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a590:	4313      	orrs	r3, r2
 800a592:	658b      	str	r3, [r1, #88]	; 0x58
 800a594:	e001      	b.n	800a59a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a596:	7dfb      	ldrb	r3, [r7, #23]
 800a598:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d033      	beq.n	800a60e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a5ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a5b0:	d01c      	beq.n	800a5ec <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800a5b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a5b6:	d816      	bhi.n	800a5e6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800a5b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a5bc:	d003      	beq.n	800a5c6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800a5be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a5c2:	d007      	beq.n	800a5d4 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800a5c4:	e00f      	b.n	800a5e6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a5c6:	4b4d      	ldr	r3, [pc, #308]	; (800a6fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a5c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5ca:	4a4c      	ldr	r2, [pc, #304]	; (800a6fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a5cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a5d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800a5d2:	e00c      	b.n	800a5ee <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	3324      	adds	r3, #36	; 0x24
 800a5d8:	2101      	movs	r1, #1
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f001 fa92 	bl	800bb04 <RCCEx_PLL3_Config>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800a5e4:	e003      	b.n	800a5ee <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a5e6:	2301      	movs	r3, #1
 800a5e8:	75fb      	strb	r3, [r7, #23]
      break;
 800a5ea:	e000      	b.n	800a5ee <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800a5ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a5ee:	7dfb      	ldrb	r3, [r7, #23]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d10a      	bne.n	800a60a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a5f4:	4b41      	ldr	r3, [pc, #260]	; (800a6fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a5f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a602:	493e      	ldr	r1, [pc, #248]	; (800a6fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a604:	4313      	orrs	r3, r2
 800a606:	654b      	str	r3, [r1, #84]	; 0x54
 800a608:	e001      	b.n	800a60e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a60a:	7dfb      	ldrb	r3, [r7, #23]
 800a60c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a616:	2b00      	cmp	r3, #0
 800a618:	d029      	beq.n	800a66e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d003      	beq.n	800a62a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800a622:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a626:	d007      	beq.n	800a638 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800a628:	e00f      	b.n	800a64a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a62a:	4b34      	ldr	r3, [pc, #208]	; (800a6fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a62c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a62e:	4a33      	ldr	r2, [pc, #204]	; (800a6fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a630:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a634:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a636:	e00b      	b.n	800a650 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	3304      	adds	r3, #4
 800a63c:	2102      	movs	r1, #2
 800a63e:	4618      	mov	r0, r3
 800a640:	f001 f9ae 	bl	800b9a0 <RCCEx_PLL2_Config>
 800a644:	4603      	mov	r3, r0
 800a646:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800a648:	e002      	b.n	800a650 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800a64a:	2301      	movs	r3, #1
 800a64c:	75fb      	strb	r3, [r7, #23]
      break;
 800a64e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a650:	7dfb      	ldrb	r3, [r7, #23]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d109      	bne.n	800a66a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a656:	4b29      	ldr	r3, [pc, #164]	; (800a6fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a65a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a662:	4926      	ldr	r1, [pc, #152]	; (800a6fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a664:	4313      	orrs	r3, r2
 800a666:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a668:	e001      	b.n	800a66e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a66a:	7dfb      	ldrb	r3, [r7, #23]
 800a66c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a676:	2b00      	cmp	r3, #0
 800a678:	d00a      	beq.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	3324      	adds	r3, #36	; 0x24
 800a67e:	2102      	movs	r1, #2
 800a680:	4618      	mov	r0, r3
 800a682:	f001 fa3f 	bl	800bb04 <RCCEx_PLL3_Config>
 800a686:	4603      	mov	r3, r0
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d001      	beq.n	800a690 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800a68c:	2301      	movs	r3, #1
 800a68e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d033      	beq.n	800a704 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a6a4:	d017      	beq.n	800a6d6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800a6a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a6aa:	d811      	bhi.n	800a6d0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800a6ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6b0:	d013      	beq.n	800a6da <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800a6b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a6b6:	d80b      	bhi.n	800a6d0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d010      	beq.n	800a6de <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800a6bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6c0:	d106      	bne.n	800a6d0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a6c2:	4b0e      	ldr	r3, [pc, #56]	; (800a6fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a6c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6c6:	4a0d      	ldr	r2, [pc, #52]	; (800a6fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a6c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a6cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800a6ce:	e007      	b.n	800a6e0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	75fb      	strb	r3, [r7, #23]
      break;
 800a6d4:	e004      	b.n	800a6e0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a6d6:	bf00      	nop
 800a6d8:	e002      	b.n	800a6e0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a6da:	bf00      	nop
 800a6dc:	e000      	b.n	800a6e0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800a6de:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a6e0:	7dfb      	ldrb	r3, [r7, #23]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d10c      	bne.n	800a700 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a6e6:	4b05      	ldr	r3, [pc, #20]	; (800a6fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a6e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6f2:	4902      	ldr	r1, [pc, #8]	; (800a6fc <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800a6f4:	4313      	orrs	r3, r2
 800a6f6:	654b      	str	r3, [r1, #84]	; 0x54
 800a6f8:	e004      	b.n	800a704 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800a6fa:	bf00      	nop
 800a6fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a700:	7dfb      	ldrb	r3, [r7, #23]
 800a702:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d008      	beq.n	800a722 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a710:	4b31      	ldr	r3, [pc, #196]	; (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a714:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a71c:	492e      	ldr	r1, [pc, #184]	; (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a71e:	4313      	orrs	r3, r2
 800a720:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d009      	beq.n	800a742 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a72e:	4b2a      	ldr	r3, [pc, #168]	; (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a730:	691b      	ldr	r3, [r3, #16]
 800a732:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a73c:	4926      	ldr	r1, [pc, #152]	; (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a73e:	4313      	orrs	r3, r2
 800a740:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d008      	beq.n	800a760 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a74e:	4b22      	ldr	r3, [pc, #136]	; (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a752:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a75a:	491f      	ldr	r1, [pc, #124]	; (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a75c:	4313      	orrs	r3, r2
 800a75e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d00d      	beq.n	800a788 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a76c:	4b1a      	ldr	r3, [pc, #104]	; (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a76e:	691b      	ldr	r3, [r3, #16]
 800a770:	4a19      	ldr	r2, [pc, #100]	; (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a772:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a776:	6113      	str	r3, [r2, #16]
 800a778:	4b17      	ldr	r3, [pc, #92]	; (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a77a:	691a      	ldr	r2, [r3, #16]
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a782:	4915      	ldr	r1, [pc, #84]	; (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a784:	4313      	orrs	r3, r2
 800a786:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	da08      	bge.n	800a7a2 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a790:	4b11      	ldr	r3, [pc, #68]	; (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a794:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a79c:	490e      	ldr	r1, [pc, #56]	; (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a79e:	4313      	orrs	r3, r2
 800a7a0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d009      	beq.n	800a7c2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a7ae:	4b0a      	ldr	r3, [pc, #40]	; (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a7b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7bc:	4906      	ldr	r1, [pc, #24]	; (800a7d8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800a7be:	4313      	orrs	r3, r2
 800a7c0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800a7c2:	7dbb      	ldrb	r3, [r7, #22]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d101      	bne.n	800a7cc <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	e000      	b.n	800a7ce <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800a7cc:	2301      	movs	r3, #1
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	3718      	adds	r7, #24
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}
 800a7d6:	bf00      	nop
 800a7d8:	58024400 	.word	0x58024400

0800a7dc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b090      	sub	sp, #64	; 0x40
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7ea:	f040 8095 	bne.w	800a918 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800a7ee:	4b97      	ldr	r3, [pc, #604]	; (800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a7f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7f2:	f003 0307 	and.w	r3, r3, #7
 800a7f6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a7f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7fa:	2b04      	cmp	r3, #4
 800a7fc:	f200 8088 	bhi.w	800a910 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 800a800:	a201      	add	r2, pc, #4	; (adr r2, 800a808 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 800a802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a806:	bf00      	nop
 800a808:	0800a81d 	.word	0x0800a81d
 800a80c:	0800a845 	.word	0x0800a845
 800a810:	0800a86d 	.word	0x0800a86d
 800a814:	0800a909 	.word	0x0800a909
 800a818:	0800a895 	.word	0x0800a895
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a81c:	4b8b      	ldr	r3, [pc, #556]	; (800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a824:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a828:	d108      	bne.n	800a83c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a82a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a82e:	4618      	mov	r0, r3
 800a830:	f000 ff64 	bl	800b6fc <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800a834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a836:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a838:	f000 bc94 	b.w	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a83c:	2300      	movs	r3, #0
 800a83e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a840:	f000 bc90 	b.w	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a844:	4b81      	ldr	r3, [pc, #516]	; (800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a84c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a850:	d108      	bne.n	800a864 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a852:	f107 0318 	add.w	r3, r7, #24
 800a856:	4618      	mov	r0, r3
 800a858:	f000 fca8 	bl	800b1ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a85c:	69bb      	ldr	r3, [r7, #24]
 800a85e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a860:	f000 bc80 	b.w	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a864:	2300      	movs	r3, #0
 800a866:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a868:	f000 bc7c 	b.w	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a86c:	4b77      	ldr	r3, [pc, #476]	; (800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a874:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a878:	d108      	bne.n	800a88c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a87a:	f107 030c 	add.w	r3, r7, #12
 800a87e:	4618      	mov	r0, r3
 800a880:	f000 fde8 	bl	800b454 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a888:	f000 bc6c 	b.w	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a88c:	2300      	movs	r3, #0
 800a88e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a890:	f000 bc68 	b.w	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a894:	4b6d      	ldr	r3, [pc, #436]	; (800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a898:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a89c:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a89e:	4b6b      	ldr	r3, [pc, #428]	; (800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	f003 0304 	and.w	r3, r3, #4
 800a8a6:	2b04      	cmp	r3, #4
 800a8a8:	d10c      	bne.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800a8aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d109      	bne.n	800a8c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a8b0:	4b66      	ldr	r3, [pc, #408]	; (800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	08db      	lsrs	r3, r3, #3
 800a8b6:	f003 0303 	and.w	r3, r3, #3
 800a8ba:	4a65      	ldr	r2, [pc, #404]	; (800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800a8bc:	fa22 f303 	lsr.w	r3, r2, r3
 800a8c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8c2:	e01f      	b.n	800a904 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a8c4:	4b61      	ldr	r3, [pc, #388]	; (800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8d0:	d106      	bne.n	800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800a8d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a8d8:	d102      	bne.n	800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800a8da:	4b5e      	ldr	r3, [pc, #376]	; (800aa54 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800a8dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8de:	e011      	b.n	800a904 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a8e0:	4b5a      	ldr	r3, [pc, #360]	; (800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a8ec:	d106      	bne.n	800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 800a8ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a8f4:	d102      	bne.n	800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800a8f6:	4b58      	ldr	r3, [pc, #352]	; (800aa58 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800a8f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a8fa:	e003      	b.n	800a904 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800a900:	f000 bc30 	b.w	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800a904:	f000 bc2e 	b.w	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800a908:	4b54      	ldr	r3, [pc, #336]	; (800aa5c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800a90a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a90c:	f000 bc2a 	b.w	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800a910:	2300      	movs	r3, #0
 800a912:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a914:	f000 bc26 	b.w	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a91e:	f040 809f 	bne.w	800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800a922:	4b4a      	ldr	r3, [pc, #296]	; (800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a924:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a926:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800a92a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800a92c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a92e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a932:	d04d      	beq.n	800a9d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800a934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a936:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a93a:	f200 8084 	bhi.w	800aa46 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a93e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a940:	2bc0      	cmp	r3, #192	; 0xc0
 800a942:	d07d      	beq.n	800aa40 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800a944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a946:	2bc0      	cmp	r3, #192	; 0xc0
 800a948:	d87d      	bhi.n	800aa46 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a94c:	2b80      	cmp	r3, #128	; 0x80
 800a94e:	d02d      	beq.n	800a9ac <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 800a950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a952:	2b80      	cmp	r3, #128	; 0x80
 800a954:	d877      	bhi.n	800aa46 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800a956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d003      	beq.n	800a964 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 800a95c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a95e:	2b40      	cmp	r3, #64	; 0x40
 800a960:	d012      	beq.n	800a988 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800a962:	e070      	b.n	800aa46 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a964:	4b39      	ldr	r3, [pc, #228]	; (800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a96c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a970:	d107      	bne.n	800a982 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a972:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a976:	4618      	mov	r0, r3
 800a978:	f000 fec0 	bl	800b6fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a97e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a980:	e3f0      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a982:	2300      	movs	r3, #0
 800a984:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a986:	e3ed      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a988:	4b30      	ldr	r3, [pc, #192]	; (800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a990:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a994:	d107      	bne.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a996:	f107 0318 	add.w	r3, r7, #24
 800a99a:	4618      	mov	r0, r3
 800a99c:	f000 fc06 	bl	800b1ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a9a0:	69bb      	ldr	r3, [r7, #24]
 800a9a2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a9a4:	e3de      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9aa:	e3db      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a9ac:	4b27      	ldr	r3, [pc, #156]	; (800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a9b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a9b8:	d107      	bne.n	800a9ca <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9ba:	f107 030c 	add.w	r3, r7, #12
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f000 fd48 	bl	800b454 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800a9c8:	e3cc      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800a9ce:	e3c9      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800a9d0:	4b1e      	ldr	r3, [pc, #120]	; (800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a9d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a9d8:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a9da:	4b1c      	ldr	r3, [pc, #112]	; (800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	f003 0304 	and.w	r3, r3, #4
 800a9e2:	2b04      	cmp	r3, #4
 800a9e4:	d10c      	bne.n	800aa00 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 800a9e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d109      	bne.n	800aa00 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a9ec:	4b17      	ldr	r3, [pc, #92]	; (800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	08db      	lsrs	r3, r3, #3
 800a9f2:	f003 0303 	and.w	r3, r3, #3
 800a9f6:	4a16      	ldr	r2, [pc, #88]	; (800aa50 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 800a9f8:	fa22 f303 	lsr.w	r3, r2, r3
 800a9fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a9fe:	e01e      	b.n	800aa3e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aa00:	4b12      	ldr	r3, [pc, #72]	; (800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa0c:	d106      	bne.n	800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 800aa0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa14:	d102      	bne.n	800aa1c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800aa16:	4b0f      	ldr	r3, [pc, #60]	; (800aa54 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800aa18:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa1a:	e010      	b.n	800aa3e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aa1c:	4b0b      	ldr	r3, [pc, #44]	; (800aa4c <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa28:	d106      	bne.n	800aa38 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800aa2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa30:	d102      	bne.n	800aa38 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800aa32:	4b09      	ldr	r3, [pc, #36]	; (800aa58 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800aa34:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa36:	e002      	b.n	800aa3e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800aa38:	2300      	movs	r3, #0
 800aa3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800aa3c:	e392      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800aa3e:	e391      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800aa40:	4b06      	ldr	r3, [pc, #24]	; (800aa5c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800aa42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa44:	e38e      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800aa46:	2300      	movs	r3, #0
 800aa48:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aa4a:	e38b      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800aa4c:	58024400 	.word	0x58024400
 800aa50:	03d09000 	.word	0x03d09000
 800aa54:	003d0900 	.word	0x003d0900
 800aa58:	007a1200 	.word	0x007a1200
 800aa5c:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aa66:	f040 809c 	bne.w	800aba2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800aa6a:	4b9d      	ldr	r3, [pc, #628]	; (800ace0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800aa6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa6e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800aa72:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800aa74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa76:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aa7a:	d054      	beq.n	800ab26 <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 800aa7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa7e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aa82:	f200 808b 	bhi.w	800ab9c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800aa86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa88:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800aa8c:	f000 8083 	beq.w	800ab96 <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 800aa90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa92:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800aa96:	f200 8081 	bhi.w	800ab9c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800aa9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aaa0:	d02f      	beq.n	800ab02 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 800aaa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aaa8:	d878      	bhi.n	800ab9c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800aaaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d004      	beq.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 800aab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aab6:	d012      	beq.n	800aade <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 800aab8:	e070      	b.n	800ab9c <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800aaba:	4b89      	ldr	r3, [pc, #548]	; (800ace0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aac2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aac6:	d107      	bne.n	800aad8 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800aac8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800aacc:	4618      	mov	r0, r3
 800aace:	f000 fe15 	bl	800b6fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800aad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aad4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aad6:	e345      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800aad8:	2300      	movs	r3, #0
 800aada:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aadc:	e342      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aade:	4b80      	ldr	r3, [pc, #512]	; (800ace0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800aae6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aaea:	d107      	bne.n	800aafc <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aaec:	f107 0318 	add.w	r3, r7, #24
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	f000 fb5b 	bl	800b1ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800aaf6:	69bb      	ldr	r3, [r7, #24]
 800aaf8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aafa:	e333      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800aafc:	2300      	movs	r3, #0
 800aafe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab00:	e330      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ab02:	4b77      	ldr	r3, [pc, #476]	; (800ace0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ab0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab0e:	d107      	bne.n	800ab20 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab10:	f107 030c 	add.w	r3, r7, #12
 800ab14:	4618      	mov	r0, r3
 800ab16:	f000 fc9d 	bl	800b454 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ab1e:	e321      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800ab20:	2300      	movs	r3, #0
 800ab22:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab24:	e31e      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800ab26:	4b6e      	ldr	r3, [pc, #440]	; (800ace0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800ab28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab2a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ab2e:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ab30:	4b6b      	ldr	r3, [pc, #428]	; (800ace0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f003 0304 	and.w	r3, r3, #4
 800ab38:	2b04      	cmp	r3, #4
 800ab3a:	d10c      	bne.n	800ab56 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 800ab3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d109      	bne.n	800ab56 <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ab42:	4b67      	ldr	r3, [pc, #412]	; (800ace0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	08db      	lsrs	r3, r3, #3
 800ab48:	f003 0303 	and.w	r3, r3, #3
 800ab4c:	4a65      	ldr	r2, [pc, #404]	; (800ace4 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800ab4e:	fa22 f303 	lsr.w	r3, r2, r3
 800ab52:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab54:	e01e      	b.n	800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ab56:	4b62      	ldr	r3, [pc, #392]	; (800ace0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab62:	d106      	bne.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800ab64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ab6a:	d102      	bne.n	800ab72 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800ab6c:	4b5e      	ldr	r3, [pc, #376]	; (800ace8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800ab6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab70:	e010      	b.n	800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ab72:	4b5b      	ldr	r3, [pc, #364]	; (800ace0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab7e:	d106      	bne.n	800ab8e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800ab80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab86:	d102      	bne.n	800ab8e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800ab88:	4b58      	ldr	r3, [pc, #352]	; (800acec <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800ab8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab8c:	e002      	b.n	800ab94 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800ab8e:	2300      	movs	r3, #0
 800ab90:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800ab92:	e2e7      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800ab94:	e2e6      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800ab96:	4b56      	ldr	r3, [pc, #344]	; (800acf0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ab98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ab9a:	e2e3      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aba0:	e2e0      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aba8:	f040 80a7 	bne.w	800acfa <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800abac:	4b4c      	ldr	r3, [pc, #304]	; (800ace0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800abae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abb0:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800abb4:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800abb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abb8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800abbc:	d055      	beq.n	800ac6a <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 800abbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abc0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800abc4:	f200 8096 	bhi.w	800acf4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800abc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abca:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800abce:	f000 8084 	beq.w	800acda <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 800abd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abd4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800abd8:	f200 808c 	bhi.w	800acf4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800abdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abde:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800abe2:	d030      	beq.n	800ac46 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 800abe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abe6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800abea:	f200 8083 	bhi.w	800acf4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 800abee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d004      	beq.n	800abfe <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800abf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abf6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800abfa:	d012      	beq.n	800ac22 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 800abfc:	e07a      	b.n	800acf4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800abfe:	4b38      	ldr	r3, [pc, #224]	; (800ace0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ac0a:	d107      	bne.n	800ac1c <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ac0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac10:	4618      	mov	r0, r3
 800ac12:	f000 fd73 	bl	800b6fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ac16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac18:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ac1a:	e2a3      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ac20:	e2a0      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ac22:	4b2f      	ldr	r3, [pc, #188]	; (800ace0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ac2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ac2e:	d107      	bne.n	800ac40 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac30:	f107 0318 	add.w	r3, r7, #24
 800ac34:	4618      	mov	r0, r3
 800ac36:	f000 fab9 	bl	800b1ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ac3a:	69bb      	ldr	r3, [r7, #24]
 800ac3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 800ac3e:	e291      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800ac40:	2300      	movs	r3, #0
 800ac42:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ac44:	e28e      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ac46:	4b26      	ldr	r3, [pc, #152]	; (800ace0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ac4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac52:	d107      	bne.n	800ac64 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac54:	f107 030c 	add.w	r3, r7, #12
 800ac58:	4618      	mov	r0, r3
 800ac5a:	f000 fbfb 	bl	800b454 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ac62:	e27f      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800ac64:	2300      	movs	r3, #0
 800ac66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ac68:	e27c      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800ac6a:	4b1d      	ldr	r3, [pc, #116]	; (800ace0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800ac6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac6e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ac72:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ac74:	4b1a      	ldr	r3, [pc, #104]	; (800ace0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f003 0304 	and.w	r3, r3, #4
 800ac7c:	2b04      	cmp	r3, #4
 800ac7e:	d10c      	bne.n	800ac9a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800ac80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d109      	bne.n	800ac9a <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ac86:	4b16      	ldr	r3, [pc, #88]	; (800ace0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	08db      	lsrs	r3, r3, #3
 800ac8c:	f003 0303 	and.w	r3, r3, #3
 800ac90:	4a14      	ldr	r2, [pc, #80]	; (800ace4 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 800ac92:	fa22 f303 	lsr.w	r3, r2, r3
 800ac96:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ac98:	e01e      	b.n	800acd8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ac9a:	4b11      	ldr	r3, [pc, #68]	; (800ace0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aca2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aca6:	d106      	bne.n	800acb6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800aca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acaa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800acae:	d102      	bne.n	800acb6 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800acb0:	4b0d      	ldr	r3, [pc, #52]	; (800ace8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 800acb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acb4:	e010      	b.n	800acd8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800acb6:	4b0a      	ldr	r3, [pc, #40]	; (800ace0 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800acbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800acc2:	d106      	bne.n	800acd2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 800acc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800acca:	d102      	bne.n	800acd2 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800accc:	4b07      	ldr	r3, [pc, #28]	; (800acec <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800acce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800acd0:	e002      	b.n	800acd8 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800acd2:	2300      	movs	r3, #0
 800acd4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800acd6:	e245      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800acd8:	e244      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800acda:	4b05      	ldr	r3, [pc, #20]	; (800acf0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800acdc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800acde:	e241      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800ace0:	58024400 	.word	0x58024400
 800ace4:	03d09000 	.word	0x03d09000
 800ace8:	003d0900 	.word	0x003d0900
 800acec:	007a1200 	.word	0x007a1200
 800acf0:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 800acf4:	2300      	movs	r3, #0
 800acf6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800acf8:	e234      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad00:	f040 809c 	bne.w	800ae3c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800ad04:	4b9b      	ldr	r3, [pc, #620]	; (800af74 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ad06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad08:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800ad0c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800ad0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ad14:	d054      	beq.n	800adc0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 800ad16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ad1c:	f200 808b 	bhi.w	800ae36 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800ad20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad22:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ad26:	f000 8083 	beq.w	800ae30 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 800ad2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad2c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ad30:	f200 8081 	bhi.w	800ae36 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800ad34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad3a:	d02f      	beq.n	800ad9c <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 800ad3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad42:	d878      	bhi.n	800ae36 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 800ad44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d004      	beq.n	800ad54 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800ad4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad50:	d012      	beq.n	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 800ad52:	e070      	b.n	800ae36 <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ad54:	4b87      	ldr	r3, [pc, #540]	; (800af74 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad60:	d107      	bne.n	800ad72 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ad62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ad66:	4618      	mov	r0, r3
 800ad68:	f000 fcc8 	bl	800b6fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ad6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad6e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ad70:	e1f8      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800ad72:	2300      	movs	r3, #0
 800ad74:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad76:	e1f5      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ad78:	4b7e      	ldr	r3, [pc, #504]	; (800af74 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ad84:	d107      	bne.n	800ad96 <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ad86:	f107 0318 	add.w	r3, r7, #24
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f000 fa0e 	bl	800b1ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ad90:	69bb      	ldr	r3, [r7, #24]
 800ad92:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ad94:	e1e6      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800ad96:	2300      	movs	r3, #0
 800ad98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ad9a:	e1e3      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ad9c:	4b75      	ldr	r3, [pc, #468]	; (800af74 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ada4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ada8:	d107      	bne.n	800adba <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800adaa:	f107 030c 	add.w	r3, r7, #12
 800adae:	4618      	mov	r0, r3
 800adb0:	f000 fb50 	bl	800b454 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800adb8:	e1d4      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800adba:	2300      	movs	r3, #0
 800adbc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800adbe:	e1d1      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800adc0:	4b6c      	ldr	r3, [pc, #432]	; (800af74 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800adc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800adc4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800adc8:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800adca:	4b6a      	ldr	r3, [pc, #424]	; (800af74 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	f003 0304 	and.w	r3, r3, #4
 800add2:	2b04      	cmp	r3, #4
 800add4:	d10c      	bne.n	800adf0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800add6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800add8:	2b00      	cmp	r3, #0
 800adda:	d109      	bne.n	800adf0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800addc:	4b65      	ldr	r3, [pc, #404]	; (800af74 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	08db      	lsrs	r3, r3, #3
 800ade2:	f003 0303 	and.w	r3, r3, #3
 800ade6:	4a64      	ldr	r2, [pc, #400]	; (800af78 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800ade8:	fa22 f303 	lsr.w	r3, r2, r3
 800adec:	63fb      	str	r3, [r7, #60]	; 0x3c
 800adee:	e01e      	b.n	800ae2e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800adf0:	4b60      	ldr	r3, [pc, #384]	; (800af74 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800adfc:	d106      	bne.n	800ae0c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 800adfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ae04:	d102      	bne.n	800ae0c <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800ae06:	4b5d      	ldr	r3, [pc, #372]	; (800af7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800ae08:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae0a:	e010      	b.n	800ae2e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ae0c:	4b59      	ldr	r3, [pc, #356]	; (800af74 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae18:	d106      	bne.n	800ae28 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800ae1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae20:	d102      	bne.n	800ae28 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800ae22:	4b57      	ldr	r3, [pc, #348]	; (800af80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800ae24:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae26:	e002      	b.n	800ae2e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800ae28:	2300      	movs	r3, #0
 800ae2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800ae2c:	e19a      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800ae2e:	e199      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800ae30:	4b54      	ldr	r3, [pc, #336]	; (800af84 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ae32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae34:	e196      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800ae36:	2300      	movs	r3, #0
 800ae38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae3a:	e193      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ae42:	d173      	bne.n	800af2c <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800ae44:	4b4b      	ldr	r3, [pc, #300]	; (800af74 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ae46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ae4c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800ae4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae54:	d02f      	beq.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800ae56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae5c:	d863      	bhi.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 800ae5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d004      	beq.n	800ae6e <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 800ae64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae6a:	d012      	beq.n	800ae92 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 800ae6c:	e05b      	b.n	800af26 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ae6e:	4b41      	ldr	r3, [pc, #260]	; (800af74 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ae7a:	d107      	bne.n	800ae8c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae7c:	f107 0318 	add.w	r3, r7, #24
 800ae80:	4618      	mov	r0, r3
 800ae82:	f000 f993 	bl	800b1ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ae86:	69bb      	ldr	r3, [r7, #24]
 800ae88:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800ae8a:	e16b      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800ae90:	e168      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ae92:	4b38      	ldr	r3, [pc, #224]	; (800af74 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae9e:	d107      	bne.n	800aeb0 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aea0:	f107 030c 	add.w	r3, r7, #12
 800aea4:	4618      	mov	r0, r3
 800aea6:	f000 fad5 	bl	800b454 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800aeaa:	697b      	ldr	r3, [r7, #20]
 800aeac:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800aeae:	e159      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800aeb4:	e156      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800aeb6:	4b2f      	ldr	r3, [pc, #188]	; (800af74 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aeb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aeba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800aebe:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800aec0:	4b2c      	ldr	r3, [pc, #176]	; (800af74 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	f003 0304 	and.w	r3, r3, #4
 800aec8:	2b04      	cmp	r3, #4
 800aeca:	d10c      	bne.n	800aee6 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 800aecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d109      	bne.n	800aee6 <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800aed2:	4b28      	ldr	r3, [pc, #160]	; (800af74 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	08db      	lsrs	r3, r3, #3
 800aed8:	f003 0303 	and.w	r3, r3, #3
 800aedc:	4a26      	ldr	r2, [pc, #152]	; (800af78 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 800aede:	fa22 f303 	lsr.w	r3, r2, r3
 800aee2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aee4:	e01e      	b.n	800af24 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800aee6:	4b23      	ldr	r3, [pc, #140]	; (800af74 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aeee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aef2:	d106      	bne.n	800af02 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 800aef4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aef6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aefa:	d102      	bne.n	800af02 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800aefc:	4b1f      	ldr	r3, [pc, #124]	; (800af7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 800aefe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af00:	e010      	b.n	800af24 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800af02:	4b1c      	ldr	r3, [pc, #112]	; (800af74 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800af0e:	d106      	bne.n	800af1e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 800af10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af16:	d102      	bne.n	800af1e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800af18:	4b19      	ldr	r3, [pc, #100]	; (800af80 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800af1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af1c:	e002      	b.n	800af24 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800af1e:	2300      	movs	r3, #0
 800af20:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800af22:	e11f      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800af24:	e11e      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800af26:	2300      	movs	r3, #0
 800af28:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800af2a:	e11b      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af32:	d13e      	bne.n	800afb2 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800af34:	4b0f      	ldr	r3, [pc, #60]	; (800af74 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800af36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800af3c:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800af3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af40:	2b00      	cmp	r3, #0
 800af42:	d004      	beq.n	800af4e <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 800af44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af4a:	d01d      	beq.n	800af88 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 800af4c:	e02e      	b.n	800afac <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800af4e:	4b09      	ldr	r3, [pc, #36]	; (800af74 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af5a:	d107      	bne.n	800af6c <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800af5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800af60:	4618      	mov	r0, r3
 800af62:	f000 fbcb 	bl	800b6fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800af66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af68:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800af6a:	e0fb      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800af6c:	2300      	movs	r3, #0
 800af6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800af70:	e0f8      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800af72:	bf00      	nop
 800af74:	58024400 	.word	0x58024400
 800af78:	03d09000 	.word	0x03d09000
 800af7c:	003d0900 	.word	0x003d0900
 800af80:	007a1200 	.word	0x007a1200
 800af84:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800af88:	4b79      	ldr	r3, [pc, #484]	; (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800af94:	d107      	bne.n	800afa6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af96:	f107 0318 	add.w	r3, r7, #24
 800af9a:	4618      	mov	r0, r3
 800af9c:	f000 f906 	bl	800b1ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800afa0:	6a3b      	ldr	r3, [r7, #32]
 800afa2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800afa4:	e0de      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800afa6:	2300      	movs	r3, #0
 800afa8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800afaa:	e0db      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800afac:	2300      	movs	r3, #0
 800afae:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800afb0:	e0d8      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800afb8:	f040 8085 	bne.w	800b0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800afbc:	4b6c      	ldr	r3, [pc, #432]	; (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800afbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afc0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800afc4:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800afc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800afcc:	d06b      	beq.n	800b0a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800afce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800afd4:	d874      	bhi.n	800b0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800afd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800afdc:	d056      	beq.n	800b08c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800afde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800afe4:	d86c      	bhi.n	800b0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800afe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afe8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800afec:	d03b      	beq.n	800b066 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800afee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aff0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aff4:	d864      	bhi.n	800b0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800aff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aff8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800affc:	d021      	beq.n	800b042 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800affe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b000:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b004:	d85c      	bhi.n	800b0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800b006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d004      	beq.n	800b016 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800b00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b00e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b012:	d004      	beq.n	800b01e <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800b014:	e054      	b.n	800b0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b016:	f000 f8b3 	bl	800b180 <HAL_RCCEx_GetD3PCLK1Freq>
 800b01a:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800b01c:	e0a2      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b01e:	4b54      	ldr	r3, [pc, #336]	; (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b026:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b02a:	d107      	bne.n	800b03c <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b02c:	f107 0318 	add.w	r3, r7, #24
 800b030:	4618      	mov	r0, r3
 800b032:	f000 f8bb 	bl	800b1ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b036:	69fb      	ldr	r3, [r7, #28]
 800b038:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b03a:	e093      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800b03c:	2300      	movs	r3, #0
 800b03e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b040:	e090      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b042:	4b4b      	ldr	r3, [pc, #300]	; (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b04a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b04e:	d107      	bne.n	800b060 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b050:	f107 030c 	add.w	r3, r7, #12
 800b054:	4618      	mov	r0, r3
 800b056:	f000 f9fd 	bl	800b454 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b05a:	693b      	ldr	r3, [r7, #16]
 800b05c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b05e:	e081      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800b060:	2300      	movs	r3, #0
 800b062:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b064:	e07e      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b066:	4b42      	ldr	r3, [pc, #264]	; (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	f003 0304 	and.w	r3, r3, #4
 800b06e:	2b04      	cmp	r3, #4
 800b070:	d109      	bne.n	800b086 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b072:	4b3f      	ldr	r3, [pc, #252]	; (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	08db      	lsrs	r3, r3, #3
 800b078:	f003 0303 	and.w	r3, r3, #3
 800b07c:	4a3d      	ldr	r2, [pc, #244]	; (800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800b07e:	fa22 f303 	lsr.w	r3, r2, r3
 800b082:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b084:	e06e      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800b086:	2300      	movs	r3, #0
 800b088:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b08a:	e06b      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b08c:	4b38      	ldr	r3, [pc, #224]	; (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b094:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b098:	d102      	bne.n	800b0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 800b09a:	4b37      	ldr	r3, [pc, #220]	; (800b178 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b09c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800b09e:	e061      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b0a4:	e05e      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b0a6:	4b32      	ldr	r3, [pc, #200]	; (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b0b2:	d102      	bne.n	800b0ba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 800b0b4:	4b31      	ldr	r3, [pc, #196]	; (800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b0b6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b0b8:	e054      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b0be:	e051      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b0c4:	e04e      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b0cc:	d148      	bne.n	800b160 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800b0ce:	4b28      	ldr	r3, [pc, #160]	; (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b0d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b0d6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b0d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0de:	d02a      	beq.n	800b136 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 800b0e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0e6:	d838      	bhi.n	800b15a <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 800b0e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d004      	beq.n	800b0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 800b0ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b0f4:	d00d      	beq.n	800b112 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 800b0f6:	e030      	b.n	800b15a <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b0f8:	4b1d      	ldr	r3, [pc, #116]	; (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b100:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b104:	d102      	bne.n	800b10c <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 800b106:	4b1d      	ldr	r3, [pc, #116]	; (800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b108:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b10a:	e02b      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800b10c:	2300      	movs	r3, #0
 800b10e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b110:	e028      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b112:	4b17      	ldr	r3, [pc, #92]	; (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b11a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b11e:	d107      	bne.n	800b130 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b120:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b124:	4618      	mov	r0, r3
 800b126:	f000 fae9 	bl	800b6fc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b12c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b12e:	e019      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800b130:	2300      	movs	r3, #0
 800b132:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b134:	e016      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b136:	4b0e      	ldr	r3, [pc, #56]	; (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b13e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b142:	d107      	bne.n	800b154 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b144:	f107 0318 	add.w	r3, r7, #24
 800b148:	4618      	mov	r0, r3
 800b14a:	f000 f82f 	bl	800b1ac <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b14e:	69fb      	ldr	r3, [r7, #28]
 800b150:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800b152:	e007      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800b154:	2300      	movs	r3, #0
 800b156:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b158:	e004      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800b15a:	2300      	movs	r3, #0
 800b15c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b15e:	e001      	b.n	800b164 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 800b160:	2300      	movs	r3, #0
 800b162:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800b164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b166:	4618      	mov	r0, r3
 800b168:	3740      	adds	r7, #64	; 0x40
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bd80      	pop	{r7, pc}
 800b16e:	bf00      	nop
 800b170:	58024400 	.word	0x58024400
 800b174:	03d09000 	.word	0x03d09000
 800b178:	003d0900 	.word	0x003d0900
 800b17c:	007a1200 	.word	0x007a1200

0800b180 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b184:	f7fe fb88 	bl	8009898 <HAL_RCC_GetHCLKFreq>
 800b188:	4602      	mov	r2, r0
 800b18a:	4b06      	ldr	r3, [pc, #24]	; (800b1a4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b18c:	6a1b      	ldr	r3, [r3, #32]
 800b18e:	091b      	lsrs	r3, r3, #4
 800b190:	f003 0307 	and.w	r3, r3, #7
 800b194:	4904      	ldr	r1, [pc, #16]	; (800b1a8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b196:	5ccb      	ldrb	r3, [r1, r3]
 800b198:	f003 031f 	and.w	r3, r3, #31
 800b19c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	bd80      	pop	{r7, pc}
 800b1a4:	58024400 	.word	0x58024400
 800b1a8:	08011c20 	.word	0x08011c20

0800b1ac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800b1ac:	b480      	push	{r7}
 800b1ae:	b089      	sub	sp, #36	; 0x24
 800b1b0:	af00      	add	r7, sp, #0
 800b1b2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b1b4:	4ba1      	ldr	r3, [pc, #644]	; (800b43c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1b8:	f003 0303 	and.w	r3, r3, #3
 800b1bc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800b1be:	4b9f      	ldr	r3, [pc, #636]	; (800b43c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1c2:	0b1b      	lsrs	r3, r3, #12
 800b1c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b1c8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b1ca:	4b9c      	ldr	r3, [pc, #624]	; (800b43c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1ce:	091b      	lsrs	r3, r3, #4
 800b1d0:	f003 0301 	and.w	r3, r3, #1
 800b1d4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800b1d6:	4b99      	ldr	r3, [pc, #612]	; (800b43c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b1d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1da:	08db      	lsrs	r3, r3, #3
 800b1dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b1e0:	693a      	ldr	r2, [r7, #16]
 800b1e2:	fb02 f303 	mul.w	r3, r2, r3
 800b1e6:	ee07 3a90 	vmov	s15, r3
 800b1ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b1f2:	697b      	ldr	r3, [r7, #20]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	f000 8111 	beq.w	800b41c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b1fa:	69bb      	ldr	r3, [r7, #24]
 800b1fc:	2b02      	cmp	r3, #2
 800b1fe:	f000 8083 	beq.w	800b308 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b202:	69bb      	ldr	r3, [r7, #24]
 800b204:	2b02      	cmp	r3, #2
 800b206:	f200 80a1 	bhi.w	800b34c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b20a:	69bb      	ldr	r3, [r7, #24]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d003      	beq.n	800b218 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b210:	69bb      	ldr	r3, [r7, #24]
 800b212:	2b01      	cmp	r3, #1
 800b214:	d056      	beq.n	800b2c4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b216:	e099      	b.n	800b34c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b218:	4b88      	ldr	r3, [pc, #544]	; (800b43c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	f003 0320 	and.w	r3, r3, #32
 800b220:	2b00      	cmp	r3, #0
 800b222:	d02d      	beq.n	800b280 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b224:	4b85      	ldr	r3, [pc, #532]	; (800b43c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	08db      	lsrs	r3, r3, #3
 800b22a:	f003 0303 	and.w	r3, r3, #3
 800b22e:	4a84      	ldr	r2, [pc, #528]	; (800b440 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b230:	fa22 f303 	lsr.w	r3, r2, r3
 800b234:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	ee07 3a90 	vmov	s15, r3
 800b23c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b240:	697b      	ldr	r3, [r7, #20]
 800b242:	ee07 3a90 	vmov	s15, r3
 800b246:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b24a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b24e:	4b7b      	ldr	r3, [pc, #492]	; (800b43c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b256:	ee07 3a90 	vmov	s15, r3
 800b25a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b25e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b262:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b444 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b26a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b26e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b27a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b27e:	e087      	b.n	800b390 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b280:	697b      	ldr	r3, [r7, #20]
 800b282:	ee07 3a90 	vmov	s15, r3
 800b286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b28a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b448 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b28e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b292:	4b6a      	ldr	r3, [pc, #424]	; (800b43c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b29a:	ee07 3a90 	vmov	s15, r3
 800b29e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2a6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b444 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b2aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b2b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b2c2:	e065      	b.n	800b390 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b2c4:	697b      	ldr	r3, [r7, #20]
 800b2c6:	ee07 3a90 	vmov	s15, r3
 800b2ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2ce:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b44c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b2d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b2d6:	4b59      	ldr	r3, [pc, #356]	; (800b43c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b2d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2de:	ee07 3a90 	vmov	s15, r3
 800b2e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2ea:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b444 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b2ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b2fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b302:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b306:	e043      	b.n	800b390 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b308:	697b      	ldr	r3, [r7, #20]
 800b30a:	ee07 3a90 	vmov	s15, r3
 800b30e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b312:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b450 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b31a:	4b48      	ldr	r3, [pc, #288]	; (800b43c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b31c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b31e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b322:	ee07 3a90 	vmov	s15, r3
 800b326:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b32a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b32e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b444 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b332:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b336:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b33a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b33e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b342:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b346:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b34a:	e021      	b.n	800b390 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b34c:	697b      	ldr	r3, [r7, #20]
 800b34e:	ee07 3a90 	vmov	s15, r3
 800b352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b356:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b44c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b35a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b35e:	4b37      	ldr	r3, [pc, #220]	; (800b43c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b362:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b366:	ee07 3a90 	vmov	s15, r3
 800b36a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b36e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b372:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b444 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b376:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b37a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b37e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b382:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b386:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b38a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b38e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800b390:	4b2a      	ldr	r3, [pc, #168]	; (800b43c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b394:	0a5b      	lsrs	r3, r3, #9
 800b396:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b39a:	ee07 3a90 	vmov	s15, r3
 800b39e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b3a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b3aa:	edd7 6a07 	vldr	s13, [r7, #28]
 800b3ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3b6:	ee17 2a90 	vmov	r2, s15
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800b3be:	4b1f      	ldr	r3, [pc, #124]	; (800b43c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b3c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3c2:	0c1b      	lsrs	r3, r3, #16
 800b3c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3c8:	ee07 3a90 	vmov	s15, r3
 800b3cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b3d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b3d8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b3dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b3e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b3e4:	ee17 2a90 	vmov	r2, s15
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800b3ec:	4b13      	ldr	r3, [pc, #76]	; (800b43c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b3ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3f0:	0e1b      	lsrs	r3, r3, #24
 800b3f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3f6:	ee07 3a90 	vmov	s15, r3
 800b3fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b402:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b406:	edd7 6a07 	vldr	s13, [r7, #28]
 800b40a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b40e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b412:	ee17 2a90 	vmov	r2, s15
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b41a:	e008      	b.n	800b42e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2200      	movs	r2, #0
 800b420:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	2200      	movs	r2, #0
 800b426:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2200      	movs	r2, #0
 800b42c:	609a      	str	r2, [r3, #8]
}
 800b42e:	bf00      	nop
 800b430:	3724      	adds	r7, #36	; 0x24
 800b432:	46bd      	mov	sp, r7
 800b434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b438:	4770      	bx	lr
 800b43a:	bf00      	nop
 800b43c:	58024400 	.word	0x58024400
 800b440:	03d09000 	.word	0x03d09000
 800b444:	46000000 	.word	0x46000000
 800b448:	4c742400 	.word	0x4c742400
 800b44c:	4a742400 	.word	0x4a742400
 800b450:	4af42400 	.word	0x4af42400

0800b454 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800b454:	b480      	push	{r7}
 800b456:	b089      	sub	sp, #36	; 0x24
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b45c:	4ba1      	ldr	r3, [pc, #644]	; (800b6e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b45e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b460:	f003 0303 	and.w	r3, r3, #3
 800b464:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800b466:	4b9f      	ldr	r3, [pc, #636]	; (800b6e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b46a:	0d1b      	lsrs	r3, r3, #20
 800b46c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b470:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b472:	4b9c      	ldr	r3, [pc, #624]	; (800b6e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b476:	0a1b      	lsrs	r3, r3, #8
 800b478:	f003 0301 	and.w	r3, r3, #1
 800b47c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800b47e:	4b99      	ldr	r3, [pc, #612]	; (800b6e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b482:	08db      	lsrs	r3, r3, #3
 800b484:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b488:	693a      	ldr	r2, [r7, #16]
 800b48a:	fb02 f303 	mul.w	r3, r2, r3
 800b48e:	ee07 3a90 	vmov	s15, r3
 800b492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b496:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b49a:	697b      	ldr	r3, [r7, #20]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	f000 8111 	beq.w	800b6c4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b4a2:	69bb      	ldr	r3, [r7, #24]
 800b4a4:	2b02      	cmp	r3, #2
 800b4a6:	f000 8083 	beq.w	800b5b0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b4aa:	69bb      	ldr	r3, [r7, #24]
 800b4ac:	2b02      	cmp	r3, #2
 800b4ae:	f200 80a1 	bhi.w	800b5f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b4b2:	69bb      	ldr	r3, [r7, #24]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d003      	beq.n	800b4c0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b4b8:	69bb      	ldr	r3, [r7, #24]
 800b4ba:	2b01      	cmp	r3, #1
 800b4bc:	d056      	beq.n	800b56c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b4be:	e099      	b.n	800b5f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b4c0:	4b88      	ldr	r3, [pc, #544]	; (800b6e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	f003 0320 	and.w	r3, r3, #32
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d02d      	beq.n	800b528 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b4cc:	4b85      	ldr	r3, [pc, #532]	; (800b6e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	08db      	lsrs	r3, r3, #3
 800b4d2:	f003 0303 	and.w	r3, r3, #3
 800b4d6:	4a84      	ldr	r2, [pc, #528]	; (800b6e8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b4d8:	fa22 f303 	lsr.w	r3, r2, r3
 800b4dc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b4de:	68bb      	ldr	r3, [r7, #8]
 800b4e0:	ee07 3a90 	vmov	s15, r3
 800b4e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4e8:	697b      	ldr	r3, [r7, #20]
 800b4ea:	ee07 3a90 	vmov	s15, r3
 800b4ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4f6:	4b7b      	ldr	r3, [pc, #492]	; (800b6e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b4f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4fe:	ee07 3a90 	vmov	s15, r3
 800b502:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b506:	ed97 6a03 	vldr	s12, [r7, #12]
 800b50a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b6ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b50e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b512:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b516:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b51a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b51e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b522:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b526:	e087      	b.n	800b638 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b528:	697b      	ldr	r3, [r7, #20]
 800b52a:	ee07 3a90 	vmov	s15, r3
 800b52e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b532:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b6f0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b536:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b53a:	4b6a      	ldr	r3, [pc, #424]	; (800b6e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b53c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b53e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b542:	ee07 3a90 	vmov	s15, r3
 800b546:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b54a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b54e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b6ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b552:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b556:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b55a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b55e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b562:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b566:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b56a:	e065      	b.n	800b638 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b56c:	697b      	ldr	r3, [r7, #20]
 800b56e:	ee07 3a90 	vmov	s15, r3
 800b572:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b576:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b6f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b57a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b57e:	4b59      	ldr	r3, [pc, #356]	; (800b6e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b586:	ee07 3a90 	vmov	s15, r3
 800b58a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b58e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b592:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b6ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b596:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b59a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b59e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b5a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b5ae:	e043      	b.n	800b638 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b5b0:	697b      	ldr	r3, [r7, #20]
 800b5b2:	ee07 3a90 	vmov	s15, r3
 800b5b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5ba:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b6f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b5be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5c2:	4b48      	ldr	r3, [pc, #288]	; (800b6e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b5c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5ca:	ee07 3a90 	vmov	s15, r3
 800b5ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b5d6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b6ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b5da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b5e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b5f2:	e021      	b.n	800b638 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b5f4:	697b      	ldr	r3, [r7, #20]
 800b5f6:	ee07 3a90 	vmov	s15, r3
 800b5fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5fe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b6f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b602:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b606:	4b37      	ldr	r3, [pc, #220]	; (800b6e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b60a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b60e:	ee07 3a90 	vmov	s15, r3
 800b612:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b616:	ed97 6a03 	vldr	s12, [r7, #12]
 800b61a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b6ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b61e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b622:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b626:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b62a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b62e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b632:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b636:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800b638:	4b2a      	ldr	r3, [pc, #168]	; (800b6e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b63a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b63c:	0a5b      	lsrs	r3, r3, #9
 800b63e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b642:	ee07 3a90 	vmov	s15, r3
 800b646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b64a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b64e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b652:	edd7 6a07 	vldr	s13, [r7, #28]
 800b656:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b65a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b65e:	ee17 2a90 	vmov	r2, s15
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800b666:	4b1f      	ldr	r3, [pc, #124]	; (800b6e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b66a:	0c1b      	lsrs	r3, r3, #16
 800b66c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b670:	ee07 3a90 	vmov	s15, r3
 800b674:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b678:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b67c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b680:	edd7 6a07 	vldr	s13, [r7, #28]
 800b684:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b688:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b68c:	ee17 2a90 	vmov	r2, s15
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800b694:	4b13      	ldr	r3, [pc, #76]	; (800b6e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b698:	0e1b      	lsrs	r3, r3, #24
 800b69a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b69e:	ee07 3a90 	vmov	s15, r3
 800b6a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b6aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b6ae:	edd7 6a07 	vldr	s13, [r7, #28]
 800b6b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b6b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6ba:	ee17 2a90 	vmov	r2, s15
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b6c2:	e008      	b.n	800b6d6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	609a      	str	r2, [r3, #8]
}
 800b6d6:	bf00      	nop
 800b6d8:	3724      	adds	r7, #36	; 0x24
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e0:	4770      	bx	lr
 800b6e2:	bf00      	nop
 800b6e4:	58024400 	.word	0x58024400
 800b6e8:	03d09000 	.word	0x03d09000
 800b6ec:	46000000 	.word	0x46000000
 800b6f0:	4c742400 	.word	0x4c742400
 800b6f4:	4a742400 	.word	0x4a742400
 800b6f8:	4af42400 	.word	0x4af42400

0800b6fc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800b6fc:	b480      	push	{r7}
 800b6fe:	b089      	sub	sp, #36	; 0x24
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b704:	4ba0      	ldr	r3, [pc, #640]	; (800b988 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b708:	f003 0303 	and.w	r3, r3, #3
 800b70c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800b70e:	4b9e      	ldr	r3, [pc, #632]	; (800b988 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b712:	091b      	lsrs	r3, r3, #4
 800b714:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b718:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b71a:	4b9b      	ldr	r3, [pc, #620]	; (800b988 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b71c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b71e:	f003 0301 	and.w	r3, r3, #1
 800b722:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800b724:	4b98      	ldr	r3, [pc, #608]	; (800b988 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b728:	08db      	lsrs	r3, r3, #3
 800b72a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b72e:	693a      	ldr	r2, [r7, #16]
 800b730:	fb02 f303 	mul.w	r3, r2, r3
 800b734:	ee07 3a90 	vmov	s15, r3
 800b738:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b73c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b740:	697b      	ldr	r3, [r7, #20]
 800b742:	2b00      	cmp	r3, #0
 800b744:	f000 8111 	beq.w	800b96a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b748:	69bb      	ldr	r3, [r7, #24]
 800b74a:	2b02      	cmp	r3, #2
 800b74c:	f000 8083 	beq.w	800b856 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b750:	69bb      	ldr	r3, [r7, #24]
 800b752:	2b02      	cmp	r3, #2
 800b754:	f200 80a1 	bhi.w	800b89a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b758:	69bb      	ldr	r3, [r7, #24]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d003      	beq.n	800b766 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b75e:	69bb      	ldr	r3, [r7, #24]
 800b760:	2b01      	cmp	r3, #1
 800b762:	d056      	beq.n	800b812 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b764:	e099      	b.n	800b89a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b766:	4b88      	ldr	r3, [pc, #544]	; (800b988 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	f003 0320 	and.w	r3, r3, #32
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d02d      	beq.n	800b7ce <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b772:	4b85      	ldr	r3, [pc, #532]	; (800b988 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	08db      	lsrs	r3, r3, #3
 800b778:	f003 0303 	and.w	r3, r3, #3
 800b77c:	4a83      	ldr	r2, [pc, #524]	; (800b98c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b77e:	fa22 f303 	lsr.w	r3, r2, r3
 800b782:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	ee07 3a90 	vmov	s15, r3
 800b78a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b78e:	697b      	ldr	r3, [r7, #20]
 800b790:	ee07 3a90 	vmov	s15, r3
 800b794:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b798:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b79c:	4b7a      	ldr	r3, [pc, #488]	; (800b988 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b79e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7a4:	ee07 3a90 	vmov	s15, r3
 800b7a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7ac:	ed97 6a03 	vldr	s12, [r7, #12]
 800b7b0:	eddf 5a77 	vldr	s11, [pc, #476]	; 800b990 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b7b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b7c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7c8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b7cc:	e087      	b.n	800b8de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b7ce:	697b      	ldr	r3, [r7, #20]
 800b7d0:	ee07 3a90 	vmov	s15, r3
 800b7d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7d8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800b994 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b7dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7e0:	4b69      	ldr	r3, [pc, #420]	; (800b988 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b7e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7e8:	ee07 3a90 	vmov	s15, r3
 800b7ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7f0:	ed97 6a03 	vldr	s12, [r7, #12]
 800b7f4:	eddf 5a66 	vldr	s11, [pc, #408]	; 800b990 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b7f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b800:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b804:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b808:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b80c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b810:	e065      	b.n	800b8de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	ee07 3a90 	vmov	s15, r3
 800b818:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b81c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800b998 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b820:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b824:	4b58      	ldr	r3, [pc, #352]	; (800b988 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b828:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b82c:	ee07 3a90 	vmov	s15, r3
 800b830:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b834:	ed97 6a03 	vldr	s12, [r7, #12]
 800b838:	eddf 5a55 	vldr	s11, [pc, #340]	; 800b990 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b83c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b840:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b844:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b848:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b84c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b850:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b854:	e043      	b.n	800b8de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b856:	697b      	ldr	r3, [r7, #20]
 800b858:	ee07 3a90 	vmov	s15, r3
 800b85c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b860:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800b99c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b864:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b868:	4b47      	ldr	r3, [pc, #284]	; (800b988 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b86a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b86c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b870:	ee07 3a90 	vmov	s15, r3
 800b874:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b878:	ed97 6a03 	vldr	s12, [r7, #12]
 800b87c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b990 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b880:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b884:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b888:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b88c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b890:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b894:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b898:	e021      	b.n	800b8de <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	ee07 3a90 	vmov	s15, r3
 800b8a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8a4:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800b994 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b8a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8ac:	4b36      	ldr	r3, [pc, #216]	; (800b988 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b8ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8b4:	ee07 3a90 	vmov	s15, r3
 800b8b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8bc:	ed97 6a03 	vldr	s12, [r7, #12]
 800b8c0:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b990 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b8c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b8d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8d8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b8dc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800b8de:	4b2a      	ldr	r3, [pc, #168]	; (800b988 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b8e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8e2:	0a5b      	lsrs	r3, r3, #9
 800b8e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b8e8:	ee07 3a90 	vmov	s15, r3
 800b8ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b8f4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b8f8:	edd7 6a07 	vldr	s13, [r7, #28]
 800b8fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b900:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b904:	ee17 2a90 	vmov	r2, s15
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800b90c:	4b1e      	ldr	r3, [pc, #120]	; (800b988 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b90e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b910:	0c1b      	lsrs	r3, r3, #16
 800b912:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b916:	ee07 3a90 	vmov	s15, r3
 800b91a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b91e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b922:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b926:	edd7 6a07 	vldr	s13, [r7, #28]
 800b92a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b92e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b932:	ee17 2a90 	vmov	r2, s15
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800b93a:	4b13      	ldr	r3, [pc, #76]	; (800b988 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b93c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b93e:	0e1b      	lsrs	r3, r3, #24
 800b940:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b944:	ee07 3a90 	vmov	s15, r3
 800b948:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b94c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b950:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b954:	edd7 6a07 	vldr	s13, [r7, #28]
 800b958:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b95c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b960:	ee17 2a90 	vmov	r2, s15
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b968:	e008      	b.n	800b97c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	2200      	movs	r2, #0
 800b96e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2200      	movs	r2, #0
 800b974:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	2200      	movs	r2, #0
 800b97a:	609a      	str	r2, [r3, #8]
}
 800b97c:	bf00      	nop
 800b97e:	3724      	adds	r7, #36	; 0x24
 800b980:	46bd      	mov	sp, r7
 800b982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b986:	4770      	bx	lr
 800b988:	58024400 	.word	0x58024400
 800b98c:	03d09000 	.word	0x03d09000
 800b990:	46000000 	.word	0x46000000
 800b994:	4c742400 	.word	0x4c742400
 800b998:	4a742400 	.word	0x4a742400
 800b99c:	4af42400 	.word	0x4af42400

0800b9a0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b084      	sub	sp, #16
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
 800b9a8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b9ae:	4b53      	ldr	r3, [pc, #332]	; (800bafc <RCCEx_PLL2_Config+0x15c>)
 800b9b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9b2:	f003 0303 	and.w	r3, r3, #3
 800b9b6:	2b03      	cmp	r3, #3
 800b9b8:	d101      	bne.n	800b9be <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b9ba:	2301      	movs	r3, #1
 800b9bc:	e099      	b.n	800baf2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b9be:	4b4f      	ldr	r3, [pc, #316]	; (800bafc <RCCEx_PLL2_Config+0x15c>)
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	4a4e      	ldr	r2, [pc, #312]	; (800bafc <RCCEx_PLL2_Config+0x15c>)
 800b9c4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b9c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b9ca:	f7f8 fb71 	bl	80040b0 <HAL_GetTick>
 800b9ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b9d0:	e008      	b.n	800b9e4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800b9d2:	f7f8 fb6d 	bl	80040b0 <HAL_GetTick>
 800b9d6:	4602      	mov	r2, r0
 800b9d8:	68bb      	ldr	r3, [r7, #8]
 800b9da:	1ad3      	subs	r3, r2, r3
 800b9dc:	2b02      	cmp	r3, #2
 800b9de:	d901      	bls.n	800b9e4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b9e0:	2303      	movs	r3, #3
 800b9e2:	e086      	b.n	800baf2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b9e4:	4b45      	ldr	r3, [pc, #276]	; (800bafc <RCCEx_PLL2_Config+0x15c>)
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d1f0      	bne.n	800b9d2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b9f0:	4b42      	ldr	r3, [pc, #264]	; (800bafc <RCCEx_PLL2_Config+0x15c>)
 800b9f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b9f4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	031b      	lsls	r3, r3, #12
 800b9fe:	493f      	ldr	r1, [pc, #252]	; (800bafc <RCCEx_PLL2_Config+0x15c>)
 800ba00:	4313      	orrs	r3, r2
 800ba02:	628b      	str	r3, [r1, #40]	; 0x28
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	685b      	ldr	r3, [r3, #4]
 800ba08:	3b01      	subs	r3, #1
 800ba0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	689b      	ldr	r3, [r3, #8]
 800ba12:	3b01      	subs	r3, #1
 800ba14:	025b      	lsls	r3, r3, #9
 800ba16:	b29b      	uxth	r3, r3
 800ba18:	431a      	orrs	r2, r3
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	68db      	ldr	r3, [r3, #12]
 800ba1e:	3b01      	subs	r3, #1
 800ba20:	041b      	lsls	r3, r3, #16
 800ba22:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ba26:	431a      	orrs	r2, r3
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	691b      	ldr	r3, [r3, #16]
 800ba2c:	3b01      	subs	r3, #1
 800ba2e:	061b      	lsls	r3, r3, #24
 800ba30:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ba34:	4931      	ldr	r1, [pc, #196]	; (800bafc <RCCEx_PLL2_Config+0x15c>)
 800ba36:	4313      	orrs	r3, r2
 800ba38:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ba3a:	4b30      	ldr	r3, [pc, #192]	; (800bafc <RCCEx_PLL2_Config+0x15c>)
 800ba3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba3e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	695b      	ldr	r3, [r3, #20]
 800ba46:	492d      	ldr	r1, [pc, #180]	; (800bafc <RCCEx_PLL2_Config+0x15c>)
 800ba48:	4313      	orrs	r3, r2
 800ba4a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ba4c:	4b2b      	ldr	r3, [pc, #172]	; (800bafc <RCCEx_PLL2_Config+0x15c>)
 800ba4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba50:	f023 0220 	bic.w	r2, r3, #32
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	699b      	ldr	r3, [r3, #24]
 800ba58:	4928      	ldr	r1, [pc, #160]	; (800bafc <RCCEx_PLL2_Config+0x15c>)
 800ba5a:	4313      	orrs	r3, r2
 800ba5c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ba5e:	4b27      	ldr	r3, [pc, #156]	; (800bafc <RCCEx_PLL2_Config+0x15c>)
 800ba60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba62:	4a26      	ldr	r2, [pc, #152]	; (800bafc <RCCEx_PLL2_Config+0x15c>)
 800ba64:	f023 0310 	bic.w	r3, r3, #16
 800ba68:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ba6a:	4b24      	ldr	r3, [pc, #144]	; (800bafc <RCCEx_PLL2_Config+0x15c>)
 800ba6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ba6e:	4b24      	ldr	r3, [pc, #144]	; (800bb00 <RCCEx_PLL2_Config+0x160>)
 800ba70:	4013      	ands	r3, r2
 800ba72:	687a      	ldr	r2, [r7, #4]
 800ba74:	69d2      	ldr	r2, [r2, #28]
 800ba76:	00d2      	lsls	r2, r2, #3
 800ba78:	4920      	ldr	r1, [pc, #128]	; (800bafc <RCCEx_PLL2_Config+0x15c>)
 800ba7a:	4313      	orrs	r3, r2
 800ba7c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800ba7e:	4b1f      	ldr	r3, [pc, #124]	; (800bafc <RCCEx_PLL2_Config+0x15c>)
 800ba80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba82:	4a1e      	ldr	r2, [pc, #120]	; (800bafc <RCCEx_PLL2_Config+0x15c>)
 800ba84:	f043 0310 	orr.w	r3, r3, #16
 800ba88:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d106      	bne.n	800ba9e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800ba90:	4b1a      	ldr	r3, [pc, #104]	; (800bafc <RCCEx_PLL2_Config+0x15c>)
 800ba92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba94:	4a19      	ldr	r2, [pc, #100]	; (800bafc <RCCEx_PLL2_Config+0x15c>)
 800ba96:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ba9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800ba9c:	e00f      	b.n	800babe <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	2b01      	cmp	r3, #1
 800baa2:	d106      	bne.n	800bab2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800baa4:	4b15      	ldr	r3, [pc, #84]	; (800bafc <RCCEx_PLL2_Config+0x15c>)
 800baa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baa8:	4a14      	ldr	r2, [pc, #80]	; (800bafc <RCCEx_PLL2_Config+0x15c>)
 800baaa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800baae:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bab0:	e005      	b.n	800babe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800bab2:	4b12      	ldr	r3, [pc, #72]	; (800bafc <RCCEx_PLL2_Config+0x15c>)
 800bab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bab6:	4a11      	ldr	r2, [pc, #68]	; (800bafc <RCCEx_PLL2_Config+0x15c>)
 800bab8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800babc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800babe:	4b0f      	ldr	r3, [pc, #60]	; (800bafc <RCCEx_PLL2_Config+0x15c>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	4a0e      	ldr	r2, [pc, #56]	; (800bafc <RCCEx_PLL2_Config+0x15c>)
 800bac4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bac8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800baca:	f7f8 faf1 	bl	80040b0 <HAL_GetTick>
 800bace:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bad0:	e008      	b.n	800bae4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800bad2:	f7f8 faed 	bl	80040b0 <HAL_GetTick>
 800bad6:	4602      	mov	r2, r0
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	1ad3      	subs	r3, r2, r3
 800badc:	2b02      	cmp	r3, #2
 800bade:	d901      	bls.n	800bae4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bae0:	2303      	movs	r3, #3
 800bae2:	e006      	b.n	800baf2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bae4:	4b05      	ldr	r3, [pc, #20]	; (800bafc <RCCEx_PLL2_Config+0x15c>)
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800baec:	2b00      	cmp	r3, #0
 800baee:	d0f0      	beq.n	800bad2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800baf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800baf2:	4618      	mov	r0, r3
 800baf4:	3710      	adds	r7, #16
 800baf6:	46bd      	mov	sp, r7
 800baf8:	bd80      	pop	{r7, pc}
 800bafa:	bf00      	nop
 800bafc:	58024400 	.word	0x58024400
 800bb00:	ffff0007 	.word	0xffff0007

0800bb04 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b084      	sub	sp, #16
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	6078      	str	r0, [r7, #4]
 800bb0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bb0e:	2300      	movs	r3, #0
 800bb10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bb12:	4b53      	ldr	r3, [pc, #332]	; (800bc60 <RCCEx_PLL3_Config+0x15c>)
 800bb14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb16:	f003 0303 	and.w	r3, r3, #3
 800bb1a:	2b03      	cmp	r3, #3
 800bb1c:	d101      	bne.n	800bb22 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800bb1e:	2301      	movs	r3, #1
 800bb20:	e099      	b.n	800bc56 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800bb22:	4b4f      	ldr	r3, [pc, #316]	; (800bc60 <RCCEx_PLL3_Config+0x15c>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	4a4e      	ldr	r2, [pc, #312]	; (800bc60 <RCCEx_PLL3_Config+0x15c>)
 800bb28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bb2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb2e:	f7f8 fabf 	bl	80040b0 <HAL_GetTick>
 800bb32:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bb34:	e008      	b.n	800bb48 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800bb36:	f7f8 fabb 	bl	80040b0 <HAL_GetTick>
 800bb3a:	4602      	mov	r2, r0
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	1ad3      	subs	r3, r2, r3
 800bb40:	2b02      	cmp	r3, #2
 800bb42:	d901      	bls.n	800bb48 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bb44:	2303      	movs	r3, #3
 800bb46:	e086      	b.n	800bc56 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bb48:	4b45      	ldr	r3, [pc, #276]	; (800bc60 <RCCEx_PLL3_Config+0x15c>)
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d1f0      	bne.n	800bb36 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800bb54:	4b42      	ldr	r3, [pc, #264]	; (800bc60 <RCCEx_PLL3_Config+0x15c>)
 800bb56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb58:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	051b      	lsls	r3, r3, #20
 800bb62:	493f      	ldr	r1, [pc, #252]	; (800bc60 <RCCEx_PLL3_Config+0x15c>)
 800bb64:	4313      	orrs	r3, r2
 800bb66:	628b      	str	r3, [r1, #40]	; 0x28
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	685b      	ldr	r3, [r3, #4]
 800bb6c:	3b01      	subs	r3, #1
 800bb6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	689b      	ldr	r3, [r3, #8]
 800bb76:	3b01      	subs	r3, #1
 800bb78:	025b      	lsls	r3, r3, #9
 800bb7a:	b29b      	uxth	r3, r3
 800bb7c:	431a      	orrs	r2, r3
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	68db      	ldr	r3, [r3, #12]
 800bb82:	3b01      	subs	r3, #1
 800bb84:	041b      	lsls	r3, r3, #16
 800bb86:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bb8a:	431a      	orrs	r2, r3
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	691b      	ldr	r3, [r3, #16]
 800bb90:	3b01      	subs	r3, #1
 800bb92:	061b      	lsls	r3, r3, #24
 800bb94:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bb98:	4931      	ldr	r1, [pc, #196]	; (800bc60 <RCCEx_PLL3_Config+0x15c>)
 800bb9a:	4313      	orrs	r3, r2
 800bb9c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800bb9e:	4b30      	ldr	r3, [pc, #192]	; (800bc60 <RCCEx_PLL3_Config+0x15c>)
 800bba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bba2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	695b      	ldr	r3, [r3, #20]
 800bbaa:	492d      	ldr	r1, [pc, #180]	; (800bc60 <RCCEx_PLL3_Config+0x15c>)
 800bbac:	4313      	orrs	r3, r2
 800bbae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800bbb0:	4b2b      	ldr	r3, [pc, #172]	; (800bc60 <RCCEx_PLL3_Config+0x15c>)
 800bbb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbb4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	699b      	ldr	r3, [r3, #24]
 800bbbc:	4928      	ldr	r1, [pc, #160]	; (800bc60 <RCCEx_PLL3_Config+0x15c>)
 800bbbe:	4313      	orrs	r3, r2
 800bbc0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800bbc2:	4b27      	ldr	r3, [pc, #156]	; (800bc60 <RCCEx_PLL3_Config+0x15c>)
 800bbc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbc6:	4a26      	ldr	r2, [pc, #152]	; (800bc60 <RCCEx_PLL3_Config+0x15c>)
 800bbc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bbcc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bbce:	4b24      	ldr	r3, [pc, #144]	; (800bc60 <RCCEx_PLL3_Config+0x15c>)
 800bbd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bbd2:	4b24      	ldr	r3, [pc, #144]	; (800bc64 <RCCEx_PLL3_Config+0x160>)
 800bbd4:	4013      	ands	r3, r2
 800bbd6:	687a      	ldr	r2, [r7, #4]
 800bbd8:	69d2      	ldr	r2, [r2, #28]
 800bbda:	00d2      	lsls	r2, r2, #3
 800bbdc:	4920      	ldr	r1, [pc, #128]	; (800bc60 <RCCEx_PLL3_Config+0x15c>)
 800bbde:	4313      	orrs	r3, r2
 800bbe0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800bbe2:	4b1f      	ldr	r3, [pc, #124]	; (800bc60 <RCCEx_PLL3_Config+0x15c>)
 800bbe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbe6:	4a1e      	ldr	r2, [pc, #120]	; (800bc60 <RCCEx_PLL3_Config+0x15c>)
 800bbe8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bbec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d106      	bne.n	800bc02 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bbf4:	4b1a      	ldr	r3, [pc, #104]	; (800bc60 <RCCEx_PLL3_Config+0x15c>)
 800bbf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbf8:	4a19      	ldr	r2, [pc, #100]	; (800bc60 <RCCEx_PLL3_Config+0x15c>)
 800bbfa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800bbfe:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bc00:	e00f      	b.n	800bc22 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	2b01      	cmp	r3, #1
 800bc06:	d106      	bne.n	800bc16 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800bc08:	4b15      	ldr	r3, [pc, #84]	; (800bc60 <RCCEx_PLL3_Config+0x15c>)
 800bc0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc0c:	4a14      	ldr	r2, [pc, #80]	; (800bc60 <RCCEx_PLL3_Config+0x15c>)
 800bc0e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bc12:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bc14:	e005      	b.n	800bc22 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800bc16:	4b12      	ldr	r3, [pc, #72]	; (800bc60 <RCCEx_PLL3_Config+0x15c>)
 800bc18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc1a:	4a11      	ldr	r2, [pc, #68]	; (800bc60 <RCCEx_PLL3_Config+0x15c>)
 800bc1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bc20:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800bc22:	4b0f      	ldr	r3, [pc, #60]	; (800bc60 <RCCEx_PLL3_Config+0x15c>)
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	4a0e      	ldr	r2, [pc, #56]	; (800bc60 <RCCEx_PLL3_Config+0x15c>)
 800bc28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bc2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bc2e:	f7f8 fa3f 	bl	80040b0 <HAL_GetTick>
 800bc32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bc34:	e008      	b.n	800bc48 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800bc36:	f7f8 fa3b 	bl	80040b0 <HAL_GetTick>
 800bc3a:	4602      	mov	r2, r0
 800bc3c:	68bb      	ldr	r3, [r7, #8]
 800bc3e:	1ad3      	subs	r3, r2, r3
 800bc40:	2b02      	cmp	r3, #2
 800bc42:	d901      	bls.n	800bc48 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bc44:	2303      	movs	r3, #3
 800bc46:	e006      	b.n	800bc56 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bc48:	4b05      	ldr	r3, [pc, #20]	; (800bc60 <RCCEx_PLL3_Config+0x15c>)
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d0f0      	beq.n	800bc36 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800bc54:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc56:	4618      	mov	r0, r3
 800bc58:	3710      	adds	r7, #16
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bd80      	pop	{r7, pc}
 800bc5e:	bf00      	nop
 800bc60:	58024400 	.word	0x58024400
 800bc64:	ffff0007 	.word	0xffff0007

0800bc68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b082      	sub	sp, #8
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d101      	bne.n	800bc7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bc76:	2301      	movs	r3, #1
 800bc78:	e042      	b.n	800bd00 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d106      	bne.n	800bc92 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	2200      	movs	r2, #0
 800bc88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bc8c:	6878      	ldr	r0, [r7, #4]
 800bc8e:	f7f5 fcbb 	bl	8001608 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	2224      	movs	r2, #36	; 0x24
 800bc96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	681a      	ldr	r2, [r3, #0]
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	f022 0201 	bic.w	r2, r2, #1
 800bca8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bcaa:	6878      	ldr	r0, [r7, #4]
 800bcac:	f000 f8c2 	bl	800be34 <UART_SetConfig>
 800bcb0:	4603      	mov	r3, r0
 800bcb2:	2b01      	cmp	r3, #1
 800bcb4:	d101      	bne.n	800bcba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800bcb6:	2301      	movs	r3, #1
 800bcb8:	e022      	b.n	800bd00 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d002      	beq.n	800bcc8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f000 fe1e 	bl	800c904 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	685a      	ldr	r2, [r3, #4]
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bcd6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	689a      	ldr	r2, [r3, #8]
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bce6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	681a      	ldr	r2, [r3, #0]
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	f042 0201 	orr.w	r2, r2, #1
 800bcf6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f000 fea5 	bl	800ca48 <UART_CheckIdleState>
 800bcfe:	4603      	mov	r3, r0
}
 800bd00:	4618      	mov	r0, r3
 800bd02:	3708      	adds	r7, #8
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}

0800bd08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b08a      	sub	sp, #40	; 0x28
 800bd0c:	af02      	add	r7, sp, #8
 800bd0e:	60f8      	str	r0, [r7, #12]
 800bd10:	60b9      	str	r1, [r7, #8]
 800bd12:	603b      	str	r3, [r7, #0]
 800bd14:	4613      	mov	r3, r2
 800bd16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd1e:	2b20      	cmp	r3, #32
 800bd20:	f040 8083 	bne.w	800be2a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800bd24:	68bb      	ldr	r3, [r7, #8]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d002      	beq.n	800bd30 <HAL_UART_Transmit+0x28>
 800bd2a:	88fb      	ldrh	r3, [r7, #6]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d101      	bne.n	800bd34 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800bd30:	2301      	movs	r3, #1
 800bd32:	e07b      	b.n	800be2c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bd3a:	2b01      	cmp	r3, #1
 800bd3c:	d101      	bne.n	800bd42 <HAL_UART_Transmit+0x3a>
 800bd3e:	2302      	movs	r3, #2
 800bd40:	e074      	b.n	800be2c <HAL_UART_Transmit+0x124>
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	2201      	movs	r2, #1
 800bd46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	2221      	movs	r2, #33	; 0x21
 800bd56:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bd5a:	f7f8 f9a9 	bl	80040b0 <HAL_GetTick>
 800bd5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	88fa      	ldrh	r2, [r7, #6]
 800bd64:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	88fa      	ldrh	r2, [r7, #6]
 800bd6c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	689b      	ldr	r3, [r3, #8]
 800bd74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd78:	d108      	bne.n	800bd8c <HAL_UART_Transmit+0x84>
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	691b      	ldr	r3, [r3, #16]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d104      	bne.n	800bd8c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800bd82:	2300      	movs	r3, #0
 800bd84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bd86:	68bb      	ldr	r3, [r7, #8]
 800bd88:	61bb      	str	r3, [r7, #24]
 800bd8a:	e003      	b.n	800bd94 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800bd8c:	68bb      	ldr	r3, [r7, #8]
 800bd8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bd90:	2300      	movs	r3, #0
 800bd92:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	2200      	movs	r2, #0
 800bd98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800bd9c:	e02c      	b.n	800bdf8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	9300      	str	r3, [sp, #0]
 800bda2:	697b      	ldr	r3, [r7, #20]
 800bda4:	2200      	movs	r2, #0
 800bda6:	2180      	movs	r1, #128	; 0x80
 800bda8:	68f8      	ldr	r0, [r7, #12]
 800bdaa:	f000 fe98 	bl	800cade <UART_WaitOnFlagUntilTimeout>
 800bdae:	4603      	mov	r3, r0
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d001      	beq.n	800bdb8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800bdb4:	2303      	movs	r3, #3
 800bdb6:	e039      	b.n	800be2c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800bdb8:	69fb      	ldr	r3, [r7, #28]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d10b      	bne.n	800bdd6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bdbe:	69bb      	ldr	r3, [r7, #24]
 800bdc0:	881b      	ldrh	r3, [r3, #0]
 800bdc2:	461a      	mov	r2, r3
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bdcc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800bdce:	69bb      	ldr	r3, [r7, #24]
 800bdd0:	3302      	adds	r3, #2
 800bdd2:	61bb      	str	r3, [r7, #24]
 800bdd4:	e007      	b.n	800bde6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bdd6:	69fb      	ldr	r3, [r7, #28]
 800bdd8:	781a      	ldrb	r2, [r3, #0]
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800bde0:	69fb      	ldr	r3, [r7, #28]
 800bde2:	3301      	adds	r3, #1
 800bde4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bdec:	b29b      	uxth	r3, r3
 800bdee:	3b01      	subs	r3, #1
 800bdf0:	b29a      	uxth	r2, r3
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bdfe:	b29b      	uxth	r3, r3
 800be00:	2b00      	cmp	r3, #0
 800be02:	d1cc      	bne.n	800bd9e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	9300      	str	r3, [sp, #0]
 800be08:	697b      	ldr	r3, [r7, #20]
 800be0a:	2200      	movs	r2, #0
 800be0c:	2140      	movs	r1, #64	; 0x40
 800be0e:	68f8      	ldr	r0, [r7, #12]
 800be10:	f000 fe65 	bl	800cade <UART_WaitOnFlagUntilTimeout>
 800be14:	4603      	mov	r3, r0
 800be16:	2b00      	cmp	r3, #0
 800be18:	d001      	beq.n	800be1e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800be1a:	2303      	movs	r3, #3
 800be1c:	e006      	b.n	800be2c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	2220      	movs	r2, #32
 800be22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800be26:	2300      	movs	r3, #0
 800be28:	e000      	b.n	800be2c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800be2a:	2302      	movs	r3, #2
  }
}
 800be2c:	4618      	mov	r0, r3
 800be2e:	3720      	adds	r7, #32
 800be30:	46bd      	mov	sp, r7
 800be32:	bd80      	pop	{r7, pc}

0800be34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800be34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800be38:	b092      	sub	sp, #72	; 0x48
 800be3a:	af00      	add	r7, sp, #0
 800be3c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800be3e:	2300      	movs	r3, #0
 800be40:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800be44:	697b      	ldr	r3, [r7, #20]
 800be46:	689a      	ldr	r2, [r3, #8]
 800be48:	697b      	ldr	r3, [r7, #20]
 800be4a:	691b      	ldr	r3, [r3, #16]
 800be4c:	431a      	orrs	r2, r3
 800be4e:	697b      	ldr	r3, [r7, #20]
 800be50:	695b      	ldr	r3, [r3, #20]
 800be52:	431a      	orrs	r2, r3
 800be54:	697b      	ldr	r3, [r7, #20]
 800be56:	69db      	ldr	r3, [r3, #28]
 800be58:	4313      	orrs	r3, r2
 800be5a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800be5c:	697b      	ldr	r3, [r7, #20]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	681a      	ldr	r2, [r3, #0]
 800be62:	4bbe      	ldr	r3, [pc, #760]	; (800c15c <UART_SetConfig+0x328>)
 800be64:	4013      	ands	r3, r2
 800be66:	697a      	ldr	r2, [r7, #20]
 800be68:	6812      	ldr	r2, [r2, #0]
 800be6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800be6c:	430b      	orrs	r3, r1
 800be6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800be70:	697b      	ldr	r3, [r7, #20]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	685b      	ldr	r3, [r3, #4]
 800be76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800be7a:	697b      	ldr	r3, [r7, #20]
 800be7c:	68da      	ldr	r2, [r3, #12]
 800be7e:	697b      	ldr	r3, [r7, #20]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	430a      	orrs	r2, r1
 800be84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800be86:	697b      	ldr	r3, [r7, #20]
 800be88:	699b      	ldr	r3, [r3, #24]
 800be8a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800be8c:	697b      	ldr	r3, [r7, #20]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	4ab3      	ldr	r2, [pc, #716]	; (800c160 <UART_SetConfig+0x32c>)
 800be92:	4293      	cmp	r3, r2
 800be94:	d004      	beq.n	800bea0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800be96:	697b      	ldr	r3, [r7, #20]
 800be98:	6a1b      	ldr	r3, [r3, #32]
 800be9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800be9c:	4313      	orrs	r3, r2
 800be9e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bea0:	697b      	ldr	r3, [r7, #20]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	689a      	ldr	r2, [r3, #8]
 800bea6:	4baf      	ldr	r3, [pc, #700]	; (800c164 <UART_SetConfig+0x330>)
 800bea8:	4013      	ands	r3, r2
 800beaa:	697a      	ldr	r2, [r7, #20]
 800beac:	6812      	ldr	r2, [r2, #0]
 800beae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800beb0:	430b      	orrs	r3, r1
 800beb2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800beb4:	697b      	ldr	r3, [r7, #20]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beba:	f023 010f 	bic.w	r1, r3, #15
 800bebe:	697b      	ldr	r3, [r7, #20]
 800bec0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bec2:	697b      	ldr	r3, [r7, #20]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	430a      	orrs	r2, r1
 800bec8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800beca:	697b      	ldr	r3, [r7, #20]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	4aa6      	ldr	r2, [pc, #664]	; (800c168 <UART_SetConfig+0x334>)
 800bed0:	4293      	cmp	r3, r2
 800bed2:	d177      	bne.n	800bfc4 <UART_SetConfig+0x190>
 800bed4:	4ba5      	ldr	r3, [pc, #660]	; (800c16c <UART_SetConfig+0x338>)
 800bed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bed8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bedc:	2b28      	cmp	r3, #40	; 0x28
 800bede:	d86d      	bhi.n	800bfbc <UART_SetConfig+0x188>
 800bee0:	a201      	add	r2, pc, #4	; (adr r2, 800bee8 <UART_SetConfig+0xb4>)
 800bee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bee6:	bf00      	nop
 800bee8:	0800bf8d 	.word	0x0800bf8d
 800beec:	0800bfbd 	.word	0x0800bfbd
 800bef0:	0800bfbd 	.word	0x0800bfbd
 800bef4:	0800bfbd 	.word	0x0800bfbd
 800bef8:	0800bfbd 	.word	0x0800bfbd
 800befc:	0800bfbd 	.word	0x0800bfbd
 800bf00:	0800bfbd 	.word	0x0800bfbd
 800bf04:	0800bfbd 	.word	0x0800bfbd
 800bf08:	0800bf95 	.word	0x0800bf95
 800bf0c:	0800bfbd 	.word	0x0800bfbd
 800bf10:	0800bfbd 	.word	0x0800bfbd
 800bf14:	0800bfbd 	.word	0x0800bfbd
 800bf18:	0800bfbd 	.word	0x0800bfbd
 800bf1c:	0800bfbd 	.word	0x0800bfbd
 800bf20:	0800bfbd 	.word	0x0800bfbd
 800bf24:	0800bfbd 	.word	0x0800bfbd
 800bf28:	0800bf9d 	.word	0x0800bf9d
 800bf2c:	0800bfbd 	.word	0x0800bfbd
 800bf30:	0800bfbd 	.word	0x0800bfbd
 800bf34:	0800bfbd 	.word	0x0800bfbd
 800bf38:	0800bfbd 	.word	0x0800bfbd
 800bf3c:	0800bfbd 	.word	0x0800bfbd
 800bf40:	0800bfbd 	.word	0x0800bfbd
 800bf44:	0800bfbd 	.word	0x0800bfbd
 800bf48:	0800bfa5 	.word	0x0800bfa5
 800bf4c:	0800bfbd 	.word	0x0800bfbd
 800bf50:	0800bfbd 	.word	0x0800bfbd
 800bf54:	0800bfbd 	.word	0x0800bfbd
 800bf58:	0800bfbd 	.word	0x0800bfbd
 800bf5c:	0800bfbd 	.word	0x0800bfbd
 800bf60:	0800bfbd 	.word	0x0800bfbd
 800bf64:	0800bfbd 	.word	0x0800bfbd
 800bf68:	0800bfad 	.word	0x0800bfad
 800bf6c:	0800bfbd 	.word	0x0800bfbd
 800bf70:	0800bfbd 	.word	0x0800bfbd
 800bf74:	0800bfbd 	.word	0x0800bfbd
 800bf78:	0800bfbd 	.word	0x0800bfbd
 800bf7c:	0800bfbd 	.word	0x0800bfbd
 800bf80:	0800bfbd 	.word	0x0800bfbd
 800bf84:	0800bfbd 	.word	0x0800bfbd
 800bf88:	0800bfb5 	.word	0x0800bfb5
 800bf8c:	2301      	movs	r3, #1
 800bf8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf92:	e222      	b.n	800c3da <UART_SetConfig+0x5a6>
 800bf94:	2304      	movs	r3, #4
 800bf96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bf9a:	e21e      	b.n	800c3da <UART_SetConfig+0x5a6>
 800bf9c:	2308      	movs	r3, #8
 800bf9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfa2:	e21a      	b.n	800c3da <UART_SetConfig+0x5a6>
 800bfa4:	2310      	movs	r3, #16
 800bfa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfaa:	e216      	b.n	800c3da <UART_SetConfig+0x5a6>
 800bfac:	2320      	movs	r3, #32
 800bfae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfb2:	e212      	b.n	800c3da <UART_SetConfig+0x5a6>
 800bfb4:	2340      	movs	r3, #64	; 0x40
 800bfb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfba:	e20e      	b.n	800c3da <UART_SetConfig+0x5a6>
 800bfbc:	2380      	movs	r3, #128	; 0x80
 800bfbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bfc2:	e20a      	b.n	800c3da <UART_SetConfig+0x5a6>
 800bfc4:	697b      	ldr	r3, [r7, #20]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	4a69      	ldr	r2, [pc, #420]	; (800c170 <UART_SetConfig+0x33c>)
 800bfca:	4293      	cmp	r3, r2
 800bfcc:	d130      	bne.n	800c030 <UART_SetConfig+0x1fc>
 800bfce:	4b67      	ldr	r3, [pc, #412]	; (800c16c <UART_SetConfig+0x338>)
 800bfd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfd2:	f003 0307 	and.w	r3, r3, #7
 800bfd6:	2b05      	cmp	r3, #5
 800bfd8:	d826      	bhi.n	800c028 <UART_SetConfig+0x1f4>
 800bfda:	a201      	add	r2, pc, #4	; (adr r2, 800bfe0 <UART_SetConfig+0x1ac>)
 800bfdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfe0:	0800bff9 	.word	0x0800bff9
 800bfe4:	0800c001 	.word	0x0800c001
 800bfe8:	0800c009 	.word	0x0800c009
 800bfec:	0800c011 	.word	0x0800c011
 800bff0:	0800c019 	.word	0x0800c019
 800bff4:	0800c021 	.word	0x0800c021
 800bff8:	2300      	movs	r3, #0
 800bffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bffe:	e1ec      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c000:	2304      	movs	r3, #4
 800c002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c006:	e1e8      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c008:	2308      	movs	r3, #8
 800c00a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c00e:	e1e4      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c010:	2310      	movs	r3, #16
 800c012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c016:	e1e0      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c018:	2320      	movs	r3, #32
 800c01a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c01e:	e1dc      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c020:	2340      	movs	r3, #64	; 0x40
 800c022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c026:	e1d8      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c028:	2380      	movs	r3, #128	; 0x80
 800c02a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c02e:	e1d4      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c030:	697b      	ldr	r3, [r7, #20]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	4a4f      	ldr	r2, [pc, #316]	; (800c174 <UART_SetConfig+0x340>)
 800c036:	4293      	cmp	r3, r2
 800c038:	d130      	bne.n	800c09c <UART_SetConfig+0x268>
 800c03a:	4b4c      	ldr	r3, [pc, #304]	; (800c16c <UART_SetConfig+0x338>)
 800c03c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c03e:	f003 0307 	and.w	r3, r3, #7
 800c042:	2b05      	cmp	r3, #5
 800c044:	d826      	bhi.n	800c094 <UART_SetConfig+0x260>
 800c046:	a201      	add	r2, pc, #4	; (adr r2, 800c04c <UART_SetConfig+0x218>)
 800c048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c04c:	0800c065 	.word	0x0800c065
 800c050:	0800c06d 	.word	0x0800c06d
 800c054:	0800c075 	.word	0x0800c075
 800c058:	0800c07d 	.word	0x0800c07d
 800c05c:	0800c085 	.word	0x0800c085
 800c060:	0800c08d 	.word	0x0800c08d
 800c064:	2300      	movs	r3, #0
 800c066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c06a:	e1b6      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c06c:	2304      	movs	r3, #4
 800c06e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c072:	e1b2      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c074:	2308      	movs	r3, #8
 800c076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c07a:	e1ae      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c07c:	2310      	movs	r3, #16
 800c07e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c082:	e1aa      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c084:	2320      	movs	r3, #32
 800c086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c08a:	e1a6      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c08c:	2340      	movs	r3, #64	; 0x40
 800c08e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c092:	e1a2      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c094:	2380      	movs	r3, #128	; 0x80
 800c096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c09a:	e19e      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c09c:	697b      	ldr	r3, [r7, #20]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	4a35      	ldr	r2, [pc, #212]	; (800c178 <UART_SetConfig+0x344>)
 800c0a2:	4293      	cmp	r3, r2
 800c0a4:	d130      	bne.n	800c108 <UART_SetConfig+0x2d4>
 800c0a6:	4b31      	ldr	r3, [pc, #196]	; (800c16c <UART_SetConfig+0x338>)
 800c0a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0aa:	f003 0307 	and.w	r3, r3, #7
 800c0ae:	2b05      	cmp	r3, #5
 800c0b0:	d826      	bhi.n	800c100 <UART_SetConfig+0x2cc>
 800c0b2:	a201      	add	r2, pc, #4	; (adr r2, 800c0b8 <UART_SetConfig+0x284>)
 800c0b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0b8:	0800c0d1 	.word	0x0800c0d1
 800c0bc:	0800c0d9 	.word	0x0800c0d9
 800c0c0:	0800c0e1 	.word	0x0800c0e1
 800c0c4:	0800c0e9 	.word	0x0800c0e9
 800c0c8:	0800c0f1 	.word	0x0800c0f1
 800c0cc:	0800c0f9 	.word	0x0800c0f9
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0d6:	e180      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c0d8:	2304      	movs	r3, #4
 800c0da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0de:	e17c      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c0e0:	2308      	movs	r3, #8
 800c0e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0e6:	e178      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c0e8:	2310      	movs	r3, #16
 800c0ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0ee:	e174      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c0f0:	2320      	movs	r3, #32
 800c0f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0f6:	e170      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c0f8:	2340      	movs	r3, #64	; 0x40
 800c0fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c0fe:	e16c      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c100:	2380      	movs	r3, #128	; 0x80
 800c102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c106:	e168      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c108:	697b      	ldr	r3, [r7, #20]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	4a1b      	ldr	r2, [pc, #108]	; (800c17c <UART_SetConfig+0x348>)
 800c10e:	4293      	cmp	r3, r2
 800c110:	d142      	bne.n	800c198 <UART_SetConfig+0x364>
 800c112:	4b16      	ldr	r3, [pc, #88]	; (800c16c <UART_SetConfig+0x338>)
 800c114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c116:	f003 0307 	and.w	r3, r3, #7
 800c11a:	2b05      	cmp	r3, #5
 800c11c:	d838      	bhi.n	800c190 <UART_SetConfig+0x35c>
 800c11e:	a201      	add	r2, pc, #4	; (adr r2, 800c124 <UART_SetConfig+0x2f0>)
 800c120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c124:	0800c13d 	.word	0x0800c13d
 800c128:	0800c145 	.word	0x0800c145
 800c12c:	0800c14d 	.word	0x0800c14d
 800c130:	0800c155 	.word	0x0800c155
 800c134:	0800c181 	.word	0x0800c181
 800c138:	0800c189 	.word	0x0800c189
 800c13c:	2300      	movs	r3, #0
 800c13e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c142:	e14a      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c144:	2304      	movs	r3, #4
 800c146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c14a:	e146      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c14c:	2308      	movs	r3, #8
 800c14e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c152:	e142      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c154:	2310      	movs	r3, #16
 800c156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c15a:	e13e      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c15c:	cfff69f3 	.word	0xcfff69f3
 800c160:	58000c00 	.word	0x58000c00
 800c164:	11fff4ff 	.word	0x11fff4ff
 800c168:	40011000 	.word	0x40011000
 800c16c:	58024400 	.word	0x58024400
 800c170:	40004400 	.word	0x40004400
 800c174:	40004800 	.word	0x40004800
 800c178:	40004c00 	.word	0x40004c00
 800c17c:	40005000 	.word	0x40005000
 800c180:	2320      	movs	r3, #32
 800c182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c186:	e128      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c188:	2340      	movs	r3, #64	; 0x40
 800c18a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c18e:	e124      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c190:	2380      	movs	r3, #128	; 0x80
 800c192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c196:	e120      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c198:	697b      	ldr	r3, [r7, #20]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	4acb      	ldr	r2, [pc, #812]	; (800c4cc <UART_SetConfig+0x698>)
 800c19e:	4293      	cmp	r3, r2
 800c1a0:	d176      	bne.n	800c290 <UART_SetConfig+0x45c>
 800c1a2:	4bcb      	ldr	r3, [pc, #812]	; (800c4d0 <UART_SetConfig+0x69c>)
 800c1a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c1aa:	2b28      	cmp	r3, #40	; 0x28
 800c1ac:	d86c      	bhi.n	800c288 <UART_SetConfig+0x454>
 800c1ae:	a201      	add	r2, pc, #4	; (adr r2, 800c1b4 <UART_SetConfig+0x380>)
 800c1b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1b4:	0800c259 	.word	0x0800c259
 800c1b8:	0800c289 	.word	0x0800c289
 800c1bc:	0800c289 	.word	0x0800c289
 800c1c0:	0800c289 	.word	0x0800c289
 800c1c4:	0800c289 	.word	0x0800c289
 800c1c8:	0800c289 	.word	0x0800c289
 800c1cc:	0800c289 	.word	0x0800c289
 800c1d0:	0800c289 	.word	0x0800c289
 800c1d4:	0800c261 	.word	0x0800c261
 800c1d8:	0800c289 	.word	0x0800c289
 800c1dc:	0800c289 	.word	0x0800c289
 800c1e0:	0800c289 	.word	0x0800c289
 800c1e4:	0800c289 	.word	0x0800c289
 800c1e8:	0800c289 	.word	0x0800c289
 800c1ec:	0800c289 	.word	0x0800c289
 800c1f0:	0800c289 	.word	0x0800c289
 800c1f4:	0800c269 	.word	0x0800c269
 800c1f8:	0800c289 	.word	0x0800c289
 800c1fc:	0800c289 	.word	0x0800c289
 800c200:	0800c289 	.word	0x0800c289
 800c204:	0800c289 	.word	0x0800c289
 800c208:	0800c289 	.word	0x0800c289
 800c20c:	0800c289 	.word	0x0800c289
 800c210:	0800c289 	.word	0x0800c289
 800c214:	0800c271 	.word	0x0800c271
 800c218:	0800c289 	.word	0x0800c289
 800c21c:	0800c289 	.word	0x0800c289
 800c220:	0800c289 	.word	0x0800c289
 800c224:	0800c289 	.word	0x0800c289
 800c228:	0800c289 	.word	0x0800c289
 800c22c:	0800c289 	.word	0x0800c289
 800c230:	0800c289 	.word	0x0800c289
 800c234:	0800c279 	.word	0x0800c279
 800c238:	0800c289 	.word	0x0800c289
 800c23c:	0800c289 	.word	0x0800c289
 800c240:	0800c289 	.word	0x0800c289
 800c244:	0800c289 	.word	0x0800c289
 800c248:	0800c289 	.word	0x0800c289
 800c24c:	0800c289 	.word	0x0800c289
 800c250:	0800c289 	.word	0x0800c289
 800c254:	0800c281 	.word	0x0800c281
 800c258:	2301      	movs	r3, #1
 800c25a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c25e:	e0bc      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c260:	2304      	movs	r3, #4
 800c262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c266:	e0b8      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c268:	2308      	movs	r3, #8
 800c26a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c26e:	e0b4      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c270:	2310      	movs	r3, #16
 800c272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c276:	e0b0      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c278:	2320      	movs	r3, #32
 800c27a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c27e:	e0ac      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c280:	2340      	movs	r3, #64	; 0x40
 800c282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c286:	e0a8      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c288:	2380      	movs	r3, #128	; 0x80
 800c28a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c28e:	e0a4      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c290:	697b      	ldr	r3, [r7, #20]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	4a8f      	ldr	r2, [pc, #572]	; (800c4d4 <UART_SetConfig+0x6a0>)
 800c296:	4293      	cmp	r3, r2
 800c298:	d130      	bne.n	800c2fc <UART_SetConfig+0x4c8>
 800c29a:	4b8d      	ldr	r3, [pc, #564]	; (800c4d0 <UART_SetConfig+0x69c>)
 800c29c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c29e:	f003 0307 	and.w	r3, r3, #7
 800c2a2:	2b05      	cmp	r3, #5
 800c2a4:	d826      	bhi.n	800c2f4 <UART_SetConfig+0x4c0>
 800c2a6:	a201      	add	r2, pc, #4	; (adr r2, 800c2ac <UART_SetConfig+0x478>)
 800c2a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2ac:	0800c2c5 	.word	0x0800c2c5
 800c2b0:	0800c2cd 	.word	0x0800c2cd
 800c2b4:	0800c2d5 	.word	0x0800c2d5
 800c2b8:	0800c2dd 	.word	0x0800c2dd
 800c2bc:	0800c2e5 	.word	0x0800c2e5
 800c2c0:	0800c2ed 	.word	0x0800c2ed
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2ca:	e086      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c2cc:	2304      	movs	r3, #4
 800c2ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2d2:	e082      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c2d4:	2308      	movs	r3, #8
 800c2d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2da:	e07e      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c2dc:	2310      	movs	r3, #16
 800c2de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2e2:	e07a      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c2e4:	2320      	movs	r3, #32
 800c2e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2ea:	e076      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c2ec:	2340      	movs	r3, #64	; 0x40
 800c2ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2f2:	e072      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c2f4:	2380      	movs	r3, #128	; 0x80
 800c2f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c2fa:	e06e      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c2fc:	697b      	ldr	r3, [r7, #20]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	4a75      	ldr	r2, [pc, #468]	; (800c4d8 <UART_SetConfig+0x6a4>)
 800c302:	4293      	cmp	r3, r2
 800c304:	d130      	bne.n	800c368 <UART_SetConfig+0x534>
 800c306:	4b72      	ldr	r3, [pc, #456]	; (800c4d0 <UART_SetConfig+0x69c>)
 800c308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c30a:	f003 0307 	and.w	r3, r3, #7
 800c30e:	2b05      	cmp	r3, #5
 800c310:	d826      	bhi.n	800c360 <UART_SetConfig+0x52c>
 800c312:	a201      	add	r2, pc, #4	; (adr r2, 800c318 <UART_SetConfig+0x4e4>)
 800c314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c318:	0800c331 	.word	0x0800c331
 800c31c:	0800c339 	.word	0x0800c339
 800c320:	0800c341 	.word	0x0800c341
 800c324:	0800c349 	.word	0x0800c349
 800c328:	0800c351 	.word	0x0800c351
 800c32c:	0800c359 	.word	0x0800c359
 800c330:	2300      	movs	r3, #0
 800c332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c336:	e050      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c338:	2304      	movs	r3, #4
 800c33a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c33e:	e04c      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c340:	2308      	movs	r3, #8
 800c342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c346:	e048      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c348:	2310      	movs	r3, #16
 800c34a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c34e:	e044      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c350:	2320      	movs	r3, #32
 800c352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c356:	e040      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c358:	2340      	movs	r3, #64	; 0x40
 800c35a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c35e:	e03c      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c360:	2380      	movs	r3, #128	; 0x80
 800c362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c366:	e038      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c368:	697b      	ldr	r3, [r7, #20]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	4a5b      	ldr	r2, [pc, #364]	; (800c4dc <UART_SetConfig+0x6a8>)
 800c36e:	4293      	cmp	r3, r2
 800c370:	d130      	bne.n	800c3d4 <UART_SetConfig+0x5a0>
 800c372:	4b57      	ldr	r3, [pc, #348]	; (800c4d0 <UART_SetConfig+0x69c>)
 800c374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c376:	f003 0307 	and.w	r3, r3, #7
 800c37a:	2b05      	cmp	r3, #5
 800c37c:	d826      	bhi.n	800c3cc <UART_SetConfig+0x598>
 800c37e:	a201      	add	r2, pc, #4	; (adr r2, 800c384 <UART_SetConfig+0x550>)
 800c380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c384:	0800c39d 	.word	0x0800c39d
 800c388:	0800c3a5 	.word	0x0800c3a5
 800c38c:	0800c3ad 	.word	0x0800c3ad
 800c390:	0800c3b5 	.word	0x0800c3b5
 800c394:	0800c3bd 	.word	0x0800c3bd
 800c398:	0800c3c5 	.word	0x0800c3c5
 800c39c:	2302      	movs	r3, #2
 800c39e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3a2:	e01a      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c3a4:	2304      	movs	r3, #4
 800c3a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3aa:	e016      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c3ac:	2308      	movs	r3, #8
 800c3ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3b2:	e012      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c3b4:	2310      	movs	r3, #16
 800c3b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3ba:	e00e      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c3bc:	2320      	movs	r3, #32
 800c3be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3c2:	e00a      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c3c4:	2340      	movs	r3, #64	; 0x40
 800c3c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3ca:	e006      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c3cc:	2380      	movs	r3, #128	; 0x80
 800c3ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800c3d2:	e002      	b.n	800c3da <UART_SetConfig+0x5a6>
 800c3d4:	2380      	movs	r3, #128	; 0x80
 800c3d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c3da:	697b      	ldr	r3, [r7, #20]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	4a3f      	ldr	r2, [pc, #252]	; (800c4dc <UART_SetConfig+0x6a8>)
 800c3e0:	4293      	cmp	r3, r2
 800c3e2:	f040 80f8 	bne.w	800c5d6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c3e6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c3ea:	2b20      	cmp	r3, #32
 800c3ec:	dc46      	bgt.n	800c47c <UART_SetConfig+0x648>
 800c3ee:	2b02      	cmp	r3, #2
 800c3f0:	f2c0 8082 	blt.w	800c4f8 <UART_SetConfig+0x6c4>
 800c3f4:	3b02      	subs	r3, #2
 800c3f6:	2b1e      	cmp	r3, #30
 800c3f8:	d87e      	bhi.n	800c4f8 <UART_SetConfig+0x6c4>
 800c3fa:	a201      	add	r2, pc, #4	; (adr r2, 800c400 <UART_SetConfig+0x5cc>)
 800c3fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c400:	0800c483 	.word	0x0800c483
 800c404:	0800c4f9 	.word	0x0800c4f9
 800c408:	0800c48b 	.word	0x0800c48b
 800c40c:	0800c4f9 	.word	0x0800c4f9
 800c410:	0800c4f9 	.word	0x0800c4f9
 800c414:	0800c4f9 	.word	0x0800c4f9
 800c418:	0800c49b 	.word	0x0800c49b
 800c41c:	0800c4f9 	.word	0x0800c4f9
 800c420:	0800c4f9 	.word	0x0800c4f9
 800c424:	0800c4f9 	.word	0x0800c4f9
 800c428:	0800c4f9 	.word	0x0800c4f9
 800c42c:	0800c4f9 	.word	0x0800c4f9
 800c430:	0800c4f9 	.word	0x0800c4f9
 800c434:	0800c4f9 	.word	0x0800c4f9
 800c438:	0800c4ab 	.word	0x0800c4ab
 800c43c:	0800c4f9 	.word	0x0800c4f9
 800c440:	0800c4f9 	.word	0x0800c4f9
 800c444:	0800c4f9 	.word	0x0800c4f9
 800c448:	0800c4f9 	.word	0x0800c4f9
 800c44c:	0800c4f9 	.word	0x0800c4f9
 800c450:	0800c4f9 	.word	0x0800c4f9
 800c454:	0800c4f9 	.word	0x0800c4f9
 800c458:	0800c4f9 	.word	0x0800c4f9
 800c45c:	0800c4f9 	.word	0x0800c4f9
 800c460:	0800c4f9 	.word	0x0800c4f9
 800c464:	0800c4f9 	.word	0x0800c4f9
 800c468:	0800c4f9 	.word	0x0800c4f9
 800c46c:	0800c4f9 	.word	0x0800c4f9
 800c470:	0800c4f9 	.word	0x0800c4f9
 800c474:	0800c4f9 	.word	0x0800c4f9
 800c478:	0800c4eb 	.word	0x0800c4eb
 800c47c:	2b40      	cmp	r3, #64	; 0x40
 800c47e:	d037      	beq.n	800c4f0 <UART_SetConfig+0x6bc>
 800c480:	e03a      	b.n	800c4f8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c482:	f7fe fe7d 	bl	800b180 <HAL_RCCEx_GetD3PCLK1Freq>
 800c486:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c488:	e03c      	b.n	800c504 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c48a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c48e:	4618      	mov	r0, r3
 800c490:	f7fe fe8c 	bl	800b1ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c496:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c498:	e034      	b.n	800c504 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c49a:	f107 0318 	add.w	r3, r7, #24
 800c49e:	4618      	mov	r0, r3
 800c4a0:	f7fe ffd8 	bl	800b454 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c4a4:	69fb      	ldr	r3, [r7, #28]
 800c4a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4a8:	e02c      	b.n	800c504 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c4aa:	4b09      	ldr	r3, [pc, #36]	; (800c4d0 <UART_SetConfig+0x69c>)
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	f003 0320 	and.w	r3, r3, #32
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d016      	beq.n	800c4e4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c4b6:	4b06      	ldr	r3, [pc, #24]	; (800c4d0 <UART_SetConfig+0x69c>)
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	08db      	lsrs	r3, r3, #3
 800c4bc:	f003 0303 	and.w	r3, r3, #3
 800c4c0:	4a07      	ldr	r2, [pc, #28]	; (800c4e0 <UART_SetConfig+0x6ac>)
 800c4c2:	fa22 f303 	lsr.w	r3, r2, r3
 800c4c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c4c8:	e01c      	b.n	800c504 <UART_SetConfig+0x6d0>
 800c4ca:	bf00      	nop
 800c4cc:	40011400 	.word	0x40011400
 800c4d0:	58024400 	.word	0x58024400
 800c4d4:	40007800 	.word	0x40007800
 800c4d8:	40007c00 	.word	0x40007c00
 800c4dc:	58000c00 	.word	0x58000c00
 800c4e0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c4e4:	4b9d      	ldr	r3, [pc, #628]	; (800c75c <UART_SetConfig+0x928>)
 800c4e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4e8:	e00c      	b.n	800c504 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c4ea:	4b9d      	ldr	r3, [pc, #628]	; (800c760 <UART_SetConfig+0x92c>)
 800c4ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4ee:	e009      	b.n	800c504 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c4f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c4f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4f6:	e005      	b.n	800c504 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c4fc:	2301      	movs	r3, #1
 800c4fe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c502:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c506:	2b00      	cmp	r3, #0
 800c508:	f000 81de 	beq.w	800c8c8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c50c:	697b      	ldr	r3, [r7, #20]
 800c50e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c510:	4a94      	ldr	r2, [pc, #592]	; (800c764 <UART_SetConfig+0x930>)
 800c512:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c516:	461a      	mov	r2, r3
 800c518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c51a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c51e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c520:	697b      	ldr	r3, [r7, #20]
 800c522:	685a      	ldr	r2, [r3, #4]
 800c524:	4613      	mov	r3, r2
 800c526:	005b      	lsls	r3, r3, #1
 800c528:	4413      	add	r3, r2
 800c52a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c52c:	429a      	cmp	r2, r3
 800c52e:	d305      	bcc.n	800c53c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c530:	697b      	ldr	r3, [r7, #20]
 800c532:	685b      	ldr	r3, [r3, #4]
 800c534:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c536:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c538:	429a      	cmp	r2, r3
 800c53a:	d903      	bls.n	800c544 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c53c:	2301      	movs	r3, #1
 800c53e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c542:	e1c1      	b.n	800c8c8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c546:	2200      	movs	r2, #0
 800c548:	60bb      	str	r3, [r7, #8]
 800c54a:	60fa      	str	r2, [r7, #12]
 800c54c:	697b      	ldr	r3, [r7, #20]
 800c54e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c550:	4a84      	ldr	r2, [pc, #528]	; (800c764 <UART_SetConfig+0x930>)
 800c552:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c556:	b29b      	uxth	r3, r3
 800c558:	2200      	movs	r2, #0
 800c55a:	603b      	str	r3, [r7, #0]
 800c55c:	607a      	str	r2, [r7, #4]
 800c55e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c562:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c566:	f7f4 f92f 	bl	80007c8 <__aeabi_uldivmod>
 800c56a:	4602      	mov	r2, r0
 800c56c:	460b      	mov	r3, r1
 800c56e:	4610      	mov	r0, r2
 800c570:	4619      	mov	r1, r3
 800c572:	f04f 0200 	mov.w	r2, #0
 800c576:	f04f 0300 	mov.w	r3, #0
 800c57a:	020b      	lsls	r3, r1, #8
 800c57c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c580:	0202      	lsls	r2, r0, #8
 800c582:	6979      	ldr	r1, [r7, #20]
 800c584:	6849      	ldr	r1, [r1, #4]
 800c586:	0849      	lsrs	r1, r1, #1
 800c588:	2000      	movs	r0, #0
 800c58a:	460c      	mov	r4, r1
 800c58c:	4605      	mov	r5, r0
 800c58e:	eb12 0804 	adds.w	r8, r2, r4
 800c592:	eb43 0905 	adc.w	r9, r3, r5
 800c596:	697b      	ldr	r3, [r7, #20]
 800c598:	685b      	ldr	r3, [r3, #4]
 800c59a:	2200      	movs	r2, #0
 800c59c:	469a      	mov	sl, r3
 800c59e:	4693      	mov	fp, r2
 800c5a0:	4652      	mov	r2, sl
 800c5a2:	465b      	mov	r3, fp
 800c5a4:	4640      	mov	r0, r8
 800c5a6:	4649      	mov	r1, r9
 800c5a8:	f7f4 f90e 	bl	80007c8 <__aeabi_uldivmod>
 800c5ac:	4602      	mov	r2, r0
 800c5ae:	460b      	mov	r3, r1
 800c5b0:	4613      	mov	r3, r2
 800c5b2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c5b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c5ba:	d308      	bcc.n	800c5ce <UART_SetConfig+0x79a>
 800c5bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c5c2:	d204      	bcs.n	800c5ce <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c5c4:	697b      	ldr	r3, [r7, #20]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c5ca:	60da      	str	r2, [r3, #12]
 800c5cc:	e17c      	b.n	800c8c8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c5ce:	2301      	movs	r3, #1
 800c5d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c5d4:	e178      	b.n	800c8c8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c5d6:	697b      	ldr	r3, [r7, #20]
 800c5d8:	69db      	ldr	r3, [r3, #28]
 800c5da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c5de:	f040 80c5 	bne.w	800c76c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c5e2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c5e6:	2b20      	cmp	r3, #32
 800c5e8:	dc48      	bgt.n	800c67c <UART_SetConfig+0x848>
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	db7b      	blt.n	800c6e6 <UART_SetConfig+0x8b2>
 800c5ee:	2b20      	cmp	r3, #32
 800c5f0:	d879      	bhi.n	800c6e6 <UART_SetConfig+0x8b2>
 800c5f2:	a201      	add	r2, pc, #4	; (adr r2, 800c5f8 <UART_SetConfig+0x7c4>)
 800c5f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5f8:	0800c683 	.word	0x0800c683
 800c5fc:	0800c68b 	.word	0x0800c68b
 800c600:	0800c6e7 	.word	0x0800c6e7
 800c604:	0800c6e7 	.word	0x0800c6e7
 800c608:	0800c693 	.word	0x0800c693
 800c60c:	0800c6e7 	.word	0x0800c6e7
 800c610:	0800c6e7 	.word	0x0800c6e7
 800c614:	0800c6e7 	.word	0x0800c6e7
 800c618:	0800c6a3 	.word	0x0800c6a3
 800c61c:	0800c6e7 	.word	0x0800c6e7
 800c620:	0800c6e7 	.word	0x0800c6e7
 800c624:	0800c6e7 	.word	0x0800c6e7
 800c628:	0800c6e7 	.word	0x0800c6e7
 800c62c:	0800c6e7 	.word	0x0800c6e7
 800c630:	0800c6e7 	.word	0x0800c6e7
 800c634:	0800c6e7 	.word	0x0800c6e7
 800c638:	0800c6b3 	.word	0x0800c6b3
 800c63c:	0800c6e7 	.word	0x0800c6e7
 800c640:	0800c6e7 	.word	0x0800c6e7
 800c644:	0800c6e7 	.word	0x0800c6e7
 800c648:	0800c6e7 	.word	0x0800c6e7
 800c64c:	0800c6e7 	.word	0x0800c6e7
 800c650:	0800c6e7 	.word	0x0800c6e7
 800c654:	0800c6e7 	.word	0x0800c6e7
 800c658:	0800c6e7 	.word	0x0800c6e7
 800c65c:	0800c6e7 	.word	0x0800c6e7
 800c660:	0800c6e7 	.word	0x0800c6e7
 800c664:	0800c6e7 	.word	0x0800c6e7
 800c668:	0800c6e7 	.word	0x0800c6e7
 800c66c:	0800c6e7 	.word	0x0800c6e7
 800c670:	0800c6e7 	.word	0x0800c6e7
 800c674:	0800c6e7 	.word	0x0800c6e7
 800c678:	0800c6d9 	.word	0x0800c6d9
 800c67c:	2b40      	cmp	r3, #64	; 0x40
 800c67e:	d02e      	beq.n	800c6de <UART_SetConfig+0x8aa>
 800c680:	e031      	b.n	800c6e6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c682:	f7fd f939 	bl	80098f8 <HAL_RCC_GetPCLK1Freq>
 800c686:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c688:	e033      	b.n	800c6f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c68a:	f7fd f94b 	bl	8009924 <HAL_RCC_GetPCLK2Freq>
 800c68e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c690:	e02f      	b.n	800c6f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c692:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c696:	4618      	mov	r0, r3
 800c698:	f7fe fd88 	bl	800b1ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c69c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c69e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6a0:	e027      	b.n	800c6f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c6a2:	f107 0318 	add.w	r3, r7, #24
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f7fe fed4 	bl	800b454 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c6ac:	69fb      	ldr	r3, [r7, #28]
 800c6ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6b0:	e01f      	b.n	800c6f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c6b2:	4b2d      	ldr	r3, [pc, #180]	; (800c768 <UART_SetConfig+0x934>)
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	f003 0320 	and.w	r3, r3, #32
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d009      	beq.n	800c6d2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c6be:	4b2a      	ldr	r3, [pc, #168]	; (800c768 <UART_SetConfig+0x934>)
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	08db      	lsrs	r3, r3, #3
 800c6c4:	f003 0303 	and.w	r3, r3, #3
 800c6c8:	4a24      	ldr	r2, [pc, #144]	; (800c75c <UART_SetConfig+0x928>)
 800c6ca:	fa22 f303 	lsr.w	r3, r2, r3
 800c6ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c6d0:	e00f      	b.n	800c6f2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c6d2:	4b22      	ldr	r3, [pc, #136]	; (800c75c <UART_SetConfig+0x928>)
 800c6d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6d6:	e00c      	b.n	800c6f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c6d8:	4b21      	ldr	r3, [pc, #132]	; (800c760 <UART_SetConfig+0x92c>)
 800c6da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6dc:	e009      	b.n	800c6f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c6de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c6e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6e4:	e005      	b.n	800c6f2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c6ea:	2301      	movs	r3, #1
 800c6ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c6f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c6f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	f000 80e7 	beq.w	800c8c8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c6fa:	697b      	ldr	r3, [r7, #20]
 800c6fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6fe:	4a19      	ldr	r2, [pc, #100]	; (800c764 <UART_SetConfig+0x930>)
 800c700:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c704:	461a      	mov	r2, r3
 800c706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c708:	fbb3 f3f2 	udiv	r3, r3, r2
 800c70c:	005a      	lsls	r2, r3, #1
 800c70e:	697b      	ldr	r3, [r7, #20]
 800c710:	685b      	ldr	r3, [r3, #4]
 800c712:	085b      	lsrs	r3, r3, #1
 800c714:	441a      	add	r2, r3
 800c716:	697b      	ldr	r3, [r7, #20]
 800c718:	685b      	ldr	r3, [r3, #4]
 800c71a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c71e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c722:	2b0f      	cmp	r3, #15
 800c724:	d916      	bls.n	800c754 <UART_SetConfig+0x920>
 800c726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c72c:	d212      	bcs.n	800c754 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c72e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c730:	b29b      	uxth	r3, r3
 800c732:	f023 030f 	bic.w	r3, r3, #15
 800c736:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c73a:	085b      	lsrs	r3, r3, #1
 800c73c:	b29b      	uxth	r3, r3
 800c73e:	f003 0307 	and.w	r3, r3, #7
 800c742:	b29a      	uxth	r2, r3
 800c744:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c746:	4313      	orrs	r3, r2
 800c748:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800c74a:	697b      	ldr	r3, [r7, #20]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c750:	60da      	str	r2, [r3, #12]
 800c752:	e0b9      	b.n	800c8c8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c754:	2301      	movs	r3, #1
 800c756:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c75a:	e0b5      	b.n	800c8c8 <UART_SetConfig+0xa94>
 800c75c:	03d09000 	.word	0x03d09000
 800c760:	003d0900 	.word	0x003d0900
 800c764:	08014a58 	.word	0x08014a58
 800c768:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c76c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c770:	2b20      	cmp	r3, #32
 800c772:	dc49      	bgt.n	800c808 <UART_SetConfig+0x9d4>
 800c774:	2b00      	cmp	r3, #0
 800c776:	db7c      	blt.n	800c872 <UART_SetConfig+0xa3e>
 800c778:	2b20      	cmp	r3, #32
 800c77a:	d87a      	bhi.n	800c872 <UART_SetConfig+0xa3e>
 800c77c:	a201      	add	r2, pc, #4	; (adr r2, 800c784 <UART_SetConfig+0x950>)
 800c77e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c782:	bf00      	nop
 800c784:	0800c80f 	.word	0x0800c80f
 800c788:	0800c817 	.word	0x0800c817
 800c78c:	0800c873 	.word	0x0800c873
 800c790:	0800c873 	.word	0x0800c873
 800c794:	0800c81f 	.word	0x0800c81f
 800c798:	0800c873 	.word	0x0800c873
 800c79c:	0800c873 	.word	0x0800c873
 800c7a0:	0800c873 	.word	0x0800c873
 800c7a4:	0800c82f 	.word	0x0800c82f
 800c7a8:	0800c873 	.word	0x0800c873
 800c7ac:	0800c873 	.word	0x0800c873
 800c7b0:	0800c873 	.word	0x0800c873
 800c7b4:	0800c873 	.word	0x0800c873
 800c7b8:	0800c873 	.word	0x0800c873
 800c7bc:	0800c873 	.word	0x0800c873
 800c7c0:	0800c873 	.word	0x0800c873
 800c7c4:	0800c83f 	.word	0x0800c83f
 800c7c8:	0800c873 	.word	0x0800c873
 800c7cc:	0800c873 	.word	0x0800c873
 800c7d0:	0800c873 	.word	0x0800c873
 800c7d4:	0800c873 	.word	0x0800c873
 800c7d8:	0800c873 	.word	0x0800c873
 800c7dc:	0800c873 	.word	0x0800c873
 800c7e0:	0800c873 	.word	0x0800c873
 800c7e4:	0800c873 	.word	0x0800c873
 800c7e8:	0800c873 	.word	0x0800c873
 800c7ec:	0800c873 	.word	0x0800c873
 800c7f0:	0800c873 	.word	0x0800c873
 800c7f4:	0800c873 	.word	0x0800c873
 800c7f8:	0800c873 	.word	0x0800c873
 800c7fc:	0800c873 	.word	0x0800c873
 800c800:	0800c873 	.word	0x0800c873
 800c804:	0800c865 	.word	0x0800c865
 800c808:	2b40      	cmp	r3, #64	; 0x40
 800c80a:	d02e      	beq.n	800c86a <UART_SetConfig+0xa36>
 800c80c:	e031      	b.n	800c872 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c80e:	f7fd f873 	bl	80098f8 <HAL_RCC_GetPCLK1Freq>
 800c812:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c814:	e033      	b.n	800c87e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c816:	f7fd f885 	bl	8009924 <HAL_RCC_GetPCLK2Freq>
 800c81a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c81c:	e02f      	b.n	800c87e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c81e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c822:	4618      	mov	r0, r3
 800c824:	f7fe fcc2 	bl	800b1ac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c82a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c82c:	e027      	b.n	800c87e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c82e:	f107 0318 	add.w	r3, r7, #24
 800c832:	4618      	mov	r0, r3
 800c834:	f7fe fe0e 	bl	800b454 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c838:	69fb      	ldr	r3, [r7, #28]
 800c83a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c83c:	e01f      	b.n	800c87e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c83e:	4b2d      	ldr	r3, [pc, #180]	; (800c8f4 <UART_SetConfig+0xac0>)
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	f003 0320 	and.w	r3, r3, #32
 800c846:	2b00      	cmp	r3, #0
 800c848:	d009      	beq.n	800c85e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c84a:	4b2a      	ldr	r3, [pc, #168]	; (800c8f4 <UART_SetConfig+0xac0>)
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	08db      	lsrs	r3, r3, #3
 800c850:	f003 0303 	and.w	r3, r3, #3
 800c854:	4a28      	ldr	r2, [pc, #160]	; (800c8f8 <UART_SetConfig+0xac4>)
 800c856:	fa22 f303 	lsr.w	r3, r2, r3
 800c85a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c85c:	e00f      	b.n	800c87e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c85e:	4b26      	ldr	r3, [pc, #152]	; (800c8f8 <UART_SetConfig+0xac4>)
 800c860:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c862:	e00c      	b.n	800c87e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c864:	4b25      	ldr	r3, [pc, #148]	; (800c8fc <UART_SetConfig+0xac8>)
 800c866:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c868:	e009      	b.n	800c87e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c86a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c86e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c870:	e005      	b.n	800c87e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800c872:	2300      	movs	r3, #0
 800c874:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c876:	2301      	movs	r3, #1
 800c878:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c87c:	bf00      	nop
    }

    if (pclk != 0U)
 800c87e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c880:	2b00      	cmp	r3, #0
 800c882:	d021      	beq.n	800c8c8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c884:	697b      	ldr	r3, [r7, #20]
 800c886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c888:	4a1d      	ldr	r2, [pc, #116]	; (800c900 <UART_SetConfig+0xacc>)
 800c88a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c88e:	461a      	mov	r2, r3
 800c890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c892:	fbb3 f2f2 	udiv	r2, r3, r2
 800c896:	697b      	ldr	r3, [r7, #20]
 800c898:	685b      	ldr	r3, [r3, #4]
 800c89a:	085b      	lsrs	r3, r3, #1
 800c89c:	441a      	add	r2, r3
 800c89e:	697b      	ldr	r3, [r7, #20]
 800c8a0:	685b      	ldr	r3, [r3, #4]
 800c8a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c8a6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c8a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8aa:	2b0f      	cmp	r3, #15
 800c8ac:	d909      	bls.n	800c8c2 <UART_SetConfig+0xa8e>
 800c8ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c8b4:	d205      	bcs.n	800c8c2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c8b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8b8:	b29a      	uxth	r2, r3
 800c8ba:	697b      	ldr	r3, [r7, #20]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	60da      	str	r2, [r3, #12]
 800c8c0:	e002      	b.n	800c8c8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c8c2:	2301      	movs	r3, #1
 800c8c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c8c8:	697b      	ldr	r3, [r7, #20]
 800c8ca:	2201      	movs	r2, #1
 800c8cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c8d0:	697b      	ldr	r3, [r7, #20]
 800c8d2:	2201      	movs	r2, #1
 800c8d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c8d8:	697b      	ldr	r3, [r7, #20]
 800c8da:	2200      	movs	r2, #0
 800c8dc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c8de:	697b      	ldr	r3, [r7, #20]
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c8e4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	3748      	adds	r7, #72	; 0x48
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c8f2:	bf00      	nop
 800c8f4:	58024400 	.word	0x58024400
 800c8f8:	03d09000 	.word	0x03d09000
 800c8fc:	003d0900 	.word	0x003d0900
 800c900:	08014a58 	.word	0x08014a58

0800c904 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c904:	b480      	push	{r7}
 800c906:	b083      	sub	sp, #12
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c910:	f003 0301 	and.w	r3, r3, #1
 800c914:	2b00      	cmp	r3, #0
 800c916:	d00a      	beq.n	800c92e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	685b      	ldr	r3, [r3, #4]
 800c91e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	430a      	orrs	r2, r1
 800c92c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c932:	f003 0302 	and.w	r3, r3, #2
 800c936:	2b00      	cmp	r3, #0
 800c938:	d00a      	beq.n	800c950 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	685b      	ldr	r3, [r3, #4]
 800c940:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	430a      	orrs	r2, r1
 800c94e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c954:	f003 0304 	and.w	r3, r3, #4
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d00a      	beq.n	800c972 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	685b      	ldr	r3, [r3, #4]
 800c962:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	430a      	orrs	r2, r1
 800c970:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c976:	f003 0308 	and.w	r3, r3, #8
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d00a      	beq.n	800c994 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	685b      	ldr	r3, [r3, #4]
 800c984:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	430a      	orrs	r2, r1
 800c992:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c998:	f003 0310 	and.w	r3, r3, #16
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d00a      	beq.n	800c9b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	689b      	ldr	r3, [r3, #8]
 800c9a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	430a      	orrs	r2, r1
 800c9b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9ba:	f003 0320 	and.w	r3, r3, #32
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d00a      	beq.n	800c9d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	689b      	ldr	r3, [r3, #8]
 800c9c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	430a      	orrs	r2, r1
 800c9d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d01a      	beq.n	800ca1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	685b      	ldr	r3, [r3, #4]
 800c9ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	430a      	orrs	r2, r1
 800c9f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ca02:	d10a      	bne.n	800ca1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	685b      	ldr	r3, [r3, #4]
 800ca0a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	430a      	orrs	r2, r1
 800ca18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d00a      	beq.n	800ca3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	685b      	ldr	r3, [r3, #4]
 800ca2c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	430a      	orrs	r2, r1
 800ca3a:	605a      	str	r2, [r3, #4]
  }
}
 800ca3c:	bf00      	nop
 800ca3e:	370c      	adds	r7, #12
 800ca40:	46bd      	mov	sp, r7
 800ca42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca46:	4770      	bx	lr

0800ca48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b086      	sub	sp, #24
 800ca4c:	af02      	add	r7, sp, #8
 800ca4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	2200      	movs	r2, #0
 800ca54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ca58:	f7f7 fb2a 	bl	80040b0 <HAL_GetTick>
 800ca5c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	f003 0308 	and.w	r3, r3, #8
 800ca68:	2b08      	cmp	r3, #8
 800ca6a:	d10e      	bne.n	800ca8a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ca6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ca70:	9300      	str	r3, [sp, #0]
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	2200      	movs	r2, #0
 800ca76:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ca7a:	6878      	ldr	r0, [r7, #4]
 800ca7c:	f000 f82f 	bl	800cade <UART_WaitOnFlagUntilTimeout>
 800ca80:	4603      	mov	r3, r0
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d001      	beq.n	800ca8a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ca86:	2303      	movs	r3, #3
 800ca88:	e025      	b.n	800cad6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	f003 0304 	and.w	r3, r3, #4
 800ca94:	2b04      	cmp	r3, #4
 800ca96:	d10e      	bne.n	800cab6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ca98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ca9c:	9300      	str	r3, [sp, #0]
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	2200      	movs	r2, #0
 800caa2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800caa6:	6878      	ldr	r0, [r7, #4]
 800caa8:	f000 f819 	bl	800cade <UART_WaitOnFlagUntilTimeout>
 800caac:	4603      	mov	r3, r0
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d001      	beq.n	800cab6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800cab2:	2303      	movs	r3, #3
 800cab4:	e00f      	b.n	800cad6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	2220      	movs	r2, #32
 800caba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	2220      	movs	r2, #32
 800cac2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	2200      	movs	r2, #0
 800caca:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	2200      	movs	r2, #0
 800cad0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cad4:	2300      	movs	r3, #0
}
 800cad6:	4618      	mov	r0, r3
 800cad8:	3710      	adds	r7, #16
 800cada:	46bd      	mov	sp, r7
 800cadc:	bd80      	pop	{r7, pc}

0800cade <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800cade:	b580      	push	{r7, lr}
 800cae0:	b09c      	sub	sp, #112	; 0x70
 800cae2:	af00      	add	r7, sp, #0
 800cae4:	60f8      	str	r0, [r7, #12]
 800cae6:	60b9      	str	r1, [r7, #8]
 800cae8:	603b      	str	r3, [r7, #0]
 800caea:	4613      	mov	r3, r2
 800caec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800caee:	e0a9      	b.n	800cc44 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800caf0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800caf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800caf6:	f000 80a5 	beq.w	800cc44 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cafa:	f7f7 fad9 	bl	80040b0 <HAL_GetTick>
 800cafe:	4602      	mov	r2, r0
 800cb00:	683b      	ldr	r3, [r7, #0]
 800cb02:	1ad3      	subs	r3, r2, r3
 800cb04:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800cb06:	429a      	cmp	r2, r3
 800cb08:	d302      	bcc.n	800cb10 <UART_WaitOnFlagUntilTimeout+0x32>
 800cb0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d140      	bne.n	800cb92 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb18:	e853 3f00 	ldrex	r3, [r3]
 800cb1c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800cb1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb20:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cb24:	667b      	str	r3, [r7, #100]	; 0x64
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	461a      	mov	r2, r3
 800cb2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cb2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cb30:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb32:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800cb34:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800cb36:	e841 2300 	strex	r3, r2, [r1]
 800cb3a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800cb3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d1e6      	bne.n	800cb10 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	3308      	adds	r3, #8
 800cb48:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb4c:	e853 3f00 	ldrex	r3, [r3]
 800cb50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cb52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb54:	f023 0301 	bic.w	r3, r3, #1
 800cb58:	663b      	str	r3, [r7, #96]	; 0x60
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	3308      	adds	r3, #8
 800cb60:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cb62:	64ba      	str	r2, [r7, #72]	; 0x48
 800cb64:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb66:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cb68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cb6a:	e841 2300 	strex	r3, r2, [r1]
 800cb6e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800cb70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d1e5      	bne.n	800cb42 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	2220      	movs	r2, #32
 800cb7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	2220      	movs	r2, #32
 800cb82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	2200      	movs	r2, #0
 800cb8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800cb8e:	2303      	movs	r3, #3
 800cb90:	e069      	b.n	800cc66 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	f003 0304 	and.w	r3, r3, #4
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d051      	beq.n	800cc44 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	69db      	ldr	r3, [r3, #28]
 800cba6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cbaa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cbae:	d149      	bne.n	800cc44 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cbb8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbc2:	e853 3f00 	ldrex	r3, [r3]
 800cbc6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cbc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800cbce:	66fb      	str	r3, [r7, #108]	; 0x6c
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	461a      	mov	r2, r3
 800cbd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cbd8:	637b      	str	r3, [r7, #52]	; 0x34
 800cbda:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbdc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cbde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cbe0:	e841 2300 	strex	r3, r2, [r1]
 800cbe4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800cbe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d1e6      	bne.n	800cbba <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	3308      	adds	r3, #8
 800cbf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbf4:	697b      	ldr	r3, [r7, #20]
 800cbf6:	e853 3f00 	ldrex	r3, [r3]
 800cbfa:	613b      	str	r3, [r7, #16]
   return(result);
 800cbfc:	693b      	ldr	r3, [r7, #16]
 800cbfe:	f023 0301 	bic.w	r3, r3, #1
 800cc02:	66bb      	str	r3, [r7, #104]	; 0x68
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	3308      	adds	r3, #8
 800cc0a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cc0c:	623a      	str	r2, [r7, #32]
 800cc0e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc10:	69f9      	ldr	r1, [r7, #28]
 800cc12:	6a3a      	ldr	r2, [r7, #32]
 800cc14:	e841 2300 	strex	r3, r2, [r1]
 800cc18:	61bb      	str	r3, [r7, #24]
   return(result);
 800cc1a:	69bb      	ldr	r3, [r7, #24]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d1e5      	bne.n	800cbec <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	2220      	movs	r2, #32
 800cc24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	2220      	movs	r2, #32
 800cc2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	2220      	movs	r2, #32
 800cc34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800cc40:	2303      	movs	r3, #3
 800cc42:	e010      	b.n	800cc66 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	69da      	ldr	r2, [r3, #28]
 800cc4a:	68bb      	ldr	r3, [r7, #8]
 800cc4c:	4013      	ands	r3, r2
 800cc4e:	68ba      	ldr	r2, [r7, #8]
 800cc50:	429a      	cmp	r2, r3
 800cc52:	bf0c      	ite	eq
 800cc54:	2301      	moveq	r3, #1
 800cc56:	2300      	movne	r3, #0
 800cc58:	b2db      	uxtb	r3, r3
 800cc5a:	461a      	mov	r2, r3
 800cc5c:	79fb      	ldrb	r3, [r7, #7]
 800cc5e:	429a      	cmp	r2, r3
 800cc60:	f43f af46 	beq.w	800caf0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cc64:	2300      	movs	r3, #0
}
 800cc66:	4618      	mov	r0, r3
 800cc68:	3770      	adds	r7, #112	; 0x70
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd80      	pop	{r7, pc}

0800cc6e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cc6e:	b480      	push	{r7}
 800cc70:	b085      	sub	sp, #20
 800cc72:	af00      	add	r7, sp, #0
 800cc74:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cc7c:	2b01      	cmp	r3, #1
 800cc7e:	d101      	bne.n	800cc84 <HAL_UARTEx_DisableFifoMode+0x16>
 800cc80:	2302      	movs	r3, #2
 800cc82:	e027      	b.n	800ccd4 <HAL_UARTEx_DisableFifoMode+0x66>
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	2201      	movs	r2, #1
 800cc88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	2224      	movs	r2, #36	; 0x24
 800cc90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	681a      	ldr	r2, [r3, #0]
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	f022 0201 	bic.w	r2, r2, #1
 800ccaa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ccb2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	68fa      	ldr	r2, [r7, #12]
 800ccc0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	2220      	movs	r2, #32
 800ccc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	2200      	movs	r2, #0
 800ccce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ccd2:	2300      	movs	r3, #0
}
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	3714      	adds	r7, #20
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccde:	4770      	bx	lr

0800cce0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b084      	sub	sp, #16
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
 800cce8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ccf0:	2b01      	cmp	r3, #1
 800ccf2:	d101      	bne.n	800ccf8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ccf4:	2302      	movs	r3, #2
 800ccf6:	e02d      	b.n	800cd54 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	2201      	movs	r2, #1
 800ccfc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	2224      	movs	r2, #36	; 0x24
 800cd04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	681a      	ldr	r2, [r3, #0]
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	f022 0201 	bic.w	r2, r2, #1
 800cd1e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	689b      	ldr	r3, [r3, #8]
 800cd26:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	683a      	ldr	r2, [r7, #0]
 800cd30:	430a      	orrs	r2, r1
 800cd32:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cd34:	6878      	ldr	r0, [r7, #4]
 800cd36:	f000 f84f 	bl	800cdd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	68fa      	ldr	r2, [r7, #12]
 800cd40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	2220      	movs	r2, #32
 800cd46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cd52:	2300      	movs	r3, #0
}
 800cd54:	4618      	mov	r0, r3
 800cd56:	3710      	adds	r7, #16
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	bd80      	pop	{r7, pc}

0800cd5c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b084      	sub	sp, #16
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
 800cd64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cd6c:	2b01      	cmp	r3, #1
 800cd6e:	d101      	bne.n	800cd74 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cd70:	2302      	movs	r3, #2
 800cd72:	e02d      	b.n	800cdd0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	2201      	movs	r2, #1
 800cd78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	2224      	movs	r2, #36	; 0x24
 800cd80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	681a      	ldr	r2, [r3, #0]
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	f022 0201 	bic.w	r2, r2, #1
 800cd9a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	689b      	ldr	r3, [r3, #8]
 800cda2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	683a      	ldr	r2, [r7, #0]
 800cdac:	430a      	orrs	r2, r1
 800cdae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cdb0:	6878      	ldr	r0, [r7, #4]
 800cdb2:	f000 f811 	bl	800cdd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	68fa      	ldr	r2, [r7, #12]
 800cdbc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	2220      	movs	r2, #32
 800cdc2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	2200      	movs	r2, #0
 800cdca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cdce:	2300      	movs	r3, #0
}
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	3710      	adds	r7, #16
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	bd80      	pop	{r7, pc}

0800cdd8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cdd8:	b480      	push	{r7}
 800cdda:	b085      	sub	sp, #20
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d108      	bne.n	800cdfa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	2201      	movs	r2, #1
 800cdec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	2201      	movs	r2, #1
 800cdf4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800cdf8:	e031      	b.n	800ce5e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800cdfa:	2310      	movs	r3, #16
 800cdfc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800cdfe:	2310      	movs	r3, #16
 800ce00:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	689b      	ldr	r3, [r3, #8]
 800ce08:	0e5b      	lsrs	r3, r3, #25
 800ce0a:	b2db      	uxtb	r3, r3
 800ce0c:	f003 0307 	and.w	r3, r3, #7
 800ce10:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	689b      	ldr	r3, [r3, #8]
 800ce18:	0f5b      	lsrs	r3, r3, #29
 800ce1a:	b2db      	uxtb	r3, r3
 800ce1c:	f003 0307 	and.w	r3, r3, #7
 800ce20:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ce22:	7bbb      	ldrb	r3, [r7, #14]
 800ce24:	7b3a      	ldrb	r2, [r7, #12]
 800ce26:	4911      	ldr	r1, [pc, #68]	; (800ce6c <UARTEx_SetNbDataToProcess+0x94>)
 800ce28:	5c8a      	ldrb	r2, [r1, r2]
 800ce2a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ce2e:	7b3a      	ldrb	r2, [r7, #12]
 800ce30:	490f      	ldr	r1, [pc, #60]	; (800ce70 <UARTEx_SetNbDataToProcess+0x98>)
 800ce32:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ce34:	fb93 f3f2 	sdiv	r3, r3, r2
 800ce38:	b29a      	uxth	r2, r3
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ce40:	7bfb      	ldrb	r3, [r7, #15]
 800ce42:	7b7a      	ldrb	r2, [r7, #13]
 800ce44:	4909      	ldr	r1, [pc, #36]	; (800ce6c <UARTEx_SetNbDataToProcess+0x94>)
 800ce46:	5c8a      	ldrb	r2, [r1, r2]
 800ce48:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ce4c:	7b7a      	ldrb	r2, [r7, #13]
 800ce4e:	4908      	ldr	r1, [pc, #32]	; (800ce70 <UARTEx_SetNbDataToProcess+0x98>)
 800ce50:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ce52:	fb93 f3f2 	sdiv	r3, r3, r2
 800ce56:	b29a      	uxth	r2, r3
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ce5e:	bf00      	nop
 800ce60:	3714      	adds	r7, #20
 800ce62:	46bd      	mov	sp, r7
 800ce64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce68:	4770      	bx	lr
 800ce6a:	bf00      	nop
 800ce6c:	08014a70 	.word	0x08014a70
 800ce70:	08014a78 	.word	0x08014a78

0800ce74 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ce74:	b084      	sub	sp, #16
 800ce76:	b580      	push	{r7, lr}
 800ce78:	b084      	sub	sp, #16
 800ce7a:	af00      	add	r7, sp, #0
 800ce7c:	6078      	str	r0, [r7, #4]
 800ce7e:	f107 001c 	add.w	r0, r7, #28
 800ce82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ce86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce88:	2b01      	cmp	r3, #1
 800ce8a:	d120      	bne.n	800cece <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce90:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	68da      	ldr	r2, [r3, #12]
 800ce9c:	4b2a      	ldr	r3, [pc, #168]	; (800cf48 <USB_CoreInit+0xd4>)
 800ce9e:	4013      	ands	r3, r2
 800cea0:	687a      	ldr	r2, [r7, #4]
 800cea2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	68db      	ldr	r3, [r3, #12]
 800cea8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ceb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ceb2:	2b01      	cmp	r3, #1
 800ceb4:	d105      	bne.n	800cec2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	68db      	ldr	r3, [r3, #12]
 800ceba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800cec2:	6878      	ldr	r0, [r7, #4]
 800cec4:	f000 faac 	bl	800d420 <USB_CoreReset>
 800cec8:	4603      	mov	r3, r0
 800ceca:	73fb      	strb	r3, [r7, #15]
 800cecc:	e01a      	b.n	800cf04 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	68db      	ldr	r3, [r3, #12]
 800ced2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ceda:	6878      	ldr	r0, [r7, #4]
 800cedc:	f000 faa0 	bl	800d420 <USB_CoreReset>
 800cee0:	4603      	mov	r3, r0
 800cee2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800cee4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d106      	bne.n	800cef8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ceee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	639a      	str	r2, [r3, #56]	; 0x38
 800cef6:	e005      	b.n	800cf04 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cefc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800cf04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf06:	2b01      	cmp	r3, #1
 800cf08:	d116      	bne.n	800cf38 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cf0e:	b29a      	uxth	r2, r3
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800cf18:	4b0c      	ldr	r3, [pc, #48]	; (800cf4c <USB_CoreInit+0xd8>)
 800cf1a:	4313      	orrs	r3, r2
 800cf1c:	687a      	ldr	r2, [r7, #4]
 800cf1e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	689b      	ldr	r3, [r3, #8]
 800cf24:	f043 0206 	orr.w	r2, r3, #6
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	689b      	ldr	r3, [r3, #8]
 800cf30:	f043 0220 	orr.w	r2, r3, #32
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800cf38:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	3710      	adds	r7, #16
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cf44:	b004      	add	sp, #16
 800cf46:	4770      	bx	lr
 800cf48:	ffbdffbf 	.word	0xffbdffbf
 800cf4c:	03ee0000 	.word	0x03ee0000

0800cf50 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cf50:	b480      	push	{r7}
 800cf52:	b083      	sub	sp, #12
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	689b      	ldr	r3, [r3, #8]
 800cf5c:	f023 0201 	bic.w	r2, r3, #1
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cf64:	2300      	movs	r3, #0
}
 800cf66:	4618      	mov	r0, r3
 800cf68:	370c      	adds	r7, #12
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf70:	4770      	bx	lr

0800cf72 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800cf72:	b580      	push	{r7, lr}
 800cf74:	b084      	sub	sp, #16
 800cf76:	af00      	add	r7, sp, #0
 800cf78:	6078      	str	r0, [r7, #4]
 800cf7a:	460b      	mov	r3, r1
 800cf7c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800cf7e:	2300      	movs	r3, #0
 800cf80:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	68db      	ldr	r3, [r3, #12]
 800cf86:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800cf8e:	78fb      	ldrb	r3, [r7, #3]
 800cf90:	2b01      	cmp	r3, #1
 800cf92:	d115      	bne.n	800cfc0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	68db      	ldr	r3, [r3, #12]
 800cf98:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800cfa0:	2001      	movs	r0, #1
 800cfa2:	f7f7 f891 	bl	80040c8 <HAL_Delay>
      ms++;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	3301      	adds	r3, #1
 800cfaa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800cfac:	6878      	ldr	r0, [r7, #4]
 800cfae:	f000 fa29 	bl	800d404 <USB_GetMode>
 800cfb2:	4603      	mov	r3, r0
 800cfb4:	2b01      	cmp	r3, #1
 800cfb6:	d01e      	beq.n	800cff6 <USB_SetCurrentMode+0x84>
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	2b31      	cmp	r3, #49	; 0x31
 800cfbc:	d9f0      	bls.n	800cfa0 <USB_SetCurrentMode+0x2e>
 800cfbe:	e01a      	b.n	800cff6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800cfc0:	78fb      	ldrb	r3, [r7, #3]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d115      	bne.n	800cff2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	68db      	ldr	r3, [r3, #12]
 800cfca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800cfd2:	2001      	movs	r0, #1
 800cfd4:	f7f7 f878 	bl	80040c8 <HAL_Delay>
      ms++;
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	3301      	adds	r3, #1
 800cfdc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800cfde:	6878      	ldr	r0, [r7, #4]
 800cfe0:	f000 fa10 	bl	800d404 <USB_GetMode>
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d005      	beq.n	800cff6 <USB_SetCurrentMode+0x84>
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	2b31      	cmp	r3, #49	; 0x31
 800cfee:	d9f0      	bls.n	800cfd2 <USB_SetCurrentMode+0x60>
 800cff0:	e001      	b.n	800cff6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800cff2:	2301      	movs	r3, #1
 800cff4:	e005      	b.n	800d002 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	2b32      	cmp	r3, #50	; 0x32
 800cffa:	d101      	bne.n	800d000 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800cffc:	2301      	movs	r3, #1
 800cffe:	e000      	b.n	800d002 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d000:	2300      	movs	r3, #0
}
 800d002:	4618      	mov	r0, r3
 800d004:	3710      	adds	r7, #16
 800d006:	46bd      	mov	sp, r7
 800d008:	bd80      	pop	{r7, pc}
	...

0800d00c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d00c:	b084      	sub	sp, #16
 800d00e:	b580      	push	{r7, lr}
 800d010:	b086      	sub	sp, #24
 800d012:	af00      	add	r7, sp, #0
 800d014:	6078      	str	r0, [r7, #4]
 800d016:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800d01a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d01e:	2300      	movs	r3, #0
 800d020:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800d026:	2300      	movs	r3, #0
 800d028:	613b      	str	r3, [r7, #16]
 800d02a:	e009      	b.n	800d040 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d02c:	687a      	ldr	r2, [r7, #4]
 800d02e:	693b      	ldr	r3, [r7, #16]
 800d030:	3340      	adds	r3, #64	; 0x40
 800d032:	009b      	lsls	r3, r3, #2
 800d034:	4413      	add	r3, r2
 800d036:	2200      	movs	r2, #0
 800d038:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d03a:	693b      	ldr	r3, [r7, #16]
 800d03c:	3301      	adds	r3, #1
 800d03e:	613b      	str	r3, [r7, #16]
 800d040:	693b      	ldr	r3, [r7, #16]
 800d042:	2b0e      	cmp	r3, #14
 800d044:	d9f2      	bls.n	800d02c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d11c      	bne.n	800d086 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d052:	685b      	ldr	r3, [r3, #4]
 800d054:	68fa      	ldr	r2, [r7, #12]
 800d056:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d05a:	f043 0302 	orr.w	r3, r3, #2
 800d05e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d064:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	601a      	str	r2, [r3, #0]
 800d084:	e005      	b.n	800d092 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d08a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d098:	461a      	mov	r2, r3
 800d09a:	2300      	movs	r3, #0
 800d09c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800d09e:	68fb      	ldr	r3, [r7, #12]
 800d0a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0a4:	4619      	mov	r1, r3
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0ac:	461a      	mov	r2, r3
 800d0ae:	680b      	ldr	r3, [r1, #0]
 800d0b0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d0b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0b4:	2b01      	cmp	r3, #1
 800d0b6:	d10c      	bne.n	800d0d2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d0b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d104      	bne.n	800d0c8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d0be:	2100      	movs	r1, #0
 800d0c0:	6878      	ldr	r0, [r7, #4]
 800d0c2:	f000 f965 	bl	800d390 <USB_SetDevSpeed>
 800d0c6:	e008      	b.n	800d0da <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d0c8:	2101      	movs	r1, #1
 800d0ca:	6878      	ldr	r0, [r7, #4]
 800d0cc:	f000 f960 	bl	800d390 <USB_SetDevSpeed>
 800d0d0:	e003      	b.n	800d0da <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d0d2:	2103      	movs	r1, #3
 800d0d4:	6878      	ldr	r0, [r7, #4]
 800d0d6:	f000 f95b 	bl	800d390 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d0da:	2110      	movs	r1, #16
 800d0dc:	6878      	ldr	r0, [r7, #4]
 800d0de:	f000 f8f3 	bl	800d2c8 <USB_FlushTxFifo>
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d001      	beq.n	800d0ec <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800d0e8:	2301      	movs	r3, #1
 800d0ea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d0ec:	6878      	ldr	r0, [r7, #4]
 800d0ee:	f000 f91f 	bl	800d330 <USB_FlushRxFifo>
 800d0f2:	4603      	mov	r3, r0
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d001      	beq.n	800d0fc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800d0f8:	2301      	movs	r3, #1
 800d0fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d102:	461a      	mov	r2, r3
 800d104:	2300      	movs	r3, #0
 800d106:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d10e:	461a      	mov	r2, r3
 800d110:	2300      	movs	r3, #0
 800d112:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d11a:	461a      	mov	r2, r3
 800d11c:	2300      	movs	r3, #0
 800d11e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d120:	2300      	movs	r3, #0
 800d122:	613b      	str	r3, [r7, #16]
 800d124:	e043      	b.n	800d1ae <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d126:	693b      	ldr	r3, [r7, #16]
 800d128:	015a      	lsls	r2, r3, #5
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	4413      	add	r3, r2
 800d12e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d138:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d13c:	d118      	bne.n	800d170 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800d13e:	693b      	ldr	r3, [r7, #16]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d10a      	bne.n	800d15a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d144:	693b      	ldr	r3, [r7, #16]
 800d146:	015a      	lsls	r2, r3, #5
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	4413      	add	r3, r2
 800d14c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d150:	461a      	mov	r2, r3
 800d152:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d156:	6013      	str	r3, [r2, #0]
 800d158:	e013      	b.n	800d182 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d15a:	693b      	ldr	r3, [r7, #16]
 800d15c:	015a      	lsls	r2, r3, #5
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	4413      	add	r3, r2
 800d162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d166:	461a      	mov	r2, r3
 800d168:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d16c:	6013      	str	r3, [r2, #0]
 800d16e:	e008      	b.n	800d182 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d170:	693b      	ldr	r3, [r7, #16]
 800d172:	015a      	lsls	r2, r3, #5
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	4413      	add	r3, r2
 800d178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d17c:	461a      	mov	r2, r3
 800d17e:	2300      	movs	r3, #0
 800d180:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d182:	693b      	ldr	r3, [r7, #16]
 800d184:	015a      	lsls	r2, r3, #5
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	4413      	add	r3, r2
 800d18a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d18e:	461a      	mov	r2, r3
 800d190:	2300      	movs	r3, #0
 800d192:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d194:	693b      	ldr	r3, [r7, #16]
 800d196:	015a      	lsls	r2, r3, #5
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	4413      	add	r3, r2
 800d19c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1a0:	461a      	mov	r2, r3
 800d1a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d1a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d1a8:	693b      	ldr	r3, [r7, #16]
 800d1aa:	3301      	adds	r3, #1
 800d1ac:	613b      	str	r3, [r7, #16]
 800d1ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1b0:	693a      	ldr	r2, [r7, #16]
 800d1b2:	429a      	cmp	r2, r3
 800d1b4:	d3b7      	bcc.n	800d126 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	613b      	str	r3, [r7, #16]
 800d1ba:	e043      	b.n	800d244 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d1bc:	693b      	ldr	r3, [r7, #16]
 800d1be:	015a      	lsls	r2, r3, #5
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	4413      	add	r3, r2
 800d1c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d1ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d1d2:	d118      	bne.n	800d206 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800d1d4:	693b      	ldr	r3, [r7, #16]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d10a      	bne.n	800d1f0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d1da:	693b      	ldr	r3, [r7, #16]
 800d1dc:	015a      	lsls	r2, r3, #5
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	4413      	add	r3, r2
 800d1e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1e6:	461a      	mov	r2, r3
 800d1e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d1ec:	6013      	str	r3, [r2, #0]
 800d1ee:	e013      	b.n	800d218 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d1f0:	693b      	ldr	r3, [r7, #16]
 800d1f2:	015a      	lsls	r2, r3, #5
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	4413      	add	r3, r2
 800d1f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1fc:	461a      	mov	r2, r3
 800d1fe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800d202:	6013      	str	r3, [r2, #0]
 800d204:	e008      	b.n	800d218 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d206:	693b      	ldr	r3, [r7, #16]
 800d208:	015a      	lsls	r2, r3, #5
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	4413      	add	r3, r2
 800d20e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d212:	461a      	mov	r2, r3
 800d214:	2300      	movs	r3, #0
 800d216:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d218:	693b      	ldr	r3, [r7, #16]
 800d21a:	015a      	lsls	r2, r3, #5
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	4413      	add	r3, r2
 800d220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d224:	461a      	mov	r2, r3
 800d226:	2300      	movs	r3, #0
 800d228:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d22a:	693b      	ldr	r3, [r7, #16]
 800d22c:	015a      	lsls	r2, r3, #5
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	4413      	add	r3, r2
 800d232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d236:	461a      	mov	r2, r3
 800d238:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800d23c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d23e:	693b      	ldr	r3, [r7, #16]
 800d240:	3301      	adds	r3, #1
 800d242:	613b      	str	r3, [r7, #16]
 800d244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d246:	693a      	ldr	r2, [r7, #16]
 800d248:	429a      	cmp	r2, r3
 800d24a:	d3b7      	bcc.n	800d1bc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d252:	691b      	ldr	r3, [r3, #16]
 800d254:	68fa      	ldr	r2, [r7, #12]
 800d256:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d25a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d25e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	2200      	movs	r2, #0
 800d264:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800d26c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d26e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d270:	2b00      	cmp	r3, #0
 800d272:	d105      	bne.n	800d280 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	699b      	ldr	r3, [r3, #24]
 800d278:	f043 0210 	orr.w	r2, r3, #16
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	699a      	ldr	r2, [r3, #24]
 800d284:	4b0e      	ldr	r3, [pc, #56]	; (800d2c0 <USB_DevInit+0x2b4>)
 800d286:	4313      	orrs	r3, r2
 800d288:	687a      	ldr	r2, [r7, #4]
 800d28a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d28c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d005      	beq.n	800d29e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	699b      	ldr	r3, [r3, #24]
 800d296:	f043 0208 	orr.w	r2, r3, #8
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d29e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d2a0:	2b01      	cmp	r3, #1
 800d2a2:	d105      	bne.n	800d2b0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	699a      	ldr	r2, [r3, #24]
 800d2a8:	4b06      	ldr	r3, [pc, #24]	; (800d2c4 <USB_DevInit+0x2b8>)
 800d2aa:	4313      	orrs	r3, r2
 800d2ac:	687a      	ldr	r2, [r7, #4]
 800d2ae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d2b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	3718      	adds	r7, #24
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d2bc:	b004      	add	sp, #16
 800d2be:	4770      	bx	lr
 800d2c0:	803c3800 	.word	0x803c3800
 800d2c4:	40000004 	.word	0x40000004

0800d2c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d2c8:	b480      	push	{r7}
 800d2ca:	b085      	sub	sp, #20
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
 800d2d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	3301      	adds	r3, #1
 800d2da:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	4a13      	ldr	r2, [pc, #76]	; (800d32c <USB_FlushTxFifo+0x64>)
 800d2e0:	4293      	cmp	r3, r2
 800d2e2:	d901      	bls.n	800d2e8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d2e4:	2303      	movs	r3, #3
 800d2e6:	e01b      	b.n	800d320 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	691b      	ldr	r3, [r3, #16]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	daf2      	bge.n	800d2d6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d2f4:	683b      	ldr	r3, [r7, #0]
 800d2f6:	019b      	lsls	r3, r3, #6
 800d2f8:	f043 0220 	orr.w	r2, r3, #32
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	3301      	adds	r3, #1
 800d304:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	4a08      	ldr	r2, [pc, #32]	; (800d32c <USB_FlushTxFifo+0x64>)
 800d30a:	4293      	cmp	r3, r2
 800d30c:	d901      	bls.n	800d312 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d30e:	2303      	movs	r3, #3
 800d310:	e006      	b.n	800d320 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	691b      	ldr	r3, [r3, #16]
 800d316:	f003 0320 	and.w	r3, r3, #32
 800d31a:	2b20      	cmp	r3, #32
 800d31c:	d0f0      	beq.n	800d300 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d31e:	2300      	movs	r3, #0
}
 800d320:	4618      	mov	r0, r3
 800d322:	3714      	adds	r7, #20
 800d324:	46bd      	mov	sp, r7
 800d326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32a:	4770      	bx	lr
 800d32c:	00030d40 	.word	0x00030d40

0800d330 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d330:	b480      	push	{r7}
 800d332:	b085      	sub	sp, #20
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d338:	2300      	movs	r3, #0
 800d33a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	3301      	adds	r3, #1
 800d340:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	4a11      	ldr	r2, [pc, #68]	; (800d38c <USB_FlushRxFifo+0x5c>)
 800d346:	4293      	cmp	r3, r2
 800d348:	d901      	bls.n	800d34e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d34a:	2303      	movs	r3, #3
 800d34c:	e018      	b.n	800d380 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	691b      	ldr	r3, [r3, #16]
 800d352:	2b00      	cmp	r3, #0
 800d354:	daf2      	bge.n	800d33c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d356:	2300      	movs	r3, #0
 800d358:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	2210      	movs	r2, #16
 800d35e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	3301      	adds	r3, #1
 800d364:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	4a08      	ldr	r2, [pc, #32]	; (800d38c <USB_FlushRxFifo+0x5c>)
 800d36a:	4293      	cmp	r3, r2
 800d36c:	d901      	bls.n	800d372 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d36e:	2303      	movs	r3, #3
 800d370:	e006      	b.n	800d380 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	691b      	ldr	r3, [r3, #16]
 800d376:	f003 0310 	and.w	r3, r3, #16
 800d37a:	2b10      	cmp	r3, #16
 800d37c:	d0f0      	beq.n	800d360 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d37e:	2300      	movs	r3, #0
}
 800d380:	4618      	mov	r0, r3
 800d382:	3714      	adds	r7, #20
 800d384:	46bd      	mov	sp, r7
 800d386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d38a:	4770      	bx	lr
 800d38c:	00030d40 	.word	0x00030d40

0800d390 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d390:	b480      	push	{r7}
 800d392:	b085      	sub	sp, #20
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
 800d398:	460b      	mov	r3, r1
 800d39a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3a6:	681a      	ldr	r2, [r3, #0]
 800d3a8:	78fb      	ldrb	r3, [r7, #3]
 800d3aa:	68f9      	ldr	r1, [r7, #12]
 800d3ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d3b0:	4313      	orrs	r3, r2
 800d3b2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d3b4:	2300      	movs	r3, #0
}
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	3714      	adds	r7, #20
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c0:	4770      	bx	lr

0800d3c2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d3c2:	b480      	push	{r7}
 800d3c4:	b085      	sub	sp, #20
 800d3c6:	af00      	add	r7, sp, #0
 800d3c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	68fa      	ldr	r2, [r7, #12]
 800d3d8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d3dc:	f023 0303 	bic.w	r3, r3, #3
 800d3e0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d3e8:	685b      	ldr	r3, [r3, #4]
 800d3ea:	68fa      	ldr	r2, [r7, #12]
 800d3ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d3f0:	f043 0302 	orr.w	r3, r3, #2
 800d3f4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d3f6:	2300      	movs	r3, #0
}
 800d3f8:	4618      	mov	r0, r3
 800d3fa:	3714      	adds	r7, #20
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d402:	4770      	bx	lr

0800d404 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d404:	b480      	push	{r7}
 800d406:	b083      	sub	sp, #12
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	695b      	ldr	r3, [r3, #20]
 800d410:	f003 0301 	and.w	r3, r3, #1
}
 800d414:	4618      	mov	r0, r3
 800d416:	370c      	adds	r7, #12
 800d418:	46bd      	mov	sp, r7
 800d41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41e:	4770      	bx	lr

0800d420 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d420:	b480      	push	{r7}
 800d422:	b085      	sub	sp, #20
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d428:	2300      	movs	r3, #0
 800d42a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	3301      	adds	r3, #1
 800d430:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	4a13      	ldr	r2, [pc, #76]	; (800d484 <USB_CoreReset+0x64>)
 800d436:	4293      	cmp	r3, r2
 800d438:	d901      	bls.n	800d43e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d43a:	2303      	movs	r3, #3
 800d43c:	e01b      	b.n	800d476 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	691b      	ldr	r3, [r3, #16]
 800d442:	2b00      	cmp	r3, #0
 800d444:	daf2      	bge.n	800d42c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d446:	2300      	movs	r3, #0
 800d448:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	691b      	ldr	r3, [r3, #16]
 800d44e:	f043 0201 	orr.w	r2, r3, #1
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	3301      	adds	r3, #1
 800d45a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	4a09      	ldr	r2, [pc, #36]	; (800d484 <USB_CoreReset+0x64>)
 800d460:	4293      	cmp	r3, r2
 800d462:	d901      	bls.n	800d468 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d464:	2303      	movs	r3, #3
 800d466:	e006      	b.n	800d476 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	691b      	ldr	r3, [r3, #16]
 800d46c:	f003 0301 	and.w	r3, r3, #1
 800d470:	2b01      	cmp	r3, #1
 800d472:	d0f0      	beq.n	800d456 <USB_CoreReset+0x36>

  return HAL_OK;
 800d474:	2300      	movs	r3, #0
}
 800d476:	4618      	mov	r0, r3
 800d478:	3714      	adds	r7, #20
 800d47a:	46bd      	mov	sp, r7
 800d47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d480:	4770      	bx	lr
 800d482:	bf00      	nop
 800d484:	00030d40 	.word	0x00030d40

0800d488 <__errno>:
 800d488:	4b01      	ldr	r3, [pc, #4]	; (800d490 <__errno+0x8>)
 800d48a:	6818      	ldr	r0, [r3, #0]
 800d48c:	4770      	bx	lr
 800d48e:	bf00      	nop
 800d490:	24000014 	.word	0x24000014

0800d494 <__libc_init_array>:
 800d494:	b570      	push	{r4, r5, r6, lr}
 800d496:	4d0d      	ldr	r5, [pc, #52]	; (800d4cc <__libc_init_array+0x38>)
 800d498:	4c0d      	ldr	r4, [pc, #52]	; (800d4d0 <__libc_init_array+0x3c>)
 800d49a:	1b64      	subs	r4, r4, r5
 800d49c:	10a4      	asrs	r4, r4, #2
 800d49e:	2600      	movs	r6, #0
 800d4a0:	42a6      	cmp	r6, r4
 800d4a2:	d109      	bne.n	800d4b8 <__libc_init_array+0x24>
 800d4a4:	4d0b      	ldr	r5, [pc, #44]	; (800d4d4 <__libc_init_array+0x40>)
 800d4a6:	4c0c      	ldr	r4, [pc, #48]	; (800d4d8 <__libc_init_array+0x44>)
 800d4a8:	f004 fbac 	bl	8011c04 <_init>
 800d4ac:	1b64      	subs	r4, r4, r5
 800d4ae:	10a4      	asrs	r4, r4, #2
 800d4b0:	2600      	movs	r6, #0
 800d4b2:	42a6      	cmp	r6, r4
 800d4b4:	d105      	bne.n	800d4c2 <__libc_init_array+0x2e>
 800d4b6:	bd70      	pop	{r4, r5, r6, pc}
 800d4b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800d4bc:	4798      	blx	r3
 800d4be:	3601      	adds	r6, #1
 800d4c0:	e7ee      	b.n	800d4a0 <__libc_init_array+0xc>
 800d4c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800d4c6:	4798      	blx	r3
 800d4c8:	3601      	adds	r6, #1
 800d4ca:	e7f2      	b.n	800d4b2 <__libc_init_array+0x1e>
 800d4cc:	08014f2c 	.word	0x08014f2c
 800d4d0:	08014f2c 	.word	0x08014f2c
 800d4d4:	08014f2c 	.word	0x08014f2c
 800d4d8:	08014f30 	.word	0x08014f30

0800d4dc <memset>:
 800d4dc:	4402      	add	r2, r0
 800d4de:	4603      	mov	r3, r0
 800d4e0:	4293      	cmp	r3, r2
 800d4e2:	d100      	bne.n	800d4e6 <memset+0xa>
 800d4e4:	4770      	bx	lr
 800d4e6:	f803 1b01 	strb.w	r1, [r3], #1
 800d4ea:	e7f9      	b.n	800d4e0 <memset+0x4>

0800d4ec <__cvt>:
 800d4ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4ee:	ed2d 8b02 	vpush	{d8}
 800d4f2:	eeb0 8b40 	vmov.f64	d8, d0
 800d4f6:	b085      	sub	sp, #20
 800d4f8:	4617      	mov	r7, r2
 800d4fa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800d4fc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800d4fe:	ee18 2a90 	vmov	r2, s17
 800d502:	f025 0520 	bic.w	r5, r5, #32
 800d506:	2a00      	cmp	r2, #0
 800d508:	bfb6      	itet	lt
 800d50a:	222d      	movlt	r2, #45	; 0x2d
 800d50c:	2200      	movge	r2, #0
 800d50e:	eeb1 8b40 	vneglt.f64	d8, d0
 800d512:	2d46      	cmp	r5, #70	; 0x46
 800d514:	460c      	mov	r4, r1
 800d516:	701a      	strb	r2, [r3, #0]
 800d518:	d004      	beq.n	800d524 <__cvt+0x38>
 800d51a:	2d45      	cmp	r5, #69	; 0x45
 800d51c:	d100      	bne.n	800d520 <__cvt+0x34>
 800d51e:	3401      	adds	r4, #1
 800d520:	2102      	movs	r1, #2
 800d522:	e000      	b.n	800d526 <__cvt+0x3a>
 800d524:	2103      	movs	r1, #3
 800d526:	ab03      	add	r3, sp, #12
 800d528:	9301      	str	r3, [sp, #4]
 800d52a:	ab02      	add	r3, sp, #8
 800d52c:	9300      	str	r3, [sp, #0]
 800d52e:	4622      	mov	r2, r4
 800d530:	4633      	mov	r3, r6
 800d532:	eeb0 0b48 	vmov.f64	d0, d8
 800d536:	f001 fd2f 	bl	800ef98 <_dtoa_r>
 800d53a:	2d47      	cmp	r5, #71	; 0x47
 800d53c:	d101      	bne.n	800d542 <__cvt+0x56>
 800d53e:	07fb      	lsls	r3, r7, #31
 800d540:	d51a      	bpl.n	800d578 <__cvt+0x8c>
 800d542:	2d46      	cmp	r5, #70	; 0x46
 800d544:	eb00 0204 	add.w	r2, r0, r4
 800d548:	d10c      	bne.n	800d564 <__cvt+0x78>
 800d54a:	7803      	ldrb	r3, [r0, #0]
 800d54c:	2b30      	cmp	r3, #48	; 0x30
 800d54e:	d107      	bne.n	800d560 <__cvt+0x74>
 800d550:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d558:	bf1c      	itt	ne
 800d55a:	f1c4 0401 	rsbne	r4, r4, #1
 800d55e:	6034      	strne	r4, [r6, #0]
 800d560:	6833      	ldr	r3, [r6, #0]
 800d562:	441a      	add	r2, r3
 800d564:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800d568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d56c:	bf08      	it	eq
 800d56e:	9203      	streq	r2, [sp, #12]
 800d570:	2130      	movs	r1, #48	; 0x30
 800d572:	9b03      	ldr	r3, [sp, #12]
 800d574:	4293      	cmp	r3, r2
 800d576:	d307      	bcc.n	800d588 <__cvt+0x9c>
 800d578:	9b03      	ldr	r3, [sp, #12]
 800d57a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d57c:	1a1b      	subs	r3, r3, r0
 800d57e:	6013      	str	r3, [r2, #0]
 800d580:	b005      	add	sp, #20
 800d582:	ecbd 8b02 	vpop	{d8}
 800d586:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d588:	1c5c      	adds	r4, r3, #1
 800d58a:	9403      	str	r4, [sp, #12]
 800d58c:	7019      	strb	r1, [r3, #0]
 800d58e:	e7f0      	b.n	800d572 <__cvt+0x86>

0800d590 <__exponent>:
 800d590:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d592:	4603      	mov	r3, r0
 800d594:	2900      	cmp	r1, #0
 800d596:	bfb8      	it	lt
 800d598:	4249      	neglt	r1, r1
 800d59a:	f803 2b02 	strb.w	r2, [r3], #2
 800d59e:	bfb4      	ite	lt
 800d5a0:	222d      	movlt	r2, #45	; 0x2d
 800d5a2:	222b      	movge	r2, #43	; 0x2b
 800d5a4:	2909      	cmp	r1, #9
 800d5a6:	7042      	strb	r2, [r0, #1]
 800d5a8:	dd2a      	ble.n	800d600 <__exponent+0x70>
 800d5aa:	f10d 0407 	add.w	r4, sp, #7
 800d5ae:	46a4      	mov	ip, r4
 800d5b0:	270a      	movs	r7, #10
 800d5b2:	46a6      	mov	lr, r4
 800d5b4:	460a      	mov	r2, r1
 800d5b6:	fb91 f6f7 	sdiv	r6, r1, r7
 800d5ba:	fb07 1516 	mls	r5, r7, r6, r1
 800d5be:	3530      	adds	r5, #48	; 0x30
 800d5c0:	2a63      	cmp	r2, #99	; 0x63
 800d5c2:	f104 34ff 	add.w	r4, r4, #4294967295
 800d5c6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800d5ca:	4631      	mov	r1, r6
 800d5cc:	dcf1      	bgt.n	800d5b2 <__exponent+0x22>
 800d5ce:	3130      	adds	r1, #48	; 0x30
 800d5d0:	f1ae 0502 	sub.w	r5, lr, #2
 800d5d4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800d5d8:	1c44      	adds	r4, r0, #1
 800d5da:	4629      	mov	r1, r5
 800d5dc:	4561      	cmp	r1, ip
 800d5de:	d30a      	bcc.n	800d5f6 <__exponent+0x66>
 800d5e0:	f10d 0209 	add.w	r2, sp, #9
 800d5e4:	eba2 020e 	sub.w	r2, r2, lr
 800d5e8:	4565      	cmp	r5, ip
 800d5ea:	bf88      	it	hi
 800d5ec:	2200      	movhi	r2, #0
 800d5ee:	4413      	add	r3, r2
 800d5f0:	1a18      	subs	r0, r3, r0
 800d5f2:	b003      	add	sp, #12
 800d5f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d5fa:	f804 2f01 	strb.w	r2, [r4, #1]!
 800d5fe:	e7ed      	b.n	800d5dc <__exponent+0x4c>
 800d600:	2330      	movs	r3, #48	; 0x30
 800d602:	3130      	adds	r1, #48	; 0x30
 800d604:	7083      	strb	r3, [r0, #2]
 800d606:	70c1      	strb	r1, [r0, #3]
 800d608:	1d03      	adds	r3, r0, #4
 800d60a:	e7f1      	b.n	800d5f0 <__exponent+0x60>
 800d60c:	0000      	movs	r0, r0
	...

0800d610 <_printf_float>:
 800d610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d614:	b08b      	sub	sp, #44	; 0x2c
 800d616:	460c      	mov	r4, r1
 800d618:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800d61c:	4616      	mov	r6, r2
 800d61e:	461f      	mov	r7, r3
 800d620:	4605      	mov	r5, r0
 800d622:	f002 fd97 	bl	8010154 <_localeconv_r>
 800d626:	f8d0 b000 	ldr.w	fp, [r0]
 800d62a:	4658      	mov	r0, fp
 800d62c:	f7f2 feb8 	bl	80003a0 <strlen>
 800d630:	2300      	movs	r3, #0
 800d632:	9308      	str	r3, [sp, #32]
 800d634:	f8d8 3000 	ldr.w	r3, [r8]
 800d638:	f894 9018 	ldrb.w	r9, [r4, #24]
 800d63c:	6822      	ldr	r2, [r4, #0]
 800d63e:	3307      	adds	r3, #7
 800d640:	f023 0307 	bic.w	r3, r3, #7
 800d644:	f103 0108 	add.w	r1, r3, #8
 800d648:	f8c8 1000 	str.w	r1, [r8]
 800d64c:	4682      	mov	sl, r0
 800d64e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800d652:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800d656:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800d8b8 <_printf_float+0x2a8>
 800d65a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800d65e:	eeb0 6bc0 	vabs.f64	d6, d0
 800d662:	eeb4 6b47 	vcmp.f64	d6, d7
 800d666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d66a:	dd24      	ble.n	800d6b6 <_printf_float+0xa6>
 800d66c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800d670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d674:	d502      	bpl.n	800d67c <_printf_float+0x6c>
 800d676:	232d      	movs	r3, #45	; 0x2d
 800d678:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d67c:	4b90      	ldr	r3, [pc, #576]	; (800d8c0 <_printf_float+0x2b0>)
 800d67e:	4891      	ldr	r0, [pc, #580]	; (800d8c4 <_printf_float+0x2b4>)
 800d680:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800d684:	bf94      	ite	ls
 800d686:	4698      	movls	r8, r3
 800d688:	4680      	movhi	r8, r0
 800d68a:	2303      	movs	r3, #3
 800d68c:	6123      	str	r3, [r4, #16]
 800d68e:	f022 0204 	bic.w	r2, r2, #4
 800d692:	2300      	movs	r3, #0
 800d694:	6022      	str	r2, [r4, #0]
 800d696:	9304      	str	r3, [sp, #16]
 800d698:	9700      	str	r7, [sp, #0]
 800d69a:	4633      	mov	r3, r6
 800d69c:	aa09      	add	r2, sp, #36	; 0x24
 800d69e:	4621      	mov	r1, r4
 800d6a0:	4628      	mov	r0, r5
 800d6a2:	f000 f9d3 	bl	800da4c <_printf_common>
 800d6a6:	3001      	adds	r0, #1
 800d6a8:	f040 808a 	bne.w	800d7c0 <_printf_float+0x1b0>
 800d6ac:	f04f 30ff 	mov.w	r0, #4294967295
 800d6b0:	b00b      	add	sp, #44	; 0x2c
 800d6b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6b6:	eeb4 0b40 	vcmp.f64	d0, d0
 800d6ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6be:	d709      	bvc.n	800d6d4 <_printf_float+0xc4>
 800d6c0:	ee10 3a90 	vmov	r3, s1
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	bfbc      	itt	lt
 800d6c8:	232d      	movlt	r3, #45	; 0x2d
 800d6ca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d6ce:	487e      	ldr	r0, [pc, #504]	; (800d8c8 <_printf_float+0x2b8>)
 800d6d0:	4b7e      	ldr	r3, [pc, #504]	; (800d8cc <_printf_float+0x2bc>)
 800d6d2:	e7d5      	b.n	800d680 <_printf_float+0x70>
 800d6d4:	6863      	ldr	r3, [r4, #4]
 800d6d6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800d6da:	9104      	str	r1, [sp, #16]
 800d6dc:	1c59      	adds	r1, r3, #1
 800d6de:	d13c      	bne.n	800d75a <_printf_float+0x14a>
 800d6e0:	2306      	movs	r3, #6
 800d6e2:	6063      	str	r3, [r4, #4]
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	9303      	str	r3, [sp, #12]
 800d6e8:	ab08      	add	r3, sp, #32
 800d6ea:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800d6ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d6f2:	ab07      	add	r3, sp, #28
 800d6f4:	6861      	ldr	r1, [r4, #4]
 800d6f6:	9300      	str	r3, [sp, #0]
 800d6f8:	6022      	str	r2, [r4, #0]
 800d6fa:	f10d 031b 	add.w	r3, sp, #27
 800d6fe:	4628      	mov	r0, r5
 800d700:	f7ff fef4 	bl	800d4ec <__cvt>
 800d704:	9b04      	ldr	r3, [sp, #16]
 800d706:	9907      	ldr	r1, [sp, #28]
 800d708:	2b47      	cmp	r3, #71	; 0x47
 800d70a:	4680      	mov	r8, r0
 800d70c:	d108      	bne.n	800d720 <_printf_float+0x110>
 800d70e:	1cc8      	adds	r0, r1, #3
 800d710:	db02      	blt.n	800d718 <_printf_float+0x108>
 800d712:	6863      	ldr	r3, [r4, #4]
 800d714:	4299      	cmp	r1, r3
 800d716:	dd41      	ble.n	800d79c <_printf_float+0x18c>
 800d718:	f1a9 0902 	sub.w	r9, r9, #2
 800d71c:	fa5f f989 	uxtb.w	r9, r9
 800d720:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d724:	d820      	bhi.n	800d768 <_printf_float+0x158>
 800d726:	3901      	subs	r1, #1
 800d728:	464a      	mov	r2, r9
 800d72a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d72e:	9107      	str	r1, [sp, #28]
 800d730:	f7ff ff2e 	bl	800d590 <__exponent>
 800d734:	9a08      	ldr	r2, [sp, #32]
 800d736:	9004      	str	r0, [sp, #16]
 800d738:	1813      	adds	r3, r2, r0
 800d73a:	2a01      	cmp	r2, #1
 800d73c:	6123      	str	r3, [r4, #16]
 800d73e:	dc02      	bgt.n	800d746 <_printf_float+0x136>
 800d740:	6822      	ldr	r2, [r4, #0]
 800d742:	07d2      	lsls	r2, r2, #31
 800d744:	d501      	bpl.n	800d74a <_printf_float+0x13a>
 800d746:	3301      	adds	r3, #1
 800d748:	6123      	str	r3, [r4, #16]
 800d74a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d0a2      	beq.n	800d698 <_printf_float+0x88>
 800d752:	232d      	movs	r3, #45	; 0x2d
 800d754:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d758:	e79e      	b.n	800d698 <_printf_float+0x88>
 800d75a:	9904      	ldr	r1, [sp, #16]
 800d75c:	2947      	cmp	r1, #71	; 0x47
 800d75e:	d1c1      	bne.n	800d6e4 <_printf_float+0xd4>
 800d760:	2b00      	cmp	r3, #0
 800d762:	d1bf      	bne.n	800d6e4 <_printf_float+0xd4>
 800d764:	2301      	movs	r3, #1
 800d766:	e7bc      	b.n	800d6e2 <_printf_float+0xd2>
 800d768:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800d76c:	d118      	bne.n	800d7a0 <_printf_float+0x190>
 800d76e:	2900      	cmp	r1, #0
 800d770:	6863      	ldr	r3, [r4, #4]
 800d772:	dd0b      	ble.n	800d78c <_printf_float+0x17c>
 800d774:	6121      	str	r1, [r4, #16]
 800d776:	b913      	cbnz	r3, 800d77e <_printf_float+0x16e>
 800d778:	6822      	ldr	r2, [r4, #0]
 800d77a:	07d0      	lsls	r0, r2, #31
 800d77c:	d502      	bpl.n	800d784 <_printf_float+0x174>
 800d77e:	3301      	adds	r3, #1
 800d780:	440b      	add	r3, r1
 800d782:	6123      	str	r3, [r4, #16]
 800d784:	2300      	movs	r3, #0
 800d786:	65a1      	str	r1, [r4, #88]	; 0x58
 800d788:	9304      	str	r3, [sp, #16]
 800d78a:	e7de      	b.n	800d74a <_printf_float+0x13a>
 800d78c:	b913      	cbnz	r3, 800d794 <_printf_float+0x184>
 800d78e:	6822      	ldr	r2, [r4, #0]
 800d790:	07d2      	lsls	r2, r2, #31
 800d792:	d501      	bpl.n	800d798 <_printf_float+0x188>
 800d794:	3302      	adds	r3, #2
 800d796:	e7f4      	b.n	800d782 <_printf_float+0x172>
 800d798:	2301      	movs	r3, #1
 800d79a:	e7f2      	b.n	800d782 <_printf_float+0x172>
 800d79c:	f04f 0967 	mov.w	r9, #103	; 0x67
 800d7a0:	9b08      	ldr	r3, [sp, #32]
 800d7a2:	4299      	cmp	r1, r3
 800d7a4:	db05      	blt.n	800d7b2 <_printf_float+0x1a2>
 800d7a6:	6823      	ldr	r3, [r4, #0]
 800d7a8:	6121      	str	r1, [r4, #16]
 800d7aa:	07d8      	lsls	r0, r3, #31
 800d7ac:	d5ea      	bpl.n	800d784 <_printf_float+0x174>
 800d7ae:	1c4b      	adds	r3, r1, #1
 800d7b0:	e7e7      	b.n	800d782 <_printf_float+0x172>
 800d7b2:	2900      	cmp	r1, #0
 800d7b4:	bfd4      	ite	le
 800d7b6:	f1c1 0202 	rsble	r2, r1, #2
 800d7ba:	2201      	movgt	r2, #1
 800d7bc:	4413      	add	r3, r2
 800d7be:	e7e0      	b.n	800d782 <_printf_float+0x172>
 800d7c0:	6823      	ldr	r3, [r4, #0]
 800d7c2:	055a      	lsls	r2, r3, #21
 800d7c4:	d407      	bmi.n	800d7d6 <_printf_float+0x1c6>
 800d7c6:	6923      	ldr	r3, [r4, #16]
 800d7c8:	4642      	mov	r2, r8
 800d7ca:	4631      	mov	r1, r6
 800d7cc:	4628      	mov	r0, r5
 800d7ce:	47b8      	blx	r7
 800d7d0:	3001      	adds	r0, #1
 800d7d2:	d12a      	bne.n	800d82a <_printf_float+0x21a>
 800d7d4:	e76a      	b.n	800d6ac <_printf_float+0x9c>
 800d7d6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800d7da:	f240 80e2 	bls.w	800d9a2 <_printf_float+0x392>
 800d7de:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800d7e2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d7e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7ea:	d133      	bne.n	800d854 <_printf_float+0x244>
 800d7ec:	4a38      	ldr	r2, [pc, #224]	; (800d8d0 <_printf_float+0x2c0>)
 800d7ee:	2301      	movs	r3, #1
 800d7f0:	4631      	mov	r1, r6
 800d7f2:	4628      	mov	r0, r5
 800d7f4:	47b8      	blx	r7
 800d7f6:	3001      	adds	r0, #1
 800d7f8:	f43f af58 	beq.w	800d6ac <_printf_float+0x9c>
 800d7fc:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d800:	429a      	cmp	r2, r3
 800d802:	db02      	blt.n	800d80a <_printf_float+0x1fa>
 800d804:	6823      	ldr	r3, [r4, #0]
 800d806:	07d8      	lsls	r0, r3, #31
 800d808:	d50f      	bpl.n	800d82a <_printf_float+0x21a>
 800d80a:	4653      	mov	r3, sl
 800d80c:	465a      	mov	r2, fp
 800d80e:	4631      	mov	r1, r6
 800d810:	4628      	mov	r0, r5
 800d812:	47b8      	blx	r7
 800d814:	3001      	adds	r0, #1
 800d816:	f43f af49 	beq.w	800d6ac <_printf_float+0x9c>
 800d81a:	f04f 0800 	mov.w	r8, #0
 800d81e:	f104 091a 	add.w	r9, r4, #26
 800d822:	9b08      	ldr	r3, [sp, #32]
 800d824:	3b01      	subs	r3, #1
 800d826:	4543      	cmp	r3, r8
 800d828:	dc09      	bgt.n	800d83e <_printf_float+0x22e>
 800d82a:	6823      	ldr	r3, [r4, #0]
 800d82c:	079b      	lsls	r3, r3, #30
 800d82e:	f100 8108 	bmi.w	800da42 <_printf_float+0x432>
 800d832:	68e0      	ldr	r0, [r4, #12]
 800d834:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d836:	4298      	cmp	r0, r3
 800d838:	bfb8      	it	lt
 800d83a:	4618      	movlt	r0, r3
 800d83c:	e738      	b.n	800d6b0 <_printf_float+0xa0>
 800d83e:	2301      	movs	r3, #1
 800d840:	464a      	mov	r2, r9
 800d842:	4631      	mov	r1, r6
 800d844:	4628      	mov	r0, r5
 800d846:	47b8      	blx	r7
 800d848:	3001      	adds	r0, #1
 800d84a:	f43f af2f 	beq.w	800d6ac <_printf_float+0x9c>
 800d84e:	f108 0801 	add.w	r8, r8, #1
 800d852:	e7e6      	b.n	800d822 <_printf_float+0x212>
 800d854:	9b07      	ldr	r3, [sp, #28]
 800d856:	2b00      	cmp	r3, #0
 800d858:	dc3c      	bgt.n	800d8d4 <_printf_float+0x2c4>
 800d85a:	4a1d      	ldr	r2, [pc, #116]	; (800d8d0 <_printf_float+0x2c0>)
 800d85c:	2301      	movs	r3, #1
 800d85e:	4631      	mov	r1, r6
 800d860:	4628      	mov	r0, r5
 800d862:	47b8      	blx	r7
 800d864:	3001      	adds	r0, #1
 800d866:	f43f af21 	beq.w	800d6ac <_printf_float+0x9c>
 800d86a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d86e:	4313      	orrs	r3, r2
 800d870:	d102      	bne.n	800d878 <_printf_float+0x268>
 800d872:	6823      	ldr	r3, [r4, #0]
 800d874:	07d9      	lsls	r1, r3, #31
 800d876:	d5d8      	bpl.n	800d82a <_printf_float+0x21a>
 800d878:	4653      	mov	r3, sl
 800d87a:	465a      	mov	r2, fp
 800d87c:	4631      	mov	r1, r6
 800d87e:	4628      	mov	r0, r5
 800d880:	47b8      	blx	r7
 800d882:	3001      	adds	r0, #1
 800d884:	f43f af12 	beq.w	800d6ac <_printf_float+0x9c>
 800d888:	f04f 0900 	mov.w	r9, #0
 800d88c:	f104 0a1a 	add.w	sl, r4, #26
 800d890:	9b07      	ldr	r3, [sp, #28]
 800d892:	425b      	negs	r3, r3
 800d894:	454b      	cmp	r3, r9
 800d896:	dc01      	bgt.n	800d89c <_printf_float+0x28c>
 800d898:	9b08      	ldr	r3, [sp, #32]
 800d89a:	e795      	b.n	800d7c8 <_printf_float+0x1b8>
 800d89c:	2301      	movs	r3, #1
 800d89e:	4652      	mov	r2, sl
 800d8a0:	4631      	mov	r1, r6
 800d8a2:	4628      	mov	r0, r5
 800d8a4:	47b8      	blx	r7
 800d8a6:	3001      	adds	r0, #1
 800d8a8:	f43f af00 	beq.w	800d6ac <_printf_float+0x9c>
 800d8ac:	f109 0901 	add.w	r9, r9, #1
 800d8b0:	e7ee      	b.n	800d890 <_printf_float+0x280>
 800d8b2:	bf00      	nop
 800d8b4:	f3af 8000 	nop.w
 800d8b8:	ffffffff 	.word	0xffffffff
 800d8bc:	7fefffff 	.word	0x7fefffff
 800d8c0:	08014a84 	.word	0x08014a84
 800d8c4:	08014a88 	.word	0x08014a88
 800d8c8:	08014a90 	.word	0x08014a90
 800d8cc:	08014a8c 	.word	0x08014a8c
 800d8d0:	08014a94 	.word	0x08014a94
 800d8d4:	9a08      	ldr	r2, [sp, #32]
 800d8d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d8d8:	429a      	cmp	r2, r3
 800d8da:	bfa8      	it	ge
 800d8dc:	461a      	movge	r2, r3
 800d8de:	2a00      	cmp	r2, #0
 800d8e0:	4691      	mov	r9, r2
 800d8e2:	dc38      	bgt.n	800d956 <_printf_float+0x346>
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	9305      	str	r3, [sp, #20]
 800d8e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d8ec:	f104 021a 	add.w	r2, r4, #26
 800d8f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d8f2:	9905      	ldr	r1, [sp, #20]
 800d8f4:	9304      	str	r3, [sp, #16]
 800d8f6:	eba3 0309 	sub.w	r3, r3, r9
 800d8fa:	428b      	cmp	r3, r1
 800d8fc:	dc33      	bgt.n	800d966 <_printf_float+0x356>
 800d8fe:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d902:	429a      	cmp	r2, r3
 800d904:	db3c      	blt.n	800d980 <_printf_float+0x370>
 800d906:	6823      	ldr	r3, [r4, #0]
 800d908:	07da      	lsls	r2, r3, #31
 800d90a:	d439      	bmi.n	800d980 <_printf_float+0x370>
 800d90c:	9b08      	ldr	r3, [sp, #32]
 800d90e:	9a04      	ldr	r2, [sp, #16]
 800d910:	9907      	ldr	r1, [sp, #28]
 800d912:	1a9a      	subs	r2, r3, r2
 800d914:	eba3 0901 	sub.w	r9, r3, r1
 800d918:	4591      	cmp	r9, r2
 800d91a:	bfa8      	it	ge
 800d91c:	4691      	movge	r9, r2
 800d91e:	f1b9 0f00 	cmp.w	r9, #0
 800d922:	dc35      	bgt.n	800d990 <_printf_float+0x380>
 800d924:	f04f 0800 	mov.w	r8, #0
 800d928:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d92c:	f104 0a1a 	add.w	sl, r4, #26
 800d930:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800d934:	1a9b      	subs	r3, r3, r2
 800d936:	eba3 0309 	sub.w	r3, r3, r9
 800d93a:	4543      	cmp	r3, r8
 800d93c:	f77f af75 	ble.w	800d82a <_printf_float+0x21a>
 800d940:	2301      	movs	r3, #1
 800d942:	4652      	mov	r2, sl
 800d944:	4631      	mov	r1, r6
 800d946:	4628      	mov	r0, r5
 800d948:	47b8      	blx	r7
 800d94a:	3001      	adds	r0, #1
 800d94c:	f43f aeae 	beq.w	800d6ac <_printf_float+0x9c>
 800d950:	f108 0801 	add.w	r8, r8, #1
 800d954:	e7ec      	b.n	800d930 <_printf_float+0x320>
 800d956:	4613      	mov	r3, r2
 800d958:	4631      	mov	r1, r6
 800d95a:	4642      	mov	r2, r8
 800d95c:	4628      	mov	r0, r5
 800d95e:	47b8      	blx	r7
 800d960:	3001      	adds	r0, #1
 800d962:	d1bf      	bne.n	800d8e4 <_printf_float+0x2d4>
 800d964:	e6a2      	b.n	800d6ac <_printf_float+0x9c>
 800d966:	2301      	movs	r3, #1
 800d968:	4631      	mov	r1, r6
 800d96a:	4628      	mov	r0, r5
 800d96c:	9204      	str	r2, [sp, #16]
 800d96e:	47b8      	blx	r7
 800d970:	3001      	adds	r0, #1
 800d972:	f43f ae9b 	beq.w	800d6ac <_printf_float+0x9c>
 800d976:	9b05      	ldr	r3, [sp, #20]
 800d978:	9a04      	ldr	r2, [sp, #16]
 800d97a:	3301      	adds	r3, #1
 800d97c:	9305      	str	r3, [sp, #20]
 800d97e:	e7b7      	b.n	800d8f0 <_printf_float+0x2e0>
 800d980:	4653      	mov	r3, sl
 800d982:	465a      	mov	r2, fp
 800d984:	4631      	mov	r1, r6
 800d986:	4628      	mov	r0, r5
 800d988:	47b8      	blx	r7
 800d98a:	3001      	adds	r0, #1
 800d98c:	d1be      	bne.n	800d90c <_printf_float+0x2fc>
 800d98e:	e68d      	b.n	800d6ac <_printf_float+0x9c>
 800d990:	9a04      	ldr	r2, [sp, #16]
 800d992:	464b      	mov	r3, r9
 800d994:	4442      	add	r2, r8
 800d996:	4631      	mov	r1, r6
 800d998:	4628      	mov	r0, r5
 800d99a:	47b8      	blx	r7
 800d99c:	3001      	adds	r0, #1
 800d99e:	d1c1      	bne.n	800d924 <_printf_float+0x314>
 800d9a0:	e684      	b.n	800d6ac <_printf_float+0x9c>
 800d9a2:	9a08      	ldr	r2, [sp, #32]
 800d9a4:	2a01      	cmp	r2, #1
 800d9a6:	dc01      	bgt.n	800d9ac <_printf_float+0x39c>
 800d9a8:	07db      	lsls	r3, r3, #31
 800d9aa:	d537      	bpl.n	800da1c <_printf_float+0x40c>
 800d9ac:	2301      	movs	r3, #1
 800d9ae:	4642      	mov	r2, r8
 800d9b0:	4631      	mov	r1, r6
 800d9b2:	4628      	mov	r0, r5
 800d9b4:	47b8      	blx	r7
 800d9b6:	3001      	adds	r0, #1
 800d9b8:	f43f ae78 	beq.w	800d6ac <_printf_float+0x9c>
 800d9bc:	4653      	mov	r3, sl
 800d9be:	465a      	mov	r2, fp
 800d9c0:	4631      	mov	r1, r6
 800d9c2:	4628      	mov	r0, r5
 800d9c4:	47b8      	blx	r7
 800d9c6:	3001      	adds	r0, #1
 800d9c8:	f43f ae70 	beq.w	800d6ac <_printf_float+0x9c>
 800d9cc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800d9d0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d9d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9d8:	d01b      	beq.n	800da12 <_printf_float+0x402>
 800d9da:	9b08      	ldr	r3, [sp, #32]
 800d9dc:	f108 0201 	add.w	r2, r8, #1
 800d9e0:	3b01      	subs	r3, #1
 800d9e2:	4631      	mov	r1, r6
 800d9e4:	4628      	mov	r0, r5
 800d9e6:	47b8      	blx	r7
 800d9e8:	3001      	adds	r0, #1
 800d9ea:	d10e      	bne.n	800da0a <_printf_float+0x3fa>
 800d9ec:	e65e      	b.n	800d6ac <_printf_float+0x9c>
 800d9ee:	2301      	movs	r3, #1
 800d9f0:	464a      	mov	r2, r9
 800d9f2:	4631      	mov	r1, r6
 800d9f4:	4628      	mov	r0, r5
 800d9f6:	47b8      	blx	r7
 800d9f8:	3001      	adds	r0, #1
 800d9fa:	f43f ae57 	beq.w	800d6ac <_printf_float+0x9c>
 800d9fe:	f108 0801 	add.w	r8, r8, #1
 800da02:	9b08      	ldr	r3, [sp, #32]
 800da04:	3b01      	subs	r3, #1
 800da06:	4543      	cmp	r3, r8
 800da08:	dcf1      	bgt.n	800d9ee <_printf_float+0x3de>
 800da0a:	9b04      	ldr	r3, [sp, #16]
 800da0c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800da10:	e6db      	b.n	800d7ca <_printf_float+0x1ba>
 800da12:	f04f 0800 	mov.w	r8, #0
 800da16:	f104 091a 	add.w	r9, r4, #26
 800da1a:	e7f2      	b.n	800da02 <_printf_float+0x3f2>
 800da1c:	2301      	movs	r3, #1
 800da1e:	4642      	mov	r2, r8
 800da20:	e7df      	b.n	800d9e2 <_printf_float+0x3d2>
 800da22:	2301      	movs	r3, #1
 800da24:	464a      	mov	r2, r9
 800da26:	4631      	mov	r1, r6
 800da28:	4628      	mov	r0, r5
 800da2a:	47b8      	blx	r7
 800da2c:	3001      	adds	r0, #1
 800da2e:	f43f ae3d 	beq.w	800d6ac <_printf_float+0x9c>
 800da32:	f108 0801 	add.w	r8, r8, #1
 800da36:	68e3      	ldr	r3, [r4, #12]
 800da38:	9909      	ldr	r1, [sp, #36]	; 0x24
 800da3a:	1a5b      	subs	r3, r3, r1
 800da3c:	4543      	cmp	r3, r8
 800da3e:	dcf0      	bgt.n	800da22 <_printf_float+0x412>
 800da40:	e6f7      	b.n	800d832 <_printf_float+0x222>
 800da42:	f04f 0800 	mov.w	r8, #0
 800da46:	f104 0919 	add.w	r9, r4, #25
 800da4a:	e7f4      	b.n	800da36 <_printf_float+0x426>

0800da4c <_printf_common>:
 800da4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da50:	4616      	mov	r6, r2
 800da52:	4699      	mov	r9, r3
 800da54:	688a      	ldr	r2, [r1, #8]
 800da56:	690b      	ldr	r3, [r1, #16]
 800da58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800da5c:	4293      	cmp	r3, r2
 800da5e:	bfb8      	it	lt
 800da60:	4613      	movlt	r3, r2
 800da62:	6033      	str	r3, [r6, #0]
 800da64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800da68:	4607      	mov	r7, r0
 800da6a:	460c      	mov	r4, r1
 800da6c:	b10a      	cbz	r2, 800da72 <_printf_common+0x26>
 800da6e:	3301      	adds	r3, #1
 800da70:	6033      	str	r3, [r6, #0]
 800da72:	6823      	ldr	r3, [r4, #0]
 800da74:	0699      	lsls	r1, r3, #26
 800da76:	bf42      	ittt	mi
 800da78:	6833      	ldrmi	r3, [r6, #0]
 800da7a:	3302      	addmi	r3, #2
 800da7c:	6033      	strmi	r3, [r6, #0]
 800da7e:	6825      	ldr	r5, [r4, #0]
 800da80:	f015 0506 	ands.w	r5, r5, #6
 800da84:	d106      	bne.n	800da94 <_printf_common+0x48>
 800da86:	f104 0a19 	add.w	sl, r4, #25
 800da8a:	68e3      	ldr	r3, [r4, #12]
 800da8c:	6832      	ldr	r2, [r6, #0]
 800da8e:	1a9b      	subs	r3, r3, r2
 800da90:	42ab      	cmp	r3, r5
 800da92:	dc26      	bgt.n	800dae2 <_printf_common+0x96>
 800da94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800da98:	1e13      	subs	r3, r2, #0
 800da9a:	6822      	ldr	r2, [r4, #0]
 800da9c:	bf18      	it	ne
 800da9e:	2301      	movne	r3, #1
 800daa0:	0692      	lsls	r2, r2, #26
 800daa2:	d42b      	bmi.n	800dafc <_printf_common+0xb0>
 800daa4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800daa8:	4649      	mov	r1, r9
 800daaa:	4638      	mov	r0, r7
 800daac:	47c0      	blx	r8
 800daae:	3001      	adds	r0, #1
 800dab0:	d01e      	beq.n	800daf0 <_printf_common+0xa4>
 800dab2:	6823      	ldr	r3, [r4, #0]
 800dab4:	68e5      	ldr	r5, [r4, #12]
 800dab6:	6832      	ldr	r2, [r6, #0]
 800dab8:	f003 0306 	and.w	r3, r3, #6
 800dabc:	2b04      	cmp	r3, #4
 800dabe:	bf08      	it	eq
 800dac0:	1aad      	subeq	r5, r5, r2
 800dac2:	68a3      	ldr	r3, [r4, #8]
 800dac4:	6922      	ldr	r2, [r4, #16]
 800dac6:	bf0c      	ite	eq
 800dac8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dacc:	2500      	movne	r5, #0
 800dace:	4293      	cmp	r3, r2
 800dad0:	bfc4      	itt	gt
 800dad2:	1a9b      	subgt	r3, r3, r2
 800dad4:	18ed      	addgt	r5, r5, r3
 800dad6:	2600      	movs	r6, #0
 800dad8:	341a      	adds	r4, #26
 800dada:	42b5      	cmp	r5, r6
 800dadc:	d11a      	bne.n	800db14 <_printf_common+0xc8>
 800dade:	2000      	movs	r0, #0
 800dae0:	e008      	b.n	800daf4 <_printf_common+0xa8>
 800dae2:	2301      	movs	r3, #1
 800dae4:	4652      	mov	r2, sl
 800dae6:	4649      	mov	r1, r9
 800dae8:	4638      	mov	r0, r7
 800daea:	47c0      	blx	r8
 800daec:	3001      	adds	r0, #1
 800daee:	d103      	bne.n	800daf8 <_printf_common+0xac>
 800daf0:	f04f 30ff 	mov.w	r0, #4294967295
 800daf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800daf8:	3501      	adds	r5, #1
 800dafa:	e7c6      	b.n	800da8a <_printf_common+0x3e>
 800dafc:	18e1      	adds	r1, r4, r3
 800dafe:	1c5a      	adds	r2, r3, #1
 800db00:	2030      	movs	r0, #48	; 0x30
 800db02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800db06:	4422      	add	r2, r4
 800db08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800db0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800db10:	3302      	adds	r3, #2
 800db12:	e7c7      	b.n	800daa4 <_printf_common+0x58>
 800db14:	2301      	movs	r3, #1
 800db16:	4622      	mov	r2, r4
 800db18:	4649      	mov	r1, r9
 800db1a:	4638      	mov	r0, r7
 800db1c:	47c0      	blx	r8
 800db1e:	3001      	adds	r0, #1
 800db20:	d0e6      	beq.n	800daf0 <_printf_common+0xa4>
 800db22:	3601      	adds	r6, #1
 800db24:	e7d9      	b.n	800dada <_printf_common+0x8e>
	...

0800db28 <_printf_i>:
 800db28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800db2c:	7e0f      	ldrb	r7, [r1, #24]
 800db2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800db30:	2f78      	cmp	r7, #120	; 0x78
 800db32:	4691      	mov	r9, r2
 800db34:	4680      	mov	r8, r0
 800db36:	460c      	mov	r4, r1
 800db38:	469a      	mov	sl, r3
 800db3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800db3e:	d807      	bhi.n	800db50 <_printf_i+0x28>
 800db40:	2f62      	cmp	r7, #98	; 0x62
 800db42:	d80a      	bhi.n	800db5a <_printf_i+0x32>
 800db44:	2f00      	cmp	r7, #0
 800db46:	f000 80d8 	beq.w	800dcfa <_printf_i+0x1d2>
 800db4a:	2f58      	cmp	r7, #88	; 0x58
 800db4c:	f000 80a3 	beq.w	800dc96 <_printf_i+0x16e>
 800db50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800db54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800db58:	e03a      	b.n	800dbd0 <_printf_i+0xa8>
 800db5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800db5e:	2b15      	cmp	r3, #21
 800db60:	d8f6      	bhi.n	800db50 <_printf_i+0x28>
 800db62:	a101      	add	r1, pc, #4	; (adr r1, 800db68 <_printf_i+0x40>)
 800db64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800db68:	0800dbc1 	.word	0x0800dbc1
 800db6c:	0800dbd5 	.word	0x0800dbd5
 800db70:	0800db51 	.word	0x0800db51
 800db74:	0800db51 	.word	0x0800db51
 800db78:	0800db51 	.word	0x0800db51
 800db7c:	0800db51 	.word	0x0800db51
 800db80:	0800dbd5 	.word	0x0800dbd5
 800db84:	0800db51 	.word	0x0800db51
 800db88:	0800db51 	.word	0x0800db51
 800db8c:	0800db51 	.word	0x0800db51
 800db90:	0800db51 	.word	0x0800db51
 800db94:	0800dce1 	.word	0x0800dce1
 800db98:	0800dc05 	.word	0x0800dc05
 800db9c:	0800dcc3 	.word	0x0800dcc3
 800dba0:	0800db51 	.word	0x0800db51
 800dba4:	0800db51 	.word	0x0800db51
 800dba8:	0800dd03 	.word	0x0800dd03
 800dbac:	0800db51 	.word	0x0800db51
 800dbb0:	0800dc05 	.word	0x0800dc05
 800dbb4:	0800db51 	.word	0x0800db51
 800dbb8:	0800db51 	.word	0x0800db51
 800dbbc:	0800dccb 	.word	0x0800dccb
 800dbc0:	682b      	ldr	r3, [r5, #0]
 800dbc2:	1d1a      	adds	r2, r3, #4
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	602a      	str	r2, [r5, #0]
 800dbc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dbcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dbd0:	2301      	movs	r3, #1
 800dbd2:	e0a3      	b.n	800dd1c <_printf_i+0x1f4>
 800dbd4:	6820      	ldr	r0, [r4, #0]
 800dbd6:	6829      	ldr	r1, [r5, #0]
 800dbd8:	0606      	lsls	r6, r0, #24
 800dbda:	f101 0304 	add.w	r3, r1, #4
 800dbde:	d50a      	bpl.n	800dbf6 <_printf_i+0xce>
 800dbe0:	680e      	ldr	r6, [r1, #0]
 800dbe2:	602b      	str	r3, [r5, #0]
 800dbe4:	2e00      	cmp	r6, #0
 800dbe6:	da03      	bge.n	800dbf0 <_printf_i+0xc8>
 800dbe8:	232d      	movs	r3, #45	; 0x2d
 800dbea:	4276      	negs	r6, r6
 800dbec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dbf0:	485e      	ldr	r0, [pc, #376]	; (800dd6c <_printf_i+0x244>)
 800dbf2:	230a      	movs	r3, #10
 800dbf4:	e019      	b.n	800dc2a <_printf_i+0x102>
 800dbf6:	680e      	ldr	r6, [r1, #0]
 800dbf8:	602b      	str	r3, [r5, #0]
 800dbfa:	f010 0f40 	tst.w	r0, #64	; 0x40
 800dbfe:	bf18      	it	ne
 800dc00:	b236      	sxthne	r6, r6
 800dc02:	e7ef      	b.n	800dbe4 <_printf_i+0xbc>
 800dc04:	682b      	ldr	r3, [r5, #0]
 800dc06:	6820      	ldr	r0, [r4, #0]
 800dc08:	1d19      	adds	r1, r3, #4
 800dc0a:	6029      	str	r1, [r5, #0]
 800dc0c:	0601      	lsls	r1, r0, #24
 800dc0e:	d501      	bpl.n	800dc14 <_printf_i+0xec>
 800dc10:	681e      	ldr	r6, [r3, #0]
 800dc12:	e002      	b.n	800dc1a <_printf_i+0xf2>
 800dc14:	0646      	lsls	r6, r0, #25
 800dc16:	d5fb      	bpl.n	800dc10 <_printf_i+0xe8>
 800dc18:	881e      	ldrh	r6, [r3, #0]
 800dc1a:	4854      	ldr	r0, [pc, #336]	; (800dd6c <_printf_i+0x244>)
 800dc1c:	2f6f      	cmp	r7, #111	; 0x6f
 800dc1e:	bf0c      	ite	eq
 800dc20:	2308      	moveq	r3, #8
 800dc22:	230a      	movne	r3, #10
 800dc24:	2100      	movs	r1, #0
 800dc26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dc2a:	6865      	ldr	r5, [r4, #4]
 800dc2c:	60a5      	str	r5, [r4, #8]
 800dc2e:	2d00      	cmp	r5, #0
 800dc30:	bfa2      	ittt	ge
 800dc32:	6821      	ldrge	r1, [r4, #0]
 800dc34:	f021 0104 	bicge.w	r1, r1, #4
 800dc38:	6021      	strge	r1, [r4, #0]
 800dc3a:	b90e      	cbnz	r6, 800dc40 <_printf_i+0x118>
 800dc3c:	2d00      	cmp	r5, #0
 800dc3e:	d04d      	beq.n	800dcdc <_printf_i+0x1b4>
 800dc40:	4615      	mov	r5, r2
 800dc42:	fbb6 f1f3 	udiv	r1, r6, r3
 800dc46:	fb03 6711 	mls	r7, r3, r1, r6
 800dc4a:	5dc7      	ldrb	r7, [r0, r7]
 800dc4c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800dc50:	4637      	mov	r7, r6
 800dc52:	42bb      	cmp	r3, r7
 800dc54:	460e      	mov	r6, r1
 800dc56:	d9f4      	bls.n	800dc42 <_printf_i+0x11a>
 800dc58:	2b08      	cmp	r3, #8
 800dc5a:	d10b      	bne.n	800dc74 <_printf_i+0x14c>
 800dc5c:	6823      	ldr	r3, [r4, #0]
 800dc5e:	07de      	lsls	r6, r3, #31
 800dc60:	d508      	bpl.n	800dc74 <_printf_i+0x14c>
 800dc62:	6923      	ldr	r3, [r4, #16]
 800dc64:	6861      	ldr	r1, [r4, #4]
 800dc66:	4299      	cmp	r1, r3
 800dc68:	bfde      	ittt	le
 800dc6a:	2330      	movle	r3, #48	; 0x30
 800dc6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dc70:	f105 35ff 	addle.w	r5, r5, #4294967295
 800dc74:	1b52      	subs	r2, r2, r5
 800dc76:	6122      	str	r2, [r4, #16]
 800dc78:	f8cd a000 	str.w	sl, [sp]
 800dc7c:	464b      	mov	r3, r9
 800dc7e:	aa03      	add	r2, sp, #12
 800dc80:	4621      	mov	r1, r4
 800dc82:	4640      	mov	r0, r8
 800dc84:	f7ff fee2 	bl	800da4c <_printf_common>
 800dc88:	3001      	adds	r0, #1
 800dc8a:	d14c      	bne.n	800dd26 <_printf_i+0x1fe>
 800dc8c:	f04f 30ff 	mov.w	r0, #4294967295
 800dc90:	b004      	add	sp, #16
 800dc92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc96:	4835      	ldr	r0, [pc, #212]	; (800dd6c <_printf_i+0x244>)
 800dc98:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800dc9c:	6829      	ldr	r1, [r5, #0]
 800dc9e:	6823      	ldr	r3, [r4, #0]
 800dca0:	f851 6b04 	ldr.w	r6, [r1], #4
 800dca4:	6029      	str	r1, [r5, #0]
 800dca6:	061d      	lsls	r5, r3, #24
 800dca8:	d514      	bpl.n	800dcd4 <_printf_i+0x1ac>
 800dcaa:	07df      	lsls	r7, r3, #31
 800dcac:	bf44      	itt	mi
 800dcae:	f043 0320 	orrmi.w	r3, r3, #32
 800dcb2:	6023      	strmi	r3, [r4, #0]
 800dcb4:	b91e      	cbnz	r6, 800dcbe <_printf_i+0x196>
 800dcb6:	6823      	ldr	r3, [r4, #0]
 800dcb8:	f023 0320 	bic.w	r3, r3, #32
 800dcbc:	6023      	str	r3, [r4, #0]
 800dcbe:	2310      	movs	r3, #16
 800dcc0:	e7b0      	b.n	800dc24 <_printf_i+0xfc>
 800dcc2:	6823      	ldr	r3, [r4, #0]
 800dcc4:	f043 0320 	orr.w	r3, r3, #32
 800dcc8:	6023      	str	r3, [r4, #0]
 800dcca:	2378      	movs	r3, #120	; 0x78
 800dccc:	4828      	ldr	r0, [pc, #160]	; (800dd70 <_printf_i+0x248>)
 800dcce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dcd2:	e7e3      	b.n	800dc9c <_printf_i+0x174>
 800dcd4:	0659      	lsls	r1, r3, #25
 800dcd6:	bf48      	it	mi
 800dcd8:	b2b6      	uxthmi	r6, r6
 800dcda:	e7e6      	b.n	800dcaa <_printf_i+0x182>
 800dcdc:	4615      	mov	r5, r2
 800dcde:	e7bb      	b.n	800dc58 <_printf_i+0x130>
 800dce0:	682b      	ldr	r3, [r5, #0]
 800dce2:	6826      	ldr	r6, [r4, #0]
 800dce4:	6961      	ldr	r1, [r4, #20]
 800dce6:	1d18      	adds	r0, r3, #4
 800dce8:	6028      	str	r0, [r5, #0]
 800dcea:	0635      	lsls	r5, r6, #24
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	d501      	bpl.n	800dcf4 <_printf_i+0x1cc>
 800dcf0:	6019      	str	r1, [r3, #0]
 800dcf2:	e002      	b.n	800dcfa <_printf_i+0x1d2>
 800dcf4:	0670      	lsls	r0, r6, #25
 800dcf6:	d5fb      	bpl.n	800dcf0 <_printf_i+0x1c8>
 800dcf8:	8019      	strh	r1, [r3, #0]
 800dcfa:	2300      	movs	r3, #0
 800dcfc:	6123      	str	r3, [r4, #16]
 800dcfe:	4615      	mov	r5, r2
 800dd00:	e7ba      	b.n	800dc78 <_printf_i+0x150>
 800dd02:	682b      	ldr	r3, [r5, #0]
 800dd04:	1d1a      	adds	r2, r3, #4
 800dd06:	602a      	str	r2, [r5, #0]
 800dd08:	681d      	ldr	r5, [r3, #0]
 800dd0a:	6862      	ldr	r2, [r4, #4]
 800dd0c:	2100      	movs	r1, #0
 800dd0e:	4628      	mov	r0, r5
 800dd10:	f7f2 fb4e 	bl	80003b0 <memchr>
 800dd14:	b108      	cbz	r0, 800dd1a <_printf_i+0x1f2>
 800dd16:	1b40      	subs	r0, r0, r5
 800dd18:	6060      	str	r0, [r4, #4]
 800dd1a:	6863      	ldr	r3, [r4, #4]
 800dd1c:	6123      	str	r3, [r4, #16]
 800dd1e:	2300      	movs	r3, #0
 800dd20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dd24:	e7a8      	b.n	800dc78 <_printf_i+0x150>
 800dd26:	6923      	ldr	r3, [r4, #16]
 800dd28:	462a      	mov	r2, r5
 800dd2a:	4649      	mov	r1, r9
 800dd2c:	4640      	mov	r0, r8
 800dd2e:	47d0      	blx	sl
 800dd30:	3001      	adds	r0, #1
 800dd32:	d0ab      	beq.n	800dc8c <_printf_i+0x164>
 800dd34:	6823      	ldr	r3, [r4, #0]
 800dd36:	079b      	lsls	r3, r3, #30
 800dd38:	d413      	bmi.n	800dd62 <_printf_i+0x23a>
 800dd3a:	68e0      	ldr	r0, [r4, #12]
 800dd3c:	9b03      	ldr	r3, [sp, #12]
 800dd3e:	4298      	cmp	r0, r3
 800dd40:	bfb8      	it	lt
 800dd42:	4618      	movlt	r0, r3
 800dd44:	e7a4      	b.n	800dc90 <_printf_i+0x168>
 800dd46:	2301      	movs	r3, #1
 800dd48:	4632      	mov	r2, r6
 800dd4a:	4649      	mov	r1, r9
 800dd4c:	4640      	mov	r0, r8
 800dd4e:	47d0      	blx	sl
 800dd50:	3001      	adds	r0, #1
 800dd52:	d09b      	beq.n	800dc8c <_printf_i+0x164>
 800dd54:	3501      	adds	r5, #1
 800dd56:	68e3      	ldr	r3, [r4, #12]
 800dd58:	9903      	ldr	r1, [sp, #12]
 800dd5a:	1a5b      	subs	r3, r3, r1
 800dd5c:	42ab      	cmp	r3, r5
 800dd5e:	dcf2      	bgt.n	800dd46 <_printf_i+0x21e>
 800dd60:	e7eb      	b.n	800dd3a <_printf_i+0x212>
 800dd62:	2500      	movs	r5, #0
 800dd64:	f104 0619 	add.w	r6, r4, #25
 800dd68:	e7f5      	b.n	800dd56 <_printf_i+0x22e>
 800dd6a:	bf00      	nop
 800dd6c:	08014a96 	.word	0x08014a96
 800dd70:	08014aa7 	.word	0x08014aa7

0800dd74 <_scanf_float>:
 800dd74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd78:	b087      	sub	sp, #28
 800dd7a:	4617      	mov	r7, r2
 800dd7c:	9303      	str	r3, [sp, #12]
 800dd7e:	688b      	ldr	r3, [r1, #8]
 800dd80:	1e5a      	subs	r2, r3, #1
 800dd82:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800dd86:	bf83      	ittte	hi
 800dd88:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800dd8c:	195b      	addhi	r3, r3, r5
 800dd8e:	9302      	strhi	r3, [sp, #8]
 800dd90:	2300      	movls	r3, #0
 800dd92:	bf86      	itte	hi
 800dd94:	f240 135d 	movwhi	r3, #349	; 0x15d
 800dd98:	608b      	strhi	r3, [r1, #8]
 800dd9a:	9302      	strls	r3, [sp, #8]
 800dd9c:	680b      	ldr	r3, [r1, #0]
 800dd9e:	468b      	mov	fp, r1
 800dda0:	2500      	movs	r5, #0
 800dda2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800dda6:	f84b 3b1c 	str.w	r3, [fp], #28
 800ddaa:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ddae:	4680      	mov	r8, r0
 800ddb0:	460c      	mov	r4, r1
 800ddb2:	465e      	mov	r6, fp
 800ddb4:	46aa      	mov	sl, r5
 800ddb6:	46a9      	mov	r9, r5
 800ddb8:	9501      	str	r5, [sp, #4]
 800ddba:	68a2      	ldr	r2, [r4, #8]
 800ddbc:	b152      	cbz	r2, 800ddd4 <_scanf_float+0x60>
 800ddbe:	683b      	ldr	r3, [r7, #0]
 800ddc0:	781b      	ldrb	r3, [r3, #0]
 800ddc2:	2b4e      	cmp	r3, #78	; 0x4e
 800ddc4:	d864      	bhi.n	800de90 <_scanf_float+0x11c>
 800ddc6:	2b40      	cmp	r3, #64	; 0x40
 800ddc8:	d83c      	bhi.n	800de44 <_scanf_float+0xd0>
 800ddca:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800ddce:	b2c8      	uxtb	r0, r1
 800ddd0:	280e      	cmp	r0, #14
 800ddd2:	d93a      	bls.n	800de4a <_scanf_float+0xd6>
 800ddd4:	f1b9 0f00 	cmp.w	r9, #0
 800ddd8:	d003      	beq.n	800dde2 <_scanf_float+0x6e>
 800ddda:	6823      	ldr	r3, [r4, #0]
 800dddc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dde0:	6023      	str	r3, [r4, #0]
 800dde2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dde6:	f1ba 0f01 	cmp.w	sl, #1
 800ddea:	f200 8113 	bhi.w	800e014 <_scanf_float+0x2a0>
 800ddee:	455e      	cmp	r6, fp
 800ddf0:	f200 8105 	bhi.w	800dffe <_scanf_float+0x28a>
 800ddf4:	2501      	movs	r5, #1
 800ddf6:	4628      	mov	r0, r5
 800ddf8:	b007      	add	sp, #28
 800ddfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddfe:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800de02:	2a0d      	cmp	r2, #13
 800de04:	d8e6      	bhi.n	800ddd4 <_scanf_float+0x60>
 800de06:	a101      	add	r1, pc, #4	; (adr r1, 800de0c <_scanf_float+0x98>)
 800de08:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800de0c:	0800df4b 	.word	0x0800df4b
 800de10:	0800ddd5 	.word	0x0800ddd5
 800de14:	0800ddd5 	.word	0x0800ddd5
 800de18:	0800ddd5 	.word	0x0800ddd5
 800de1c:	0800dfab 	.word	0x0800dfab
 800de20:	0800df83 	.word	0x0800df83
 800de24:	0800ddd5 	.word	0x0800ddd5
 800de28:	0800ddd5 	.word	0x0800ddd5
 800de2c:	0800df59 	.word	0x0800df59
 800de30:	0800ddd5 	.word	0x0800ddd5
 800de34:	0800ddd5 	.word	0x0800ddd5
 800de38:	0800ddd5 	.word	0x0800ddd5
 800de3c:	0800ddd5 	.word	0x0800ddd5
 800de40:	0800df11 	.word	0x0800df11
 800de44:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800de48:	e7db      	b.n	800de02 <_scanf_float+0x8e>
 800de4a:	290e      	cmp	r1, #14
 800de4c:	d8c2      	bhi.n	800ddd4 <_scanf_float+0x60>
 800de4e:	a001      	add	r0, pc, #4	; (adr r0, 800de54 <_scanf_float+0xe0>)
 800de50:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800de54:	0800df03 	.word	0x0800df03
 800de58:	0800ddd5 	.word	0x0800ddd5
 800de5c:	0800df03 	.word	0x0800df03
 800de60:	0800df97 	.word	0x0800df97
 800de64:	0800ddd5 	.word	0x0800ddd5
 800de68:	0800deb1 	.word	0x0800deb1
 800de6c:	0800deed 	.word	0x0800deed
 800de70:	0800deed 	.word	0x0800deed
 800de74:	0800deed 	.word	0x0800deed
 800de78:	0800deed 	.word	0x0800deed
 800de7c:	0800deed 	.word	0x0800deed
 800de80:	0800deed 	.word	0x0800deed
 800de84:	0800deed 	.word	0x0800deed
 800de88:	0800deed 	.word	0x0800deed
 800de8c:	0800deed 	.word	0x0800deed
 800de90:	2b6e      	cmp	r3, #110	; 0x6e
 800de92:	d809      	bhi.n	800dea8 <_scanf_float+0x134>
 800de94:	2b60      	cmp	r3, #96	; 0x60
 800de96:	d8b2      	bhi.n	800ddfe <_scanf_float+0x8a>
 800de98:	2b54      	cmp	r3, #84	; 0x54
 800de9a:	d077      	beq.n	800df8c <_scanf_float+0x218>
 800de9c:	2b59      	cmp	r3, #89	; 0x59
 800de9e:	d199      	bne.n	800ddd4 <_scanf_float+0x60>
 800dea0:	2d07      	cmp	r5, #7
 800dea2:	d197      	bne.n	800ddd4 <_scanf_float+0x60>
 800dea4:	2508      	movs	r5, #8
 800dea6:	e029      	b.n	800defc <_scanf_float+0x188>
 800dea8:	2b74      	cmp	r3, #116	; 0x74
 800deaa:	d06f      	beq.n	800df8c <_scanf_float+0x218>
 800deac:	2b79      	cmp	r3, #121	; 0x79
 800deae:	e7f6      	b.n	800de9e <_scanf_float+0x12a>
 800deb0:	6821      	ldr	r1, [r4, #0]
 800deb2:	05c8      	lsls	r0, r1, #23
 800deb4:	d51a      	bpl.n	800deec <_scanf_float+0x178>
 800deb6:	9b02      	ldr	r3, [sp, #8]
 800deb8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800debc:	6021      	str	r1, [r4, #0]
 800debe:	f109 0901 	add.w	r9, r9, #1
 800dec2:	b11b      	cbz	r3, 800decc <_scanf_float+0x158>
 800dec4:	3b01      	subs	r3, #1
 800dec6:	3201      	adds	r2, #1
 800dec8:	9302      	str	r3, [sp, #8]
 800deca:	60a2      	str	r2, [r4, #8]
 800decc:	68a3      	ldr	r3, [r4, #8]
 800dece:	3b01      	subs	r3, #1
 800ded0:	60a3      	str	r3, [r4, #8]
 800ded2:	6923      	ldr	r3, [r4, #16]
 800ded4:	3301      	adds	r3, #1
 800ded6:	6123      	str	r3, [r4, #16]
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	3b01      	subs	r3, #1
 800dedc:	2b00      	cmp	r3, #0
 800dede:	607b      	str	r3, [r7, #4]
 800dee0:	f340 8084 	ble.w	800dfec <_scanf_float+0x278>
 800dee4:	683b      	ldr	r3, [r7, #0]
 800dee6:	3301      	adds	r3, #1
 800dee8:	603b      	str	r3, [r7, #0]
 800deea:	e766      	b.n	800ddba <_scanf_float+0x46>
 800deec:	eb1a 0f05 	cmn.w	sl, r5
 800def0:	f47f af70 	bne.w	800ddd4 <_scanf_float+0x60>
 800def4:	6822      	ldr	r2, [r4, #0]
 800def6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800defa:	6022      	str	r2, [r4, #0]
 800defc:	f806 3b01 	strb.w	r3, [r6], #1
 800df00:	e7e4      	b.n	800decc <_scanf_float+0x158>
 800df02:	6822      	ldr	r2, [r4, #0]
 800df04:	0610      	lsls	r0, r2, #24
 800df06:	f57f af65 	bpl.w	800ddd4 <_scanf_float+0x60>
 800df0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800df0e:	e7f4      	b.n	800defa <_scanf_float+0x186>
 800df10:	f1ba 0f00 	cmp.w	sl, #0
 800df14:	d10e      	bne.n	800df34 <_scanf_float+0x1c0>
 800df16:	f1b9 0f00 	cmp.w	r9, #0
 800df1a:	d10e      	bne.n	800df3a <_scanf_float+0x1c6>
 800df1c:	6822      	ldr	r2, [r4, #0]
 800df1e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800df22:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800df26:	d108      	bne.n	800df3a <_scanf_float+0x1c6>
 800df28:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800df2c:	6022      	str	r2, [r4, #0]
 800df2e:	f04f 0a01 	mov.w	sl, #1
 800df32:	e7e3      	b.n	800defc <_scanf_float+0x188>
 800df34:	f1ba 0f02 	cmp.w	sl, #2
 800df38:	d055      	beq.n	800dfe6 <_scanf_float+0x272>
 800df3a:	2d01      	cmp	r5, #1
 800df3c:	d002      	beq.n	800df44 <_scanf_float+0x1d0>
 800df3e:	2d04      	cmp	r5, #4
 800df40:	f47f af48 	bne.w	800ddd4 <_scanf_float+0x60>
 800df44:	3501      	adds	r5, #1
 800df46:	b2ed      	uxtb	r5, r5
 800df48:	e7d8      	b.n	800defc <_scanf_float+0x188>
 800df4a:	f1ba 0f01 	cmp.w	sl, #1
 800df4e:	f47f af41 	bne.w	800ddd4 <_scanf_float+0x60>
 800df52:	f04f 0a02 	mov.w	sl, #2
 800df56:	e7d1      	b.n	800defc <_scanf_float+0x188>
 800df58:	b97d      	cbnz	r5, 800df7a <_scanf_float+0x206>
 800df5a:	f1b9 0f00 	cmp.w	r9, #0
 800df5e:	f47f af3c 	bne.w	800ddda <_scanf_float+0x66>
 800df62:	6822      	ldr	r2, [r4, #0]
 800df64:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800df68:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800df6c:	f47f af39 	bne.w	800dde2 <_scanf_float+0x6e>
 800df70:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800df74:	6022      	str	r2, [r4, #0]
 800df76:	2501      	movs	r5, #1
 800df78:	e7c0      	b.n	800defc <_scanf_float+0x188>
 800df7a:	2d03      	cmp	r5, #3
 800df7c:	d0e2      	beq.n	800df44 <_scanf_float+0x1d0>
 800df7e:	2d05      	cmp	r5, #5
 800df80:	e7de      	b.n	800df40 <_scanf_float+0x1cc>
 800df82:	2d02      	cmp	r5, #2
 800df84:	f47f af26 	bne.w	800ddd4 <_scanf_float+0x60>
 800df88:	2503      	movs	r5, #3
 800df8a:	e7b7      	b.n	800defc <_scanf_float+0x188>
 800df8c:	2d06      	cmp	r5, #6
 800df8e:	f47f af21 	bne.w	800ddd4 <_scanf_float+0x60>
 800df92:	2507      	movs	r5, #7
 800df94:	e7b2      	b.n	800defc <_scanf_float+0x188>
 800df96:	6822      	ldr	r2, [r4, #0]
 800df98:	0591      	lsls	r1, r2, #22
 800df9a:	f57f af1b 	bpl.w	800ddd4 <_scanf_float+0x60>
 800df9e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800dfa2:	6022      	str	r2, [r4, #0]
 800dfa4:	f8cd 9004 	str.w	r9, [sp, #4]
 800dfa8:	e7a8      	b.n	800defc <_scanf_float+0x188>
 800dfaa:	6822      	ldr	r2, [r4, #0]
 800dfac:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800dfb0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800dfb4:	d006      	beq.n	800dfc4 <_scanf_float+0x250>
 800dfb6:	0550      	lsls	r0, r2, #21
 800dfb8:	f57f af0c 	bpl.w	800ddd4 <_scanf_float+0x60>
 800dfbc:	f1b9 0f00 	cmp.w	r9, #0
 800dfc0:	f43f af0f 	beq.w	800dde2 <_scanf_float+0x6e>
 800dfc4:	0591      	lsls	r1, r2, #22
 800dfc6:	bf58      	it	pl
 800dfc8:	9901      	ldrpl	r1, [sp, #4]
 800dfca:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800dfce:	bf58      	it	pl
 800dfd0:	eba9 0101 	subpl.w	r1, r9, r1
 800dfd4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800dfd8:	bf58      	it	pl
 800dfda:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800dfde:	6022      	str	r2, [r4, #0]
 800dfe0:	f04f 0900 	mov.w	r9, #0
 800dfe4:	e78a      	b.n	800defc <_scanf_float+0x188>
 800dfe6:	f04f 0a03 	mov.w	sl, #3
 800dfea:	e787      	b.n	800defc <_scanf_float+0x188>
 800dfec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800dff0:	4639      	mov	r1, r7
 800dff2:	4640      	mov	r0, r8
 800dff4:	4798      	blx	r3
 800dff6:	2800      	cmp	r0, #0
 800dff8:	f43f aedf 	beq.w	800ddba <_scanf_float+0x46>
 800dffc:	e6ea      	b.n	800ddd4 <_scanf_float+0x60>
 800dffe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e002:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e006:	463a      	mov	r2, r7
 800e008:	4640      	mov	r0, r8
 800e00a:	4798      	blx	r3
 800e00c:	6923      	ldr	r3, [r4, #16]
 800e00e:	3b01      	subs	r3, #1
 800e010:	6123      	str	r3, [r4, #16]
 800e012:	e6ec      	b.n	800ddee <_scanf_float+0x7a>
 800e014:	1e6b      	subs	r3, r5, #1
 800e016:	2b06      	cmp	r3, #6
 800e018:	d825      	bhi.n	800e066 <_scanf_float+0x2f2>
 800e01a:	2d02      	cmp	r5, #2
 800e01c:	d836      	bhi.n	800e08c <_scanf_float+0x318>
 800e01e:	455e      	cmp	r6, fp
 800e020:	f67f aee8 	bls.w	800ddf4 <_scanf_float+0x80>
 800e024:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e028:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e02c:	463a      	mov	r2, r7
 800e02e:	4640      	mov	r0, r8
 800e030:	4798      	blx	r3
 800e032:	6923      	ldr	r3, [r4, #16]
 800e034:	3b01      	subs	r3, #1
 800e036:	6123      	str	r3, [r4, #16]
 800e038:	e7f1      	b.n	800e01e <_scanf_float+0x2aa>
 800e03a:	9802      	ldr	r0, [sp, #8]
 800e03c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e040:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800e044:	9002      	str	r0, [sp, #8]
 800e046:	463a      	mov	r2, r7
 800e048:	4640      	mov	r0, r8
 800e04a:	4798      	blx	r3
 800e04c:	6923      	ldr	r3, [r4, #16]
 800e04e:	3b01      	subs	r3, #1
 800e050:	6123      	str	r3, [r4, #16]
 800e052:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e056:	fa5f fa8a 	uxtb.w	sl, sl
 800e05a:	f1ba 0f02 	cmp.w	sl, #2
 800e05e:	d1ec      	bne.n	800e03a <_scanf_float+0x2c6>
 800e060:	3d03      	subs	r5, #3
 800e062:	b2ed      	uxtb	r5, r5
 800e064:	1b76      	subs	r6, r6, r5
 800e066:	6823      	ldr	r3, [r4, #0]
 800e068:	05da      	lsls	r2, r3, #23
 800e06a:	d52f      	bpl.n	800e0cc <_scanf_float+0x358>
 800e06c:	055b      	lsls	r3, r3, #21
 800e06e:	d510      	bpl.n	800e092 <_scanf_float+0x31e>
 800e070:	455e      	cmp	r6, fp
 800e072:	f67f aebf 	bls.w	800ddf4 <_scanf_float+0x80>
 800e076:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e07a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e07e:	463a      	mov	r2, r7
 800e080:	4640      	mov	r0, r8
 800e082:	4798      	blx	r3
 800e084:	6923      	ldr	r3, [r4, #16]
 800e086:	3b01      	subs	r3, #1
 800e088:	6123      	str	r3, [r4, #16]
 800e08a:	e7f1      	b.n	800e070 <_scanf_float+0x2fc>
 800e08c:	46aa      	mov	sl, r5
 800e08e:	9602      	str	r6, [sp, #8]
 800e090:	e7df      	b.n	800e052 <_scanf_float+0x2de>
 800e092:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e096:	6923      	ldr	r3, [r4, #16]
 800e098:	2965      	cmp	r1, #101	; 0x65
 800e09a:	f103 33ff 	add.w	r3, r3, #4294967295
 800e09e:	f106 35ff 	add.w	r5, r6, #4294967295
 800e0a2:	6123      	str	r3, [r4, #16]
 800e0a4:	d00c      	beq.n	800e0c0 <_scanf_float+0x34c>
 800e0a6:	2945      	cmp	r1, #69	; 0x45
 800e0a8:	d00a      	beq.n	800e0c0 <_scanf_float+0x34c>
 800e0aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e0ae:	463a      	mov	r2, r7
 800e0b0:	4640      	mov	r0, r8
 800e0b2:	4798      	blx	r3
 800e0b4:	6923      	ldr	r3, [r4, #16]
 800e0b6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e0ba:	3b01      	subs	r3, #1
 800e0bc:	1eb5      	subs	r5, r6, #2
 800e0be:	6123      	str	r3, [r4, #16]
 800e0c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e0c4:	463a      	mov	r2, r7
 800e0c6:	4640      	mov	r0, r8
 800e0c8:	4798      	blx	r3
 800e0ca:	462e      	mov	r6, r5
 800e0cc:	6825      	ldr	r5, [r4, #0]
 800e0ce:	f015 0510 	ands.w	r5, r5, #16
 800e0d2:	d14e      	bne.n	800e172 <_scanf_float+0x3fe>
 800e0d4:	7035      	strb	r5, [r6, #0]
 800e0d6:	6823      	ldr	r3, [r4, #0]
 800e0d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e0dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e0e0:	d119      	bne.n	800e116 <_scanf_float+0x3a2>
 800e0e2:	9b01      	ldr	r3, [sp, #4]
 800e0e4:	454b      	cmp	r3, r9
 800e0e6:	eba3 0209 	sub.w	r2, r3, r9
 800e0ea:	d121      	bne.n	800e130 <_scanf_float+0x3bc>
 800e0ec:	2200      	movs	r2, #0
 800e0ee:	4659      	mov	r1, fp
 800e0f0:	4640      	mov	r0, r8
 800e0f2:	f000 fe3b 	bl	800ed6c <_strtod_r>
 800e0f6:	6822      	ldr	r2, [r4, #0]
 800e0f8:	9b03      	ldr	r3, [sp, #12]
 800e0fa:	f012 0f02 	tst.w	r2, #2
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	d021      	beq.n	800e146 <_scanf_float+0x3d2>
 800e102:	9903      	ldr	r1, [sp, #12]
 800e104:	1d1a      	adds	r2, r3, #4
 800e106:	600a      	str	r2, [r1, #0]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	ed83 0b00 	vstr	d0, [r3]
 800e10e:	68e3      	ldr	r3, [r4, #12]
 800e110:	3301      	adds	r3, #1
 800e112:	60e3      	str	r3, [r4, #12]
 800e114:	e66f      	b.n	800ddf6 <_scanf_float+0x82>
 800e116:	9b04      	ldr	r3, [sp, #16]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d0e7      	beq.n	800e0ec <_scanf_float+0x378>
 800e11c:	9905      	ldr	r1, [sp, #20]
 800e11e:	230a      	movs	r3, #10
 800e120:	462a      	mov	r2, r5
 800e122:	3101      	adds	r1, #1
 800e124:	4640      	mov	r0, r8
 800e126:	f000 fea9 	bl	800ee7c <_strtol_r>
 800e12a:	9b04      	ldr	r3, [sp, #16]
 800e12c:	9e05      	ldr	r6, [sp, #20]
 800e12e:	1ac2      	subs	r2, r0, r3
 800e130:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800e134:	429e      	cmp	r6, r3
 800e136:	bf28      	it	cs
 800e138:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800e13c:	490e      	ldr	r1, [pc, #56]	; (800e178 <_scanf_float+0x404>)
 800e13e:	4630      	mov	r0, r6
 800e140:	f000 f824 	bl	800e18c <siprintf>
 800e144:	e7d2      	b.n	800e0ec <_scanf_float+0x378>
 800e146:	9903      	ldr	r1, [sp, #12]
 800e148:	f012 0f04 	tst.w	r2, #4
 800e14c:	f103 0204 	add.w	r2, r3, #4
 800e150:	600a      	str	r2, [r1, #0]
 800e152:	d1d9      	bne.n	800e108 <_scanf_float+0x394>
 800e154:	eeb4 0b40 	vcmp.f64	d0, d0
 800e158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e15c:	681e      	ldr	r6, [r3, #0]
 800e15e:	d705      	bvc.n	800e16c <_scanf_float+0x3f8>
 800e160:	4806      	ldr	r0, [pc, #24]	; (800e17c <_scanf_float+0x408>)
 800e162:	f000 f80d 	bl	800e180 <nanf>
 800e166:	ed86 0a00 	vstr	s0, [r6]
 800e16a:	e7d0      	b.n	800e10e <_scanf_float+0x39a>
 800e16c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800e170:	e7f9      	b.n	800e166 <_scanf_float+0x3f2>
 800e172:	2500      	movs	r5, #0
 800e174:	e63f      	b.n	800ddf6 <_scanf_float+0x82>
 800e176:	bf00      	nop
 800e178:	08014ab8 	.word	0x08014ab8
 800e17c:	08014ec0 	.word	0x08014ec0

0800e180 <nanf>:
 800e180:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e188 <nanf+0x8>
 800e184:	4770      	bx	lr
 800e186:	bf00      	nop
 800e188:	7fc00000 	.word	0x7fc00000

0800e18c <siprintf>:
 800e18c:	b40e      	push	{r1, r2, r3}
 800e18e:	b500      	push	{lr}
 800e190:	b09c      	sub	sp, #112	; 0x70
 800e192:	ab1d      	add	r3, sp, #116	; 0x74
 800e194:	9002      	str	r0, [sp, #8]
 800e196:	9006      	str	r0, [sp, #24]
 800e198:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e19c:	4809      	ldr	r0, [pc, #36]	; (800e1c4 <siprintf+0x38>)
 800e19e:	9107      	str	r1, [sp, #28]
 800e1a0:	9104      	str	r1, [sp, #16]
 800e1a2:	4909      	ldr	r1, [pc, #36]	; (800e1c8 <siprintf+0x3c>)
 800e1a4:	f853 2b04 	ldr.w	r2, [r3], #4
 800e1a8:	9105      	str	r1, [sp, #20]
 800e1aa:	6800      	ldr	r0, [r0, #0]
 800e1ac:	9301      	str	r3, [sp, #4]
 800e1ae:	a902      	add	r1, sp, #8
 800e1b0:	f002 fe0c 	bl	8010dcc <_svfiprintf_r>
 800e1b4:	9b02      	ldr	r3, [sp, #8]
 800e1b6:	2200      	movs	r2, #0
 800e1b8:	701a      	strb	r2, [r3, #0]
 800e1ba:	b01c      	add	sp, #112	; 0x70
 800e1bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800e1c0:	b003      	add	sp, #12
 800e1c2:	4770      	bx	lr
 800e1c4:	24000014 	.word	0x24000014
 800e1c8:	ffff0208 	.word	0xffff0208

0800e1cc <sulp>:
 800e1cc:	b570      	push	{r4, r5, r6, lr}
 800e1ce:	4604      	mov	r4, r0
 800e1d0:	460d      	mov	r5, r1
 800e1d2:	4616      	mov	r6, r2
 800e1d4:	ec45 4b10 	vmov	d0, r4, r5
 800e1d8:	f002 fb5a 	bl	8010890 <__ulp>
 800e1dc:	b17e      	cbz	r6, 800e1fe <sulp+0x32>
 800e1de:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e1e2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	dd09      	ble.n	800e1fe <sulp+0x32>
 800e1ea:	051b      	lsls	r3, r3, #20
 800e1ec:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800e1f0:	2000      	movs	r0, #0
 800e1f2:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800e1f6:	ec41 0b17 	vmov	d7, r0, r1
 800e1fa:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e1fe:	bd70      	pop	{r4, r5, r6, pc}

0800e200 <_strtod_l>:
 800e200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e204:	ed2d 8b0e 	vpush	{d8-d14}
 800e208:	b097      	sub	sp, #92	; 0x5c
 800e20a:	461f      	mov	r7, r3
 800e20c:	2300      	movs	r3, #0
 800e20e:	9312      	str	r3, [sp, #72]	; 0x48
 800e210:	4ba1      	ldr	r3, [pc, #644]	; (800e498 <_strtod_l+0x298>)
 800e212:	920d      	str	r2, [sp, #52]	; 0x34
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	9307      	str	r3, [sp, #28]
 800e218:	4604      	mov	r4, r0
 800e21a:	4618      	mov	r0, r3
 800e21c:	468b      	mov	fp, r1
 800e21e:	f7f2 f8bf 	bl	80003a0 <strlen>
 800e222:	f04f 0800 	mov.w	r8, #0
 800e226:	4605      	mov	r5, r0
 800e228:	f04f 0900 	mov.w	r9, #0
 800e22c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800e230:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e232:	7813      	ldrb	r3, [r2, #0]
 800e234:	2b2b      	cmp	r3, #43	; 0x2b
 800e236:	d04d      	beq.n	800e2d4 <_strtod_l+0xd4>
 800e238:	d83a      	bhi.n	800e2b0 <_strtod_l+0xb0>
 800e23a:	2b0d      	cmp	r3, #13
 800e23c:	d833      	bhi.n	800e2a6 <_strtod_l+0xa6>
 800e23e:	2b08      	cmp	r3, #8
 800e240:	d833      	bhi.n	800e2aa <_strtod_l+0xaa>
 800e242:	2b00      	cmp	r3, #0
 800e244:	d03d      	beq.n	800e2c2 <_strtod_l+0xc2>
 800e246:	2300      	movs	r3, #0
 800e248:	9308      	str	r3, [sp, #32]
 800e24a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800e24c:	7833      	ldrb	r3, [r6, #0]
 800e24e:	2b30      	cmp	r3, #48	; 0x30
 800e250:	f040 80b0 	bne.w	800e3b4 <_strtod_l+0x1b4>
 800e254:	7873      	ldrb	r3, [r6, #1]
 800e256:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e25a:	2b58      	cmp	r3, #88	; 0x58
 800e25c:	d167      	bne.n	800e32e <_strtod_l+0x12e>
 800e25e:	9b08      	ldr	r3, [sp, #32]
 800e260:	9301      	str	r3, [sp, #4]
 800e262:	ab12      	add	r3, sp, #72	; 0x48
 800e264:	9702      	str	r7, [sp, #8]
 800e266:	9300      	str	r3, [sp, #0]
 800e268:	4a8c      	ldr	r2, [pc, #560]	; (800e49c <_strtod_l+0x29c>)
 800e26a:	ab13      	add	r3, sp, #76	; 0x4c
 800e26c:	a911      	add	r1, sp, #68	; 0x44
 800e26e:	4620      	mov	r0, r4
 800e270:	f001 fc68 	bl	800fb44 <__gethex>
 800e274:	f010 0507 	ands.w	r5, r0, #7
 800e278:	4607      	mov	r7, r0
 800e27a:	d005      	beq.n	800e288 <_strtod_l+0x88>
 800e27c:	2d06      	cmp	r5, #6
 800e27e:	d12b      	bne.n	800e2d8 <_strtod_l+0xd8>
 800e280:	3601      	adds	r6, #1
 800e282:	2300      	movs	r3, #0
 800e284:	9611      	str	r6, [sp, #68]	; 0x44
 800e286:	9308      	str	r3, [sp, #32]
 800e288:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	f040 854e 	bne.w	800ed2c <_strtod_l+0xb2c>
 800e290:	9b08      	ldr	r3, [sp, #32]
 800e292:	b1e3      	cbz	r3, 800e2ce <_strtod_l+0xce>
 800e294:	ec49 8b17 	vmov	d7, r8, r9
 800e298:	eeb1 0b47 	vneg.f64	d0, d7
 800e29c:	b017      	add	sp, #92	; 0x5c
 800e29e:	ecbd 8b0e 	vpop	{d8-d14}
 800e2a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2a6:	2b20      	cmp	r3, #32
 800e2a8:	d1cd      	bne.n	800e246 <_strtod_l+0x46>
 800e2aa:	3201      	adds	r2, #1
 800e2ac:	9211      	str	r2, [sp, #68]	; 0x44
 800e2ae:	e7bf      	b.n	800e230 <_strtod_l+0x30>
 800e2b0:	2b2d      	cmp	r3, #45	; 0x2d
 800e2b2:	d1c8      	bne.n	800e246 <_strtod_l+0x46>
 800e2b4:	2301      	movs	r3, #1
 800e2b6:	9308      	str	r3, [sp, #32]
 800e2b8:	1c53      	adds	r3, r2, #1
 800e2ba:	9311      	str	r3, [sp, #68]	; 0x44
 800e2bc:	7853      	ldrb	r3, [r2, #1]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d1c3      	bne.n	800e24a <_strtod_l+0x4a>
 800e2c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e2c4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	f040 852d 	bne.w	800ed28 <_strtod_l+0xb28>
 800e2ce:	ec49 8b10 	vmov	d0, r8, r9
 800e2d2:	e7e3      	b.n	800e29c <_strtod_l+0x9c>
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	e7ee      	b.n	800e2b6 <_strtod_l+0xb6>
 800e2d8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e2da:	b13a      	cbz	r2, 800e2ec <_strtod_l+0xec>
 800e2dc:	2135      	movs	r1, #53	; 0x35
 800e2de:	a814      	add	r0, sp, #80	; 0x50
 800e2e0:	f002 fbde 	bl	8010aa0 <__copybits>
 800e2e4:	9912      	ldr	r1, [sp, #72]	; 0x48
 800e2e6:	4620      	mov	r0, r4
 800e2e8:	f001 ffa0 	bl	801022c <_Bfree>
 800e2ec:	3d01      	subs	r5, #1
 800e2ee:	2d04      	cmp	r5, #4
 800e2f0:	d806      	bhi.n	800e300 <_strtod_l+0x100>
 800e2f2:	e8df f005 	tbb	[pc, r5]
 800e2f6:	030a      	.short	0x030a
 800e2f8:	1714      	.short	0x1714
 800e2fa:	0a          	.byte	0x0a
 800e2fb:	00          	.byte	0x00
 800e2fc:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800e300:	073f      	lsls	r7, r7, #28
 800e302:	d5c1      	bpl.n	800e288 <_strtod_l+0x88>
 800e304:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800e308:	e7be      	b.n	800e288 <_strtod_l+0x88>
 800e30a:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800e30e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e310:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e314:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e318:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800e31c:	e7f0      	b.n	800e300 <_strtod_l+0x100>
 800e31e:	f8df 9180 	ldr.w	r9, [pc, #384]	; 800e4a0 <_strtod_l+0x2a0>
 800e322:	e7ed      	b.n	800e300 <_strtod_l+0x100>
 800e324:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800e328:	f04f 38ff 	mov.w	r8, #4294967295
 800e32c:	e7e8      	b.n	800e300 <_strtod_l+0x100>
 800e32e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e330:	1c5a      	adds	r2, r3, #1
 800e332:	9211      	str	r2, [sp, #68]	; 0x44
 800e334:	785b      	ldrb	r3, [r3, #1]
 800e336:	2b30      	cmp	r3, #48	; 0x30
 800e338:	d0f9      	beq.n	800e32e <_strtod_l+0x12e>
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d0a4      	beq.n	800e288 <_strtod_l+0x88>
 800e33e:	2301      	movs	r3, #1
 800e340:	f04f 0a00 	mov.w	sl, #0
 800e344:	9304      	str	r3, [sp, #16]
 800e346:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e348:	930a      	str	r3, [sp, #40]	; 0x28
 800e34a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800e34e:	f8cd a018 	str.w	sl, [sp, #24]
 800e352:	220a      	movs	r2, #10
 800e354:	9811      	ldr	r0, [sp, #68]	; 0x44
 800e356:	7807      	ldrb	r7, [r0, #0]
 800e358:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800e35c:	b2d9      	uxtb	r1, r3
 800e35e:	2909      	cmp	r1, #9
 800e360:	d92a      	bls.n	800e3b8 <_strtod_l+0x1b8>
 800e362:	9907      	ldr	r1, [sp, #28]
 800e364:	462a      	mov	r2, r5
 800e366:	f002 fe4b 	bl	8011000 <strncmp>
 800e36a:	2800      	cmp	r0, #0
 800e36c:	d033      	beq.n	800e3d6 <_strtod_l+0x1d6>
 800e36e:	2000      	movs	r0, #0
 800e370:	9b06      	ldr	r3, [sp, #24]
 800e372:	463a      	mov	r2, r7
 800e374:	4601      	mov	r1, r0
 800e376:	4607      	mov	r7, r0
 800e378:	2a65      	cmp	r2, #101	; 0x65
 800e37a:	d001      	beq.n	800e380 <_strtod_l+0x180>
 800e37c:	2a45      	cmp	r2, #69	; 0x45
 800e37e:	d117      	bne.n	800e3b0 <_strtod_l+0x1b0>
 800e380:	b91b      	cbnz	r3, 800e38a <_strtod_l+0x18a>
 800e382:	9b04      	ldr	r3, [sp, #16]
 800e384:	4303      	orrs	r3, r0
 800e386:	d09c      	beq.n	800e2c2 <_strtod_l+0xc2>
 800e388:	2300      	movs	r3, #0
 800e38a:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800e38e:	f10b 0201 	add.w	r2, fp, #1
 800e392:	9211      	str	r2, [sp, #68]	; 0x44
 800e394:	f89b 2001 	ldrb.w	r2, [fp, #1]
 800e398:	2a2b      	cmp	r2, #43	; 0x2b
 800e39a:	d071      	beq.n	800e480 <_strtod_l+0x280>
 800e39c:	2a2d      	cmp	r2, #45	; 0x2d
 800e39e:	d077      	beq.n	800e490 <_strtod_l+0x290>
 800e3a0:	f04f 0e00 	mov.w	lr, #0
 800e3a4:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800e3a8:	2d09      	cmp	r5, #9
 800e3aa:	d97f      	bls.n	800e4ac <_strtod_l+0x2ac>
 800e3ac:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800e3b0:	2500      	movs	r5, #0
 800e3b2:	e09b      	b.n	800e4ec <_strtod_l+0x2ec>
 800e3b4:	2300      	movs	r3, #0
 800e3b6:	e7c3      	b.n	800e340 <_strtod_l+0x140>
 800e3b8:	9906      	ldr	r1, [sp, #24]
 800e3ba:	2908      	cmp	r1, #8
 800e3bc:	bfdd      	ittte	le
 800e3be:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800e3c0:	fb02 3301 	mlale	r3, r2, r1, r3
 800e3c4:	9309      	strle	r3, [sp, #36]	; 0x24
 800e3c6:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800e3ca:	9b06      	ldr	r3, [sp, #24]
 800e3cc:	3001      	adds	r0, #1
 800e3ce:	3301      	adds	r3, #1
 800e3d0:	9306      	str	r3, [sp, #24]
 800e3d2:	9011      	str	r0, [sp, #68]	; 0x44
 800e3d4:	e7be      	b.n	800e354 <_strtod_l+0x154>
 800e3d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e3d8:	195a      	adds	r2, r3, r5
 800e3da:	9211      	str	r2, [sp, #68]	; 0x44
 800e3dc:	5d5a      	ldrb	r2, [r3, r5]
 800e3de:	9b06      	ldr	r3, [sp, #24]
 800e3e0:	b3a3      	cbz	r3, 800e44c <_strtod_l+0x24c>
 800e3e2:	4607      	mov	r7, r0
 800e3e4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800e3e8:	2909      	cmp	r1, #9
 800e3ea:	d912      	bls.n	800e412 <_strtod_l+0x212>
 800e3ec:	2101      	movs	r1, #1
 800e3ee:	e7c3      	b.n	800e378 <_strtod_l+0x178>
 800e3f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e3f2:	1c5a      	adds	r2, r3, #1
 800e3f4:	9211      	str	r2, [sp, #68]	; 0x44
 800e3f6:	785a      	ldrb	r2, [r3, #1]
 800e3f8:	3001      	adds	r0, #1
 800e3fa:	2a30      	cmp	r2, #48	; 0x30
 800e3fc:	d0f8      	beq.n	800e3f0 <_strtod_l+0x1f0>
 800e3fe:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800e402:	2b08      	cmp	r3, #8
 800e404:	f200 8497 	bhi.w	800ed36 <_strtod_l+0xb36>
 800e408:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e40a:	930a      	str	r3, [sp, #40]	; 0x28
 800e40c:	4607      	mov	r7, r0
 800e40e:	2000      	movs	r0, #0
 800e410:	4603      	mov	r3, r0
 800e412:	3a30      	subs	r2, #48	; 0x30
 800e414:	f100 0101 	add.w	r1, r0, #1
 800e418:	d012      	beq.n	800e440 <_strtod_l+0x240>
 800e41a:	440f      	add	r7, r1
 800e41c:	eb00 0c03 	add.w	ip, r0, r3
 800e420:	4619      	mov	r1, r3
 800e422:	250a      	movs	r5, #10
 800e424:	4561      	cmp	r1, ip
 800e426:	d113      	bne.n	800e450 <_strtod_l+0x250>
 800e428:	1819      	adds	r1, r3, r0
 800e42a:	2908      	cmp	r1, #8
 800e42c:	f103 0301 	add.w	r3, r3, #1
 800e430:	4403      	add	r3, r0
 800e432:	dc1c      	bgt.n	800e46e <_strtod_l+0x26e>
 800e434:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e436:	210a      	movs	r1, #10
 800e438:	fb01 2200 	mla	r2, r1, r0, r2
 800e43c:	9209      	str	r2, [sp, #36]	; 0x24
 800e43e:	2100      	movs	r1, #0
 800e440:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e442:	1c50      	adds	r0, r2, #1
 800e444:	9011      	str	r0, [sp, #68]	; 0x44
 800e446:	7852      	ldrb	r2, [r2, #1]
 800e448:	4608      	mov	r0, r1
 800e44a:	e7cb      	b.n	800e3e4 <_strtod_l+0x1e4>
 800e44c:	9806      	ldr	r0, [sp, #24]
 800e44e:	e7d4      	b.n	800e3fa <_strtod_l+0x1fa>
 800e450:	2908      	cmp	r1, #8
 800e452:	dc04      	bgt.n	800e45e <_strtod_l+0x25e>
 800e454:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800e456:	436e      	muls	r6, r5
 800e458:	9609      	str	r6, [sp, #36]	; 0x24
 800e45a:	3101      	adds	r1, #1
 800e45c:	e7e2      	b.n	800e424 <_strtod_l+0x224>
 800e45e:	f101 0e01 	add.w	lr, r1, #1
 800e462:	f1be 0f10 	cmp.w	lr, #16
 800e466:	bfd8      	it	le
 800e468:	fb05 fa0a 	mulle.w	sl, r5, sl
 800e46c:	e7f5      	b.n	800e45a <_strtod_l+0x25a>
 800e46e:	2b10      	cmp	r3, #16
 800e470:	bfdc      	itt	le
 800e472:	210a      	movle	r1, #10
 800e474:	fb01 2a0a 	mlale	sl, r1, sl, r2
 800e478:	e7e1      	b.n	800e43e <_strtod_l+0x23e>
 800e47a:	2700      	movs	r7, #0
 800e47c:	2101      	movs	r1, #1
 800e47e:	e780      	b.n	800e382 <_strtod_l+0x182>
 800e480:	f04f 0e00 	mov.w	lr, #0
 800e484:	f10b 0202 	add.w	r2, fp, #2
 800e488:	9211      	str	r2, [sp, #68]	; 0x44
 800e48a:	f89b 2002 	ldrb.w	r2, [fp, #2]
 800e48e:	e789      	b.n	800e3a4 <_strtod_l+0x1a4>
 800e490:	f04f 0e01 	mov.w	lr, #1
 800e494:	e7f6      	b.n	800e484 <_strtod_l+0x284>
 800e496:	bf00      	nop
 800e498:	08014d08 	.word	0x08014d08
 800e49c:	08014ac0 	.word	0x08014ac0
 800e4a0:	7ff00000 	.word	0x7ff00000
 800e4a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e4a6:	1c55      	adds	r5, r2, #1
 800e4a8:	9511      	str	r5, [sp, #68]	; 0x44
 800e4aa:	7852      	ldrb	r2, [r2, #1]
 800e4ac:	2a30      	cmp	r2, #48	; 0x30
 800e4ae:	d0f9      	beq.n	800e4a4 <_strtod_l+0x2a4>
 800e4b0:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800e4b4:	2d08      	cmp	r5, #8
 800e4b6:	f63f af7b 	bhi.w	800e3b0 <_strtod_l+0x1b0>
 800e4ba:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800e4be:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e4c0:	9207      	str	r2, [sp, #28]
 800e4c2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800e4c4:	1c55      	adds	r5, r2, #1
 800e4c6:	9511      	str	r5, [sp, #68]	; 0x44
 800e4c8:	7852      	ldrb	r2, [r2, #1]
 800e4ca:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800e4ce:	2e09      	cmp	r6, #9
 800e4d0:	d937      	bls.n	800e542 <_strtod_l+0x342>
 800e4d2:	9e07      	ldr	r6, [sp, #28]
 800e4d4:	1bad      	subs	r5, r5, r6
 800e4d6:	2d08      	cmp	r5, #8
 800e4d8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800e4dc:	dc02      	bgt.n	800e4e4 <_strtod_l+0x2e4>
 800e4de:	4565      	cmp	r5, ip
 800e4e0:	bfa8      	it	ge
 800e4e2:	4665      	movge	r5, ip
 800e4e4:	f1be 0f00 	cmp.w	lr, #0
 800e4e8:	d000      	beq.n	800e4ec <_strtod_l+0x2ec>
 800e4ea:	426d      	negs	r5, r5
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d14d      	bne.n	800e58c <_strtod_l+0x38c>
 800e4f0:	9b04      	ldr	r3, [sp, #16]
 800e4f2:	4303      	orrs	r3, r0
 800e4f4:	f47f aec8 	bne.w	800e288 <_strtod_l+0x88>
 800e4f8:	2900      	cmp	r1, #0
 800e4fa:	f47f aee2 	bne.w	800e2c2 <_strtod_l+0xc2>
 800e4fe:	2a69      	cmp	r2, #105	; 0x69
 800e500:	d027      	beq.n	800e552 <_strtod_l+0x352>
 800e502:	dc24      	bgt.n	800e54e <_strtod_l+0x34e>
 800e504:	2a49      	cmp	r2, #73	; 0x49
 800e506:	d024      	beq.n	800e552 <_strtod_l+0x352>
 800e508:	2a4e      	cmp	r2, #78	; 0x4e
 800e50a:	f47f aeda 	bne.w	800e2c2 <_strtod_l+0xc2>
 800e50e:	4996      	ldr	r1, [pc, #600]	; (800e768 <_strtod_l+0x568>)
 800e510:	a811      	add	r0, sp, #68	; 0x44
 800e512:	f001 fd6f 	bl	800fff4 <__match>
 800e516:	2800      	cmp	r0, #0
 800e518:	f43f aed3 	beq.w	800e2c2 <_strtod_l+0xc2>
 800e51c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e51e:	781b      	ldrb	r3, [r3, #0]
 800e520:	2b28      	cmp	r3, #40	; 0x28
 800e522:	d12d      	bne.n	800e580 <_strtod_l+0x380>
 800e524:	4991      	ldr	r1, [pc, #580]	; (800e76c <_strtod_l+0x56c>)
 800e526:	aa14      	add	r2, sp, #80	; 0x50
 800e528:	a811      	add	r0, sp, #68	; 0x44
 800e52a:	f001 fd77 	bl	801001c <__hexnan>
 800e52e:	2805      	cmp	r0, #5
 800e530:	d126      	bne.n	800e580 <_strtod_l+0x380>
 800e532:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e534:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800e538:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800e53c:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800e540:	e6a2      	b.n	800e288 <_strtod_l+0x88>
 800e542:	250a      	movs	r5, #10
 800e544:	fb05 250c 	mla	r5, r5, ip, r2
 800e548:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 800e54c:	e7b9      	b.n	800e4c2 <_strtod_l+0x2c2>
 800e54e:	2a6e      	cmp	r2, #110	; 0x6e
 800e550:	e7db      	b.n	800e50a <_strtod_l+0x30a>
 800e552:	4987      	ldr	r1, [pc, #540]	; (800e770 <_strtod_l+0x570>)
 800e554:	a811      	add	r0, sp, #68	; 0x44
 800e556:	f001 fd4d 	bl	800fff4 <__match>
 800e55a:	2800      	cmp	r0, #0
 800e55c:	f43f aeb1 	beq.w	800e2c2 <_strtod_l+0xc2>
 800e560:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e562:	4984      	ldr	r1, [pc, #528]	; (800e774 <_strtod_l+0x574>)
 800e564:	3b01      	subs	r3, #1
 800e566:	a811      	add	r0, sp, #68	; 0x44
 800e568:	9311      	str	r3, [sp, #68]	; 0x44
 800e56a:	f001 fd43 	bl	800fff4 <__match>
 800e56e:	b910      	cbnz	r0, 800e576 <_strtod_l+0x376>
 800e570:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e572:	3301      	adds	r3, #1
 800e574:	9311      	str	r3, [sp, #68]	; 0x44
 800e576:	f8df 9210 	ldr.w	r9, [pc, #528]	; 800e788 <_strtod_l+0x588>
 800e57a:	f04f 0800 	mov.w	r8, #0
 800e57e:	e683      	b.n	800e288 <_strtod_l+0x88>
 800e580:	487d      	ldr	r0, [pc, #500]	; (800e778 <_strtod_l+0x578>)
 800e582:	f002 fd25 	bl	8010fd0 <nan>
 800e586:	ec59 8b10 	vmov	r8, r9, d0
 800e58a:	e67d      	b.n	800e288 <_strtod_l+0x88>
 800e58c:	1bea      	subs	r2, r5, r7
 800e58e:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800e592:	9207      	str	r2, [sp, #28]
 800e594:	9a06      	ldr	r2, [sp, #24]
 800e596:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800e59a:	2a00      	cmp	r2, #0
 800e59c:	bf08      	it	eq
 800e59e:	461a      	moveq	r2, r3
 800e5a0:	2b10      	cmp	r3, #16
 800e5a2:	9206      	str	r2, [sp, #24]
 800e5a4:	461a      	mov	r2, r3
 800e5a6:	bfa8      	it	ge
 800e5a8:	2210      	movge	r2, #16
 800e5aa:	2b09      	cmp	r3, #9
 800e5ac:	ec59 8b17 	vmov	r8, r9, d7
 800e5b0:	dd0c      	ble.n	800e5cc <_strtod_l+0x3cc>
 800e5b2:	4972      	ldr	r1, [pc, #456]	; (800e77c <_strtod_l+0x57c>)
 800e5b4:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800e5b8:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800e5bc:	ee06 aa90 	vmov	s13, sl
 800e5c0:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800e5c4:	eea7 6b05 	vfma.f64	d6, d7, d5
 800e5c8:	ec59 8b16 	vmov	r8, r9, d6
 800e5cc:	2b0f      	cmp	r3, #15
 800e5ce:	dc36      	bgt.n	800e63e <_strtod_l+0x43e>
 800e5d0:	9907      	ldr	r1, [sp, #28]
 800e5d2:	2900      	cmp	r1, #0
 800e5d4:	f43f ae58 	beq.w	800e288 <_strtod_l+0x88>
 800e5d8:	dd23      	ble.n	800e622 <_strtod_l+0x422>
 800e5da:	2916      	cmp	r1, #22
 800e5dc:	dc0b      	bgt.n	800e5f6 <_strtod_l+0x3f6>
 800e5de:	4b67      	ldr	r3, [pc, #412]	; (800e77c <_strtod_l+0x57c>)
 800e5e0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800e5e4:	ed93 7b00 	vldr	d7, [r3]
 800e5e8:	ec49 8b16 	vmov	d6, r8, r9
 800e5ec:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e5f0:	ec59 8b17 	vmov	r8, r9, d7
 800e5f4:	e648      	b.n	800e288 <_strtod_l+0x88>
 800e5f6:	9807      	ldr	r0, [sp, #28]
 800e5f8:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800e5fc:	4281      	cmp	r1, r0
 800e5fe:	db1e      	blt.n	800e63e <_strtod_l+0x43e>
 800e600:	4a5e      	ldr	r2, [pc, #376]	; (800e77c <_strtod_l+0x57c>)
 800e602:	f1c3 030f 	rsb	r3, r3, #15
 800e606:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800e60a:	ed91 7b00 	vldr	d7, [r1]
 800e60e:	ec49 8b16 	vmov	d6, r8, r9
 800e612:	1ac3      	subs	r3, r0, r3
 800e614:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800e618:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e61c:	ed92 6b00 	vldr	d6, [r2]
 800e620:	e7e4      	b.n	800e5ec <_strtod_l+0x3ec>
 800e622:	9907      	ldr	r1, [sp, #28]
 800e624:	3116      	adds	r1, #22
 800e626:	db0a      	blt.n	800e63e <_strtod_l+0x43e>
 800e628:	4b54      	ldr	r3, [pc, #336]	; (800e77c <_strtod_l+0x57c>)
 800e62a:	1b7d      	subs	r5, r7, r5
 800e62c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800e630:	ed95 7b00 	vldr	d7, [r5]
 800e634:	ec49 8b16 	vmov	d6, r8, r9
 800e638:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e63c:	e7d8      	b.n	800e5f0 <_strtod_l+0x3f0>
 800e63e:	9907      	ldr	r1, [sp, #28]
 800e640:	1a9a      	subs	r2, r3, r2
 800e642:	440a      	add	r2, r1
 800e644:	2a00      	cmp	r2, #0
 800e646:	dd6f      	ble.n	800e728 <_strtod_l+0x528>
 800e648:	f012 000f 	ands.w	r0, r2, #15
 800e64c:	d00a      	beq.n	800e664 <_strtod_l+0x464>
 800e64e:	494b      	ldr	r1, [pc, #300]	; (800e77c <_strtod_l+0x57c>)
 800e650:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800e654:	ed91 7b00 	vldr	d7, [r1]
 800e658:	ec49 8b16 	vmov	d6, r8, r9
 800e65c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e660:	ec59 8b17 	vmov	r8, r9, d7
 800e664:	f032 020f 	bics.w	r2, r2, #15
 800e668:	d04f      	beq.n	800e70a <_strtod_l+0x50a>
 800e66a:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800e66e:	dd22      	ble.n	800e6b6 <_strtod_l+0x4b6>
 800e670:	2500      	movs	r5, #0
 800e672:	462e      	mov	r6, r5
 800e674:	9506      	str	r5, [sp, #24]
 800e676:	462f      	mov	r7, r5
 800e678:	2322      	movs	r3, #34	; 0x22
 800e67a:	f8df 910c 	ldr.w	r9, [pc, #268]	; 800e788 <_strtod_l+0x588>
 800e67e:	6023      	str	r3, [r4, #0]
 800e680:	f04f 0800 	mov.w	r8, #0
 800e684:	9b06      	ldr	r3, [sp, #24]
 800e686:	2b00      	cmp	r3, #0
 800e688:	f43f adfe 	beq.w	800e288 <_strtod_l+0x88>
 800e68c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800e68e:	4620      	mov	r0, r4
 800e690:	f001 fdcc 	bl	801022c <_Bfree>
 800e694:	4639      	mov	r1, r7
 800e696:	4620      	mov	r0, r4
 800e698:	f001 fdc8 	bl	801022c <_Bfree>
 800e69c:	4631      	mov	r1, r6
 800e69e:	4620      	mov	r0, r4
 800e6a0:	f001 fdc4 	bl	801022c <_Bfree>
 800e6a4:	9906      	ldr	r1, [sp, #24]
 800e6a6:	4620      	mov	r0, r4
 800e6a8:	f001 fdc0 	bl	801022c <_Bfree>
 800e6ac:	4629      	mov	r1, r5
 800e6ae:	4620      	mov	r0, r4
 800e6b0:	f001 fdbc 	bl	801022c <_Bfree>
 800e6b4:	e5e8      	b.n	800e288 <_strtod_l+0x88>
 800e6b6:	2000      	movs	r0, #0
 800e6b8:	ec49 8b17 	vmov	d7, r8, r9
 800e6bc:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 800e780 <_strtod_l+0x580>
 800e6c0:	1112      	asrs	r2, r2, #4
 800e6c2:	4601      	mov	r1, r0
 800e6c4:	2a01      	cmp	r2, #1
 800e6c6:	dc23      	bgt.n	800e710 <_strtod_l+0x510>
 800e6c8:	b108      	cbz	r0, 800e6ce <_strtod_l+0x4ce>
 800e6ca:	ec59 8b17 	vmov	r8, r9, d7
 800e6ce:	4a2c      	ldr	r2, [pc, #176]	; (800e780 <_strtod_l+0x580>)
 800e6d0:	482c      	ldr	r0, [pc, #176]	; (800e784 <_strtod_l+0x584>)
 800e6d2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800e6d6:	ed92 7b00 	vldr	d7, [r2]
 800e6da:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800e6de:	ec49 8b16 	vmov	d6, r8, r9
 800e6e2:	4a29      	ldr	r2, [pc, #164]	; (800e788 <_strtod_l+0x588>)
 800e6e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e6e8:	ee17 1a90 	vmov	r1, s15
 800e6ec:	400a      	ands	r2, r1
 800e6ee:	4282      	cmp	r2, r0
 800e6f0:	ec59 8b17 	vmov	r8, r9, d7
 800e6f4:	d8bc      	bhi.n	800e670 <_strtod_l+0x470>
 800e6f6:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800e6fa:	4282      	cmp	r2, r0
 800e6fc:	bf86      	itte	hi
 800e6fe:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800e78c <_strtod_l+0x58c>
 800e702:	f04f 38ff 	movhi.w	r8, #4294967295
 800e706:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800e70a:	2200      	movs	r2, #0
 800e70c:	9204      	str	r2, [sp, #16]
 800e70e:	e078      	b.n	800e802 <_strtod_l+0x602>
 800e710:	07d6      	lsls	r6, r2, #31
 800e712:	d504      	bpl.n	800e71e <_strtod_l+0x51e>
 800e714:	ed9c 6b00 	vldr	d6, [ip]
 800e718:	2001      	movs	r0, #1
 800e71a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e71e:	3101      	adds	r1, #1
 800e720:	1052      	asrs	r2, r2, #1
 800e722:	f10c 0c08 	add.w	ip, ip, #8
 800e726:	e7cd      	b.n	800e6c4 <_strtod_l+0x4c4>
 800e728:	d0ef      	beq.n	800e70a <_strtod_l+0x50a>
 800e72a:	4252      	negs	r2, r2
 800e72c:	f012 000f 	ands.w	r0, r2, #15
 800e730:	d00a      	beq.n	800e748 <_strtod_l+0x548>
 800e732:	4912      	ldr	r1, [pc, #72]	; (800e77c <_strtod_l+0x57c>)
 800e734:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800e738:	ed91 7b00 	vldr	d7, [r1]
 800e73c:	ec49 8b16 	vmov	d6, r8, r9
 800e740:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e744:	ec59 8b17 	vmov	r8, r9, d7
 800e748:	1112      	asrs	r2, r2, #4
 800e74a:	d0de      	beq.n	800e70a <_strtod_l+0x50a>
 800e74c:	2a1f      	cmp	r2, #31
 800e74e:	dd1f      	ble.n	800e790 <_strtod_l+0x590>
 800e750:	2500      	movs	r5, #0
 800e752:	462e      	mov	r6, r5
 800e754:	9506      	str	r5, [sp, #24]
 800e756:	462f      	mov	r7, r5
 800e758:	2322      	movs	r3, #34	; 0x22
 800e75a:	f04f 0800 	mov.w	r8, #0
 800e75e:	f04f 0900 	mov.w	r9, #0
 800e762:	6023      	str	r3, [r4, #0]
 800e764:	e78e      	b.n	800e684 <_strtod_l+0x484>
 800e766:	bf00      	nop
 800e768:	08014a91 	.word	0x08014a91
 800e76c:	08014ad4 	.word	0x08014ad4
 800e770:	08014a89 	.word	0x08014a89
 800e774:	08014c14 	.word	0x08014c14
 800e778:	08014ec0 	.word	0x08014ec0
 800e77c:	08014da0 	.word	0x08014da0
 800e780:	08014d78 	.word	0x08014d78
 800e784:	7ca00000 	.word	0x7ca00000
 800e788:	7ff00000 	.word	0x7ff00000
 800e78c:	7fefffff 	.word	0x7fefffff
 800e790:	f012 0110 	ands.w	r1, r2, #16
 800e794:	bf18      	it	ne
 800e796:	216a      	movne	r1, #106	; 0x6a
 800e798:	9104      	str	r1, [sp, #16]
 800e79a:	ec49 8b17 	vmov	d7, r8, r9
 800e79e:	49be      	ldr	r1, [pc, #760]	; (800ea98 <_strtod_l+0x898>)
 800e7a0:	2000      	movs	r0, #0
 800e7a2:	07d6      	lsls	r6, r2, #31
 800e7a4:	d504      	bpl.n	800e7b0 <_strtod_l+0x5b0>
 800e7a6:	ed91 6b00 	vldr	d6, [r1]
 800e7aa:	2001      	movs	r0, #1
 800e7ac:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e7b0:	1052      	asrs	r2, r2, #1
 800e7b2:	f101 0108 	add.w	r1, r1, #8
 800e7b6:	d1f4      	bne.n	800e7a2 <_strtod_l+0x5a2>
 800e7b8:	b108      	cbz	r0, 800e7be <_strtod_l+0x5be>
 800e7ba:	ec59 8b17 	vmov	r8, r9, d7
 800e7be:	9a04      	ldr	r2, [sp, #16]
 800e7c0:	b1c2      	cbz	r2, 800e7f4 <_strtod_l+0x5f4>
 800e7c2:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800e7c6:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800e7ca:	2a00      	cmp	r2, #0
 800e7cc:	4648      	mov	r0, r9
 800e7ce:	dd11      	ble.n	800e7f4 <_strtod_l+0x5f4>
 800e7d0:	2a1f      	cmp	r2, #31
 800e7d2:	f340 812e 	ble.w	800ea32 <_strtod_l+0x832>
 800e7d6:	2a34      	cmp	r2, #52	; 0x34
 800e7d8:	bfde      	ittt	le
 800e7da:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800e7de:	f04f 32ff 	movle.w	r2, #4294967295
 800e7e2:	fa02 f101 	lslle.w	r1, r2, r1
 800e7e6:	f04f 0800 	mov.w	r8, #0
 800e7ea:	bfcc      	ite	gt
 800e7ec:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800e7f0:	ea01 0900 	andle.w	r9, r1, r0
 800e7f4:	ec49 8b17 	vmov	d7, r8, r9
 800e7f8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e7fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e800:	d0a6      	beq.n	800e750 <_strtod_l+0x550>
 800e802:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e804:	9200      	str	r2, [sp, #0]
 800e806:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e808:	9a06      	ldr	r2, [sp, #24]
 800e80a:	4620      	mov	r0, r4
 800e80c:	f001 fd76 	bl	80102fc <__s2b>
 800e810:	9006      	str	r0, [sp, #24]
 800e812:	2800      	cmp	r0, #0
 800e814:	f43f af2c 	beq.w	800e670 <_strtod_l+0x470>
 800e818:	9b07      	ldr	r3, [sp, #28]
 800e81a:	1b7d      	subs	r5, r7, r5
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	bfb4      	ite	lt
 800e820:	462b      	movlt	r3, r5
 800e822:	2300      	movge	r3, #0
 800e824:	9309      	str	r3, [sp, #36]	; 0x24
 800e826:	9b07      	ldr	r3, [sp, #28]
 800e828:	ed9f 9b93 	vldr	d9, [pc, #588]	; 800ea78 <_strtod_l+0x878>
 800e82c:	ed9f ab94 	vldr	d10, [pc, #592]	; 800ea80 <_strtod_l+0x880>
 800e830:	ed9f bb95 	vldr	d11, [pc, #596]	; 800ea88 <_strtod_l+0x888>
 800e834:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e838:	2500      	movs	r5, #0
 800e83a:	930c      	str	r3, [sp, #48]	; 0x30
 800e83c:	462e      	mov	r6, r5
 800e83e:	9b06      	ldr	r3, [sp, #24]
 800e840:	4620      	mov	r0, r4
 800e842:	6859      	ldr	r1, [r3, #4]
 800e844:	f001 fcb2 	bl	80101ac <_Balloc>
 800e848:	4607      	mov	r7, r0
 800e84a:	2800      	cmp	r0, #0
 800e84c:	f43f af14 	beq.w	800e678 <_strtod_l+0x478>
 800e850:	9b06      	ldr	r3, [sp, #24]
 800e852:	691a      	ldr	r2, [r3, #16]
 800e854:	3202      	adds	r2, #2
 800e856:	f103 010c 	add.w	r1, r3, #12
 800e85a:	0092      	lsls	r2, r2, #2
 800e85c:	300c      	adds	r0, #12
 800e85e:	f001 fc97 	bl	8010190 <memcpy>
 800e862:	ec49 8b10 	vmov	d0, r8, r9
 800e866:	aa14      	add	r2, sp, #80	; 0x50
 800e868:	a913      	add	r1, sp, #76	; 0x4c
 800e86a:	4620      	mov	r0, r4
 800e86c:	f002 f88c 	bl	8010988 <__d2b>
 800e870:	ec49 8b18 	vmov	d8, r8, r9
 800e874:	9012      	str	r0, [sp, #72]	; 0x48
 800e876:	2800      	cmp	r0, #0
 800e878:	f43f aefe 	beq.w	800e678 <_strtod_l+0x478>
 800e87c:	2101      	movs	r1, #1
 800e87e:	4620      	mov	r0, r4
 800e880:	f001 fdd6 	bl	8010430 <__i2b>
 800e884:	4606      	mov	r6, r0
 800e886:	2800      	cmp	r0, #0
 800e888:	f43f aef6 	beq.w	800e678 <_strtod_l+0x478>
 800e88c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800e88e:	9914      	ldr	r1, [sp, #80]	; 0x50
 800e890:	2b00      	cmp	r3, #0
 800e892:	bfab      	itete	ge
 800e894:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800e896:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800e898:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800e89c:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800e8a0:	bfac      	ite	ge
 800e8a2:	eb03 0b02 	addge.w	fp, r3, r2
 800e8a6:	eba2 0a03 	sublt.w	sl, r2, r3
 800e8aa:	9a04      	ldr	r2, [sp, #16]
 800e8ac:	1a9b      	subs	r3, r3, r2
 800e8ae:	440b      	add	r3, r1
 800e8b0:	4a7a      	ldr	r2, [pc, #488]	; (800ea9c <_strtod_l+0x89c>)
 800e8b2:	3b01      	subs	r3, #1
 800e8b4:	4293      	cmp	r3, r2
 800e8b6:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800e8ba:	f280 80cd 	bge.w	800ea58 <_strtod_l+0x858>
 800e8be:	1ad2      	subs	r2, r2, r3
 800e8c0:	2a1f      	cmp	r2, #31
 800e8c2:	eba1 0102 	sub.w	r1, r1, r2
 800e8c6:	f04f 0001 	mov.w	r0, #1
 800e8ca:	f300 80b9 	bgt.w	800ea40 <_strtod_l+0x840>
 800e8ce:	fa00 f302 	lsl.w	r3, r0, r2
 800e8d2:	930b      	str	r3, [sp, #44]	; 0x2c
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	930a      	str	r3, [sp, #40]	; 0x28
 800e8d8:	eb0b 0301 	add.w	r3, fp, r1
 800e8dc:	9a04      	ldr	r2, [sp, #16]
 800e8de:	459b      	cmp	fp, r3
 800e8e0:	448a      	add	sl, r1
 800e8e2:	4492      	add	sl, r2
 800e8e4:	465a      	mov	r2, fp
 800e8e6:	bfa8      	it	ge
 800e8e8:	461a      	movge	r2, r3
 800e8ea:	4552      	cmp	r2, sl
 800e8ec:	bfa8      	it	ge
 800e8ee:	4652      	movge	r2, sl
 800e8f0:	2a00      	cmp	r2, #0
 800e8f2:	bfc2      	ittt	gt
 800e8f4:	1a9b      	subgt	r3, r3, r2
 800e8f6:	ebaa 0a02 	subgt.w	sl, sl, r2
 800e8fa:	ebab 0b02 	subgt.w	fp, fp, r2
 800e8fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e900:	2a00      	cmp	r2, #0
 800e902:	dd18      	ble.n	800e936 <_strtod_l+0x736>
 800e904:	4631      	mov	r1, r6
 800e906:	4620      	mov	r0, r4
 800e908:	930f      	str	r3, [sp, #60]	; 0x3c
 800e90a:	f001 fe51 	bl	80105b0 <__pow5mult>
 800e90e:	4606      	mov	r6, r0
 800e910:	2800      	cmp	r0, #0
 800e912:	f43f aeb1 	beq.w	800e678 <_strtod_l+0x478>
 800e916:	4601      	mov	r1, r0
 800e918:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e91a:	4620      	mov	r0, r4
 800e91c:	f001 fd9e 	bl	801045c <__multiply>
 800e920:	900e      	str	r0, [sp, #56]	; 0x38
 800e922:	2800      	cmp	r0, #0
 800e924:	f43f aea8 	beq.w	800e678 <_strtod_l+0x478>
 800e928:	9912      	ldr	r1, [sp, #72]	; 0x48
 800e92a:	4620      	mov	r0, r4
 800e92c:	f001 fc7e 	bl	801022c <_Bfree>
 800e930:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e932:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e934:	9212      	str	r2, [sp, #72]	; 0x48
 800e936:	2b00      	cmp	r3, #0
 800e938:	f300 8093 	bgt.w	800ea62 <_strtod_l+0x862>
 800e93c:	9b07      	ldr	r3, [sp, #28]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	dd08      	ble.n	800e954 <_strtod_l+0x754>
 800e942:	4639      	mov	r1, r7
 800e944:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e946:	4620      	mov	r0, r4
 800e948:	f001 fe32 	bl	80105b0 <__pow5mult>
 800e94c:	4607      	mov	r7, r0
 800e94e:	2800      	cmp	r0, #0
 800e950:	f43f ae92 	beq.w	800e678 <_strtod_l+0x478>
 800e954:	f1ba 0f00 	cmp.w	sl, #0
 800e958:	dd08      	ble.n	800e96c <_strtod_l+0x76c>
 800e95a:	4639      	mov	r1, r7
 800e95c:	4652      	mov	r2, sl
 800e95e:	4620      	mov	r0, r4
 800e960:	f001 fe80 	bl	8010664 <__lshift>
 800e964:	4607      	mov	r7, r0
 800e966:	2800      	cmp	r0, #0
 800e968:	f43f ae86 	beq.w	800e678 <_strtod_l+0x478>
 800e96c:	f1bb 0f00 	cmp.w	fp, #0
 800e970:	dd08      	ble.n	800e984 <_strtod_l+0x784>
 800e972:	4631      	mov	r1, r6
 800e974:	465a      	mov	r2, fp
 800e976:	4620      	mov	r0, r4
 800e978:	f001 fe74 	bl	8010664 <__lshift>
 800e97c:	4606      	mov	r6, r0
 800e97e:	2800      	cmp	r0, #0
 800e980:	f43f ae7a 	beq.w	800e678 <_strtod_l+0x478>
 800e984:	9912      	ldr	r1, [sp, #72]	; 0x48
 800e986:	463a      	mov	r2, r7
 800e988:	4620      	mov	r0, r4
 800e98a:	f001 fef7 	bl	801077c <__mdiff>
 800e98e:	4605      	mov	r5, r0
 800e990:	2800      	cmp	r0, #0
 800e992:	f43f ae71 	beq.w	800e678 <_strtod_l+0x478>
 800e996:	2300      	movs	r3, #0
 800e998:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800e99c:	60c3      	str	r3, [r0, #12]
 800e99e:	4631      	mov	r1, r6
 800e9a0:	f001 fed0 	bl	8010744 <__mcmp>
 800e9a4:	2800      	cmp	r0, #0
 800e9a6:	da7d      	bge.n	800eaa4 <_strtod_l+0x8a4>
 800e9a8:	ea5a 0308 	orrs.w	r3, sl, r8
 800e9ac:	f040 80a3 	bne.w	800eaf6 <_strtod_l+0x8f6>
 800e9b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	f040 809e 	bne.w	800eaf6 <_strtod_l+0x8f6>
 800e9ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e9be:	0d1b      	lsrs	r3, r3, #20
 800e9c0:	051b      	lsls	r3, r3, #20
 800e9c2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800e9c6:	f240 8096 	bls.w	800eaf6 <_strtod_l+0x8f6>
 800e9ca:	696b      	ldr	r3, [r5, #20]
 800e9cc:	b91b      	cbnz	r3, 800e9d6 <_strtod_l+0x7d6>
 800e9ce:	692b      	ldr	r3, [r5, #16]
 800e9d0:	2b01      	cmp	r3, #1
 800e9d2:	f340 8090 	ble.w	800eaf6 <_strtod_l+0x8f6>
 800e9d6:	4629      	mov	r1, r5
 800e9d8:	2201      	movs	r2, #1
 800e9da:	4620      	mov	r0, r4
 800e9dc:	f001 fe42 	bl	8010664 <__lshift>
 800e9e0:	4631      	mov	r1, r6
 800e9e2:	4605      	mov	r5, r0
 800e9e4:	f001 feae 	bl	8010744 <__mcmp>
 800e9e8:	2800      	cmp	r0, #0
 800e9ea:	f340 8084 	ble.w	800eaf6 <_strtod_l+0x8f6>
 800e9ee:	9904      	ldr	r1, [sp, #16]
 800e9f0:	4a2b      	ldr	r2, [pc, #172]	; (800eaa0 <_strtod_l+0x8a0>)
 800e9f2:	464b      	mov	r3, r9
 800e9f4:	2900      	cmp	r1, #0
 800e9f6:	f000 809d 	beq.w	800eb34 <_strtod_l+0x934>
 800e9fa:	ea02 0109 	and.w	r1, r2, r9
 800e9fe:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ea02:	f300 8097 	bgt.w	800eb34 <_strtod_l+0x934>
 800ea06:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ea0a:	f77f aea5 	ble.w	800e758 <_strtod_l+0x558>
 800ea0e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800ea90 <_strtod_l+0x890>
 800ea12:	ec49 8b16 	vmov	d6, r8, r9
 800ea16:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ea1a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ea1e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800ea22:	4313      	orrs	r3, r2
 800ea24:	bf08      	it	eq
 800ea26:	2322      	moveq	r3, #34	; 0x22
 800ea28:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800ea2c:	bf08      	it	eq
 800ea2e:	6023      	streq	r3, [r4, #0]
 800ea30:	e62c      	b.n	800e68c <_strtod_l+0x48c>
 800ea32:	f04f 31ff 	mov.w	r1, #4294967295
 800ea36:	fa01 f202 	lsl.w	r2, r1, r2
 800ea3a:	ea02 0808 	and.w	r8, r2, r8
 800ea3e:	e6d9      	b.n	800e7f4 <_strtod_l+0x5f4>
 800ea40:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800ea44:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800ea48:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800ea4c:	33e2      	adds	r3, #226	; 0xe2
 800ea4e:	fa00 f303 	lsl.w	r3, r0, r3
 800ea52:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800ea56:	e73f      	b.n	800e8d8 <_strtod_l+0x6d8>
 800ea58:	2200      	movs	r2, #0
 800ea5a:	2301      	movs	r3, #1
 800ea5c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ea60:	e73a      	b.n	800e8d8 <_strtod_l+0x6d8>
 800ea62:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ea64:	461a      	mov	r2, r3
 800ea66:	4620      	mov	r0, r4
 800ea68:	f001 fdfc 	bl	8010664 <__lshift>
 800ea6c:	9012      	str	r0, [sp, #72]	; 0x48
 800ea6e:	2800      	cmp	r0, #0
 800ea70:	f47f af64 	bne.w	800e93c <_strtod_l+0x73c>
 800ea74:	e600      	b.n	800e678 <_strtod_l+0x478>
 800ea76:	bf00      	nop
 800ea78:	94a03595 	.word	0x94a03595
 800ea7c:	3fcfffff 	.word	0x3fcfffff
 800ea80:	94a03595 	.word	0x94a03595
 800ea84:	3fdfffff 	.word	0x3fdfffff
 800ea88:	35afe535 	.word	0x35afe535
 800ea8c:	3fe00000 	.word	0x3fe00000
 800ea90:	00000000 	.word	0x00000000
 800ea94:	39500000 	.word	0x39500000
 800ea98:	08014ae8 	.word	0x08014ae8
 800ea9c:	fffffc02 	.word	0xfffffc02
 800eaa0:	7ff00000 	.word	0x7ff00000
 800eaa4:	46cb      	mov	fp, r9
 800eaa6:	d15f      	bne.n	800eb68 <_strtod_l+0x968>
 800eaa8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800eaac:	f1ba 0f00 	cmp.w	sl, #0
 800eab0:	d02a      	beq.n	800eb08 <_strtod_l+0x908>
 800eab2:	4aa7      	ldr	r2, [pc, #668]	; (800ed50 <_strtod_l+0xb50>)
 800eab4:	4293      	cmp	r3, r2
 800eab6:	d12b      	bne.n	800eb10 <_strtod_l+0x910>
 800eab8:	9b04      	ldr	r3, [sp, #16]
 800eaba:	4642      	mov	r2, r8
 800eabc:	b1fb      	cbz	r3, 800eafe <_strtod_l+0x8fe>
 800eabe:	4ba5      	ldr	r3, [pc, #660]	; (800ed54 <_strtod_l+0xb54>)
 800eac0:	ea09 0303 	and.w	r3, r9, r3
 800eac4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800eac8:	f04f 31ff 	mov.w	r1, #4294967295
 800eacc:	d81a      	bhi.n	800eb04 <_strtod_l+0x904>
 800eace:	0d1b      	lsrs	r3, r3, #20
 800ead0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ead4:	fa01 f303 	lsl.w	r3, r1, r3
 800ead8:	429a      	cmp	r2, r3
 800eada:	d119      	bne.n	800eb10 <_strtod_l+0x910>
 800eadc:	4b9e      	ldr	r3, [pc, #632]	; (800ed58 <_strtod_l+0xb58>)
 800eade:	459b      	cmp	fp, r3
 800eae0:	d102      	bne.n	800eae8 <_strtod_l+0x8e8>
 800eae2:	3201      	adds	r2, #1
 800eae4:	f43f adc8 	beq.w	800e678 <_strtod_l+0x478>
 800eae8:	4b9a      	ldr	r3, [pc, #616]	; (800ed54 <_strtod_l+0xb54>)
 800eaea:	ea0b 0303 	and.w	r3, fp, r3
 800eaee:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800eaf2:	f04f 0800 	mov.w	r8, #0
 800eaf6:	9b04      	ldr	r3, [sp, #16]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d188      	bne.n	800ea0e <_strtod_l+0x80e>
 800eafc:	e5c6      	b.n	800e68c <_strtod_l+0x48c>
 800eafe:	f04f 33ff 	mov.w	r3, #4294967295
 800eb02:	e7e9      	b.n	800ead8 <_strtod_l+0x8d8>
 800eb04:	460b      	mov	r3, r1
 800eb06:	e7e7      	b.n	800ead8 <_strtod_l+0x8d8>
 800eb08:	ea53 0308 	orrs.w	r3, r3, r8
 800eb0c:	f43f af6f 	beq.w	800e9ee <_strtod_l+0x7ee>
 800eb10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb12:	b1cb      	cbz	r3, 800eb48 <_strtod_l+0x948>
 800eb14:	ea13 0f0b 	tst.w	r3, fp
 800eb18:	d0ed      	beq.n	800eaf6 <_strtod_l+0x8f6>
 800eb1a:	9a04      	ldr	r2, [sp, #16]
 800eb1c:	4640      	mov	r0, r8
 800eb1e:	4649      	mov	r1, r9
 800eb20:	f1ba 0f00 	cmp.w	sl, #0
 800eb24:	d014      	beq.n	800eb50 <_strtod_l+0x950>
 800eb26:	f7ff fb51 	bl	800e1cc <sulp>
 800eb2a:	ee38 7b00 	vadd.f64	d7, d8, d0
 800eb2e:	ec59 8b17 	vmov	r8, r9, d7
 800eb32:	e7e0      	b.n	800eaf6 <_strtod_l+0x8f6>
 800eb34:	4013      	ands	r3, r2
 800eb36:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800eb3a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800eb3e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800eb42:	f04f 38ff 	mov.w	r8, #4294967295
 800eb46:	e7d6      	b.n	800eaf6 <_strtod_l+0x8f6>
 800eb48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eb4a:	ea13 0f08 	tst.w	r3, r8
 800eb4e:	e7e3      	b.n	800eb18 <_strtod_l+0x918>
 800eb50:	f7ff fb3c 	bl	800e1cc <sulp>
 800eb54:	ee38 0b40 	vsub.f64	d0, d8, d0
 800eb58:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800eb5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb60:	ec59 8b10 	vmov	r8, r9, d0
 800eb64:	d1c7      	bne.n	800eaf6 <_strtod_l+0x8f6>
 800eb66:	e5f7      	b.n	800e758 <_strtod_l+0x558>
 800eb68:	4631      	mov	r1, r6
 800eb6a:	4628      	mov	r0, r5
 800eb6c:	f001 ff68 	bl	8010a40 <__ratio>
 800eb70:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800eb74:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800eb78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb7c:	d865      	bhi.n	800ec4a <_strtod_l+0xa4a>
 800eb7e:	f1ba 0f00 	cmp.w	sl, #0
 800eb82:	d042      	beq.n	800ec0a <_strtod_l+0xa0a>
 800eb84:	4b75      	ldr	r3, [pc, #468]	; (800ed5c <_strtod_l+0xb5c>)
 800eb86:	2200      	movs	r2, #0
 800eb88:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800eb8c:	4871      	ldr	r0, [pc, #452]	; (800ed54 <_strtod_l+0xb54>)
 800eb8e:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800ed68 <_strtod_l+0xb68>
 800eb92:	ea0b 0100 	and.w	r1, fp, r0
 800eb96:	4561      	cmp	r1, ip
 800eb98:	f040 808e 	bne.w	800ecb8 <_strtod_l+0xab8>
 800eb9c:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800eba0:	ec49 8b10 	vmov	d0, r8, r9
 800eba4:	ec43 2b1c 	vmov	d12, r2, r3
 800eba8:	910a      	str	r1, [sp, #40]	; 0x28
 800ebaa:	f001 fe71 	bl	8010890 <__ulp>
 800ebae:	ec49 8b1e 	vmov	d14, r8, r9
 800ebb2:	4868      	ldr	r0, [pc, #416]	; (800ed54 <_strtod_l+0xb54>)
 800ebb4:	eeac eb00 	vfma.f64	d14, d12, d0
 800ebb8:	ee1e 3a90 	vmov	r3, s29
 800ebbc:	4a68      	ldr	r2, [pc, #416]	; (800ed60 <_strtod_l+0xb60>)
 800ebbe:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ebc0:	4018      	ands	r0, r3
 800ebc2:	4290      	cmp	r0, r2
 800ebc4:	ec59 8b1e 	vmov	r8, r9, d14
 800ebc8:	d94e      	bls.n	800ec68 <_strtod_l+0xa68>
 800ebca:	ee18 3a90 	vmov	r3, s17
 800ebce:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ebd2:	4293      	cmp	r3, r2
 800ebd4:	d104      	bne.n	800ebe0 <_strtod_l+0x9e0>
 800ebd6:	ee18 3a10 	vmov	r3, s16
 800ebda:	3301      	adds	r3, #1
 800ebdc:	f43f ad4c 	beq.w	800e678 <_strtod_l+0x478>
 800ebe0:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800ed58 <_strtod_l+0xb58>
 800ebe4:	f04f 38ff 	mov.w	r8, #4294967295
 800ebe8:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ebea:	4620      	mov	r0, r4
 800ebec:	f001 fb1e 	bl	801022c <_Bfree>
 800ebf0:	4639      	mov	r1, r7
 800ebf2:	4620      	mov	r0, r4
 800ebf4:	f001 fb1a 	bl	801022c <_Bfree>
 800ebf8:	4631      	mov	r1, r6
 800ebfa:	4620      	mov	r0, r4
 800ebfc:	f001 fb16 	bl	801022c <_Bfree>
 800ec00:	4629      	mov	r1, r5
 800ec02:	4620      	mov	r0, r4
 800ec04:	f001 fb12 	bl	801022c <_Bfree>
 800ec08:	e619      	b.n	800e83e <_strtod_l+0x63e>
 800ec0a:	f1b8 0f00 	cmp.w	r8, #0
 800ec0e:	d112      	bne.n	800ec36 <_strtod_l+0xa36>
 800ec10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ec14:	b9b3      	cbnz	r3, 800ec44 <_strtod_l+0xa44>
 800ec16:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800ec1a:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800ec1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec22:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800ec26:	bf58      	it	pl
 800ec28:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 800ec2c:	eeb1 7b4d 	vneg.f64	d7, d13
 800ec30:	ec53 2b17 	vmov	r2, r3, d7
 800ec34:	e7aa      	b.n	800eb8c <_strtod_l+0x98c>
 800ec36:	f1b8 0f01 	cmp.w	r8, #1
 800ec3a:	d103      	bne.n	800ec44 <_strtod_l+0xa44>
 800ec3c:	f1b9 0f00 	cmp.w	r9, #0
 800ec40:	f43f ad8a 	beq.w	800e758 <_strtod_l+0x558>
 800ec44:	4b47      	ldr	r3, [pc, #284]	; (800ed64 <_strtod_l+0xb64>)
 800ec46:	2200      	movs	r2, #0
 800ec48:	e79e      	b.n	800eb88 <_strtod_l+0x988>
 800ec4a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800ec4e:	ee20 db0d 	vmul.f64	d13, d0, d13
 800ec52:	f1ba 0f00 	cmp.w	sl, #0
 800ec56:	d104      	bne.n	800ec62 <_strtod_l+0xa62>
 800ec58:	eeb1 7b4d 	vneg.f64	d7, d13
 800ec5c:	ec53 2b17 	vmov	r2, r3, d7
 800ec60:	e794      	b.n	800eb8c <_strtod_l+0x98c>
 800ec62:	eeb0 7b4d 	vmov.f64	d7, d13
 800ec66:	e7f9      	b.n	800ec5c <_strtod_l+0xa5c>
 800ec68:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800ec6c:	9b04      	ldr	r3, [sp, #16]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d1ba      	bne.n	800ebe8 <_strtod_l+0x9e8>
 800ec72:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ec76:	0d1b      	lsrs	r3, r3, #20
 800ec78:	051b      	lsls	r3, r3, #20
 800ec7a:	4299      	cmp	r1, r3
 800ec7c:	d1b4      	bne.n	800ebe8 <_strtod_l+0x9e8>
 800ec7e:	ec51 0b1d 	vmov	r0, r1, d13
 800ec82:	f7f1 fdb9 	bl	80007f8 <__aeabi_d2lz>
 800ec86:	f7f1 fd71 	bl	800076c <__aeabi_l2d>
 800ec8a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ec8e:	ec41 0b17 	vmov	d7, r0, r1
 800ec92:	ea43 0308 	orr.w	r3, r3, r8
 800ec96:	ea53 030a 	orrs.w	r3, r3, sl
 800ec9a:	ee3d db47 	vsub.f64	d13, d13, d7
 800ec9e:	d03c      	beq.n	800ed1a <_strtod_l+0xb1a>
 800eca0:	eeb4 dbca 	vcmpe.f64	d13, d10
 800eca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eca8:	f53f acf0 	bmi.w	800e68c <_strtod_l+0x48c>
 800ecac:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800ecb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecb4:	dd98      	ble.n	800ebe8 <_strtod_l+0x9e8>
 800ecb6:	e4e9      	b.n	800e68c <_strtod_l+0x48c>
 800ecb8:	9804      	ldr	r0, [sp, #16]
 800ecba:	b1f0      	cbz	r0, 800ecfa <_strtod_l+0xafa>
 800ecbc:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800ecc0:	d81b      	bhi.n	800ecfa <_strtod_l+0xafa>
 800ecc2:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800ed48 <_strtod_l+0xb48>
 800ecc6:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800ecca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecce:	d811      	bhi.n	800ecf4 <_strtod_l+0xaf4>
 800ecd0:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800ecd4:	ee1d 3a10 	vmov	r3, s26
 800ecd8:	2b01      	cmp	r3, #1
 800ecda:	bf38      	it	cc
 800ecdc:	2301      	movcc	r3, #1
 800ecde:	ee0d 3a10 	vmov	s26, r3
 800ece2:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800ece6:	f1ba 0f00 	cmp.w	sl, #0
 800ecea:	d113      	bne.n	800ed14 <_strtod_l+0xb14>
 800ecec:	eeb1 7b4d 	vneg.f64	d7, d13
 800ecf0:	ec53 2b17 	vmov	r2, r3, d7
 800ecf4:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800ecf8:	1a43      	subs	r3, r0, r1
 800ecfa:	eeb0 0b48 	vmov.f64	d0, d8
 800ecfe:	ec43 2b1c 	vmov	d12, r2, r3
 800ed02:	910a      	str	r1, [sp, #40]	; 0x28
 800ed04:	f001 fdc4 	bl	8010890 <__ulp>
 800ed08:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ed0a:	eeac 8b00 	vfma.f64	d8, d12, d0
 800ed0e:	ec59 8b18 	vmov	r8, r9, d8
 800ed12:	e7ab      	b.n	800ec6c <_strtod_l+0xa6c>
 800ed14:	eeb0 7b4d 	vmov.f64	d7, d13
 800ed18:	e7ea      	b.n	800ecf0 <_strtod_l+0xaf0>
 800ed1a:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800ed1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed22:	f57f af61 	bpl.w	800ebe8 <_strtod_l+0x9e8>
 800ed26:	e4b1      	b.n	800e68c <_strtod_l+0x48c>
 800ed28:	2300      	movs	r3, #0
 800ed2a:	9308      	str	r3, [sp, #32]
 800ed2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ed2e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ed30:	6013      	str	r3, [r2, #0]
 800ed32:	f7ff baad 	b.w	800e290 <_strtod_l+0x90>
 800ed36:	2a65      	cmp	r2, #101	; 0x65
 800ed38:	f43f ab9f 	beq.w	800e47a <_strtod_l+0x27a>
 800ed3c:	2a45      	cmp	r2, #69	; 0x45
 800ed3e:	f43f ab9c 	beq.w	800e47a <_strtod_l+0x27a>
 800ed42:	2101      	movs	r1, #1
 800ed44:	f7ff bbd4 	b.w	800e4f0 <_strtod_l+0x2f0>
 800ed48:	ffc00000 	.word	0xffc00000
 800ed4c:	41dfffff 	.word	0x41dfffff
 800ed50:	000fffff 	.word	0x000fffff
 800ed54:	7ff00000 	.word	0x7ff00000
 800ed58:	7fefffff 	.word	0x7fefffff
 800ed5c:	3ff00000 	.word	0x3ff00000
 800ed60:	7c9fffff 	.word	0x7c9fffff
 800ed64:	bff00000 	.word	0xbff00000
 800ed68:	7fe00000 	.word	0x7fe00000

0800ed6c <_strtod_r>:
 800ed6c:	4b01      	ldr	r3, [pc, #4]	; (800ed74 <_strtod_r+0x8>)
 800ed6e:	f7ff ba47 	b.w	800e200 <_strtod_l>
 800ed72:	bf00      	nop
 800ed74:	2400007c 	.word	0x2400007c

0800ed78 <_strtol_l.constprop.0>:
 800ed78:	2b01      	cmp	r3, #1
 800ed7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed7e:	d001      	beq.n	800ed84 <_strtol_l.constprop.0+0xc>
 800ed80:	2b24      	cmp	r3, #36	; 0x24
 800ed82:	d906      	bls.n	800ed92 <_strtol_l.constprop.0+0x1a>
 800ed84:	f7fe fb80 	bl	800d488 <__errno>
 800ed88:	2316      	movs	r3, #22
 800ed8a:	6003      	str	r3, [r0, #0]
 800ed8c:	2000      	movs	r0, #0
 800ed8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed92:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ee78 <_strtol_l.constprop.0+0x100>
 800ed96:	460d      	mov	r5, r1
 800ed98:	462e      	mov	r6, r5
 800ed9a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ed9e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800eda2:	f017 0708 	ands.w	r7, r7, #8
 800eda6:	d1f7      	bne.n	800ed98 <_strtol_l.constprop.0+0x20>
 800eda8:	2c2d      	cmp	r4, #45	; 0x2d
 800edaa:	d132      	bne.n	800ee12 <_strtol_l.constprop.0+0x9a>
 800edac:	782c      	ldrb	r4, [r5, #0]
 800edae:	2701      	movs	r7, #1
 800edb0:	1cb5      	adds	r5, r6, #2
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d05b      	beq.n	800ee6e <_strtol_l.constprop.0+0xf6>
 800edb6:	2b10      	cmp	r3, #16
 800edb8:	d109      	bne.n	800edce <_strtol_l.constprop.0+0x56>
 800edba:	2c30      	cmp	r4, #48	; 0x30
 800edbc:	d107      	bne.n	800edce <_strtol_l.constprop.0+0x56>
 800edbe:	782c      	ldrb	r4, [r5, #0]
 800edc0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800edc4:	2c58      	cmp	r4, #88	; 0x58
 800edc6:	d14d      	bne.n	800ee64 <_strtol_l.constprop.0+0xec>
 800edc8:	786c      	ldrb	r4, [r5, #1]
 800edca:	2310      	movs	r3, #16
 800edcc:	3502      	adds	r5, #2
 800edce:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800edd2:	f108 38ff 	add.w	r8, r8, #4294967295
 800edd6:	f04f 0c00 	mov.w	ip, #0
 800edda:	fbb8 f9f3 	udiv	r9, r8, r3
 800edde:	4666      	mov	r6, ip
 800ede0:	fb03 8a19 	mls	sl, r3, r9, r8
 800ede4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800ede8:	f1be 0f09 	cmp.w	lr, #9
 800edec:	d816      	bhi.n	800ee1c <_strtol_l.constprop.0+0xa4>
 800edee:	4674      	mov	r4, lr
 800edf0:	42a3      	cmp	r3, r4
 800edf2:	dd24      	ble.n	800ee3e <_strtol_l.constprop.0+0xc6>
 800edf4:	f1bc 0f00 	cmp.w	ip, #0
 800edf8:	db1e      	blt.n	800ee38 <_strtol_l.constprop.0+0xc0>
 800edfa:	45b1      	cmp	r9, r6
 800edfc:	d31c      	bcc.n	800ee38 <_strtol_l.constprop.0+0xc0>
 800edfe:	d101      	bne.n	800ee04 <_strtol_l.constprop.0+0x8c>
 800ee00:	45a2      	cmp	sl, r4
 800ee02:	db19      	blt.n	800ee38 <_strtol_l.constprop.0+0xc0>
 800ee04:	fb06 4603 	mla	r6, r6, r3, r4
 800ee08:	f04f 0c01 	mov.w	ip, #1
 800ee0c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ee10:	e7e8      	b.n	800ede4 <_strtol_l.constprop.0+0x6c>
 800ee12:	2c2b      	cmp	r4, #43	; 0x2b
 800ee14:	bf04      	itt	eq
 800ee16:	782c      	ldrbeq	r4, [r5, #0]
 800ee18:	1cb5      	addeq	r5, r6, #2
 800ee1a:	e7ca      	b.n	800edb2 <_strtol_l.constprop.0+0x3a>
 800ee1c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800ee20:	f1be 0f19 	cmp.w	lr, #25
 800ee24:	d801      	bhi.n	800ee2a <_strtol_l.constprop.0+0xb2>
 800ee26:	3c37      	subs	r4, #55	; 0x37
 800ee28:	e7e2      	b.n	800edf0 <_strtol_l.constprop.0+0x78>
 800ee2a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800ee2e:	f1be 0f19 	cmp.w	lr, #25
 800ee32:	d804      	bhi.n	800ee3e <_strtol_l.constprop.0+0xc6>
 800ee34:	3c57      	subs	r4, #87	; 0x57
 800ee36:	e7db      	b.n	800edf0 <_strtol_l.constprop.0+0x78>
 800ee38:	f04f 3cff 	mov.w	ip, #4294967295
 800ee3c:	e7e6      	b.n	800ee0c <_strtol_l.constprop.0+0x94>
 800ee3e:	f1bc 0f00 	cmp.w	ip, #0
 800ee42:	da05      	bge.n	800ee50 <_strtol_l.constprop.0+0xd8>
 800ee44:	2322      	movs	r3, #34	; 0x22
 800ee46:	6003      	str	r3, [r0, #0]
 800ee48:	4646      	mov	r6, r8
 800ee4a:	b942      	cbnz	r2, 800ee5e <_strtol_l.constprop.0+0xe6>
 800ee4c:	4630      	mov	r0, r6
 800ee4e:	e79e      	b.n	800ed8e <_strtol_l.constprop.0+0x16>
 800ee50:	b107      	cbz	r7, 800ee54 <_strtol_l.constprop.0+0xdc>
 800ee52:	4276      	negs	r6, r6
 800ee54:	2a00      	cmp	r2, #0
 800ee56:	d0f9      	beq.n	800ee4c <_strtol_l.constprop.0+0xd4>
 800ee58:	f1bc 0f00 	cmp.w	ip, #0
 800ee5c:	d000      	beq.n	800ee60 <_strtol_l.constprop.0+0xe8>
 800ee5e:	1e69      	subs	r1, r5, #1
 800ee60:	6011      	str	r1, [r2, #0]
 800ee62:	e7f3      	b.n	800ee4c <_strtol_l.constprop.0+0xd4>
 800ee64:	2430      	movs	r4, #48	; 0x30
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d1b1      	bne.n	800edce <_strtol_l.constprop.0+0x56>
 800ee6a:	2308      	movs	r3, #8
 800ee6c:	e7af      	b.n	800edce <_strtol_l.constprop.0+0x56>
 800ee6e:	2c30      	cmp	r4, #48	; 0x30
 800ee70:	d0a5      	beq.n	800edbe <_strtol_l.constprop.0+0x46>
 800ee72:	230a      	movs	r3, #10
 800ee74:	e7ab      	b.n	800edce <_strtol_l.constprop.0+0x56>
 800ee76:	bf00      	nop
 800ee78:	08014b11 	.word	0x08014b11

0800ee7c <_strtol_r>:
 800ee7c:	f7ff bf7c 	b.w	800ed78 <_strtol_l.constprop.0>

0800ee80 <quorem>:
 800ee80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee84:	6903      	ldr	r3, [r0, #16]
 800ee86:	690c      	ldr	r4, [r1, #16]
 800ee88:	42a3      	cmp	r3, r4
 800ee8a:	4607      	mov	r7, r0
 800ee8c:	f2c0 8081 	blt.w	800ef92 <quorem+0x112>
 800ee90:	3c01      	subs	r4, #1
 800ee92:	f101 0814 	add.w	r8, r1, #20
 800ee96:	f100 0514 	add.w	r5, r0, #20
 800ee9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ee9e:	9301      	str	r3, [sp, #4]
 800eea0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800eea4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800eea8:	3301      	adds	r3, #1
 800eeaa:	429a      	cmp	r2, r3
 800eeac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800eeb0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800eeb4:	fbb2 f6f3 	udiv	r6, r2, r3
 800eeb8:	d331      	bcc.n	800ef1e <quorem+0x9e>
 800eeba:	f04f 0e00 	mov.w	lr, #0
 800eebe:	4640      	mov	r0, r8
 800eec0:	46ac      	mov	ip, r5
 800eec2:	46f2      	mov	sl, lr
 800eec4:	f850 2b04 	ldr.w	r2, [r0], #4
 800eec8:	b293      	uxth	r3, r2
 800eeca:	fb06 e303 	mla	r3, r6, r3, lr
 800eece:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800eed2:	b29b      	uxth	r3, r3
 800eed4:	ebaa 0303 	sub.w	r3, sl, r3
 800eed8:	f8dc a000 	ldr.w	sl, [ip]
 800eedc:	0c12      	lsrs	r2, r2, #16
 800eede:	fa13 f38a 	uxtah	r3, r3, sl
 800eee2:	fb06 e202 	mla	r2, r6, r2, lr
 800eee6:	9300      	str	r3, [sp, #0]
 800eee8:	9b00      	ldr	r3, [sp, #0]
 800eeea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800eeee:	b292      	uxth	r2, r2
 800eef0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800eef4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800eef8:	f8bd 3000 	ldrh.w	r3, [sp]
 800eefc:	4581      	cmp	r9, r0
 800eefe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ef02:	f84c 3b04 	str.w	r3, [ip], #4
 800ef06:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ef0a:	d2db      	bcs.n	800eec4 <quorem+0x44>
 800ef0c:	f855 300b 	ldr.w	r3, [r5, fp]
 800ef10:	b92b      	cbnz	r3, 800ef1e <quorem+0x9e>
 800ef12:	9b01      	ldr	r3, [sp, #4]
 800ef14:	3b04      	subs	r3, #4
 800ef16:	429d      	cmp	r5, r3
 800ef18:	461a      	mov	r2, r3
 800ef1a:	d32e      	bcc.n	800ef7a <quorem+0xfa>
 800ef1c:	613c      	str	r4, [r7, #16]
 800ef1e:	4638      	mov	r0, r7
 800ef20:	f001 fc10 	bl	8010744 <__mcmp>
 800ef24:	2800      	cmp	r0, #0
 800ef26:	db24      	blt.n	800ef72 <quorem+0xf2>
 800ef28:	3601      	adds	r6, #1
 800ef2a:	4628      	mov	r0, r5
 800ef2c:	f04f 0c00 	mov.w	ip, #0
 800ef30:	f858 2b04 	ldr.w	r2, [r8], #4
 800ef34:	f8d0 e000 	ldr.w	lr, [r0]
 800ef38:	b293      	uxth	r3, r2
 800ef3a:	ebac 0303 	sub.w	r3, ip, r3
 800ef3e:	0c12      	lsrs	r2, r2, #16
 800ef40:	fa13 f38e 	uxtah	r3, r3, lr
 800ef44:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ef48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ef4c:	b29b      	uxth	r3, r3
 800ef4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ef52:	45c1      	cmp	r9, r8
 800ef54:	f840 3b04 	str.w	r3, [r0], #4
 800ef58:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ef5c:	d2e8      	bcs.n	800ef30 <quorem+0xb0>
 800ef5e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ef62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ef66:	b922      	cbnz	r2, 800ef72 <quorem+0xf2>
 800ef68:	3b04      	subs	r3, #4
 800ef6a:	429d      	cmp	r5, r3
 800ef6c:	461a      	mov	r2, r3
 800ef6e:	d30a      	bcc.n	800ef86 <quorem+0x106>
 800ef70:	613c      	str	r4, [r7, #16]
 800ef72:	4630      	mov	r0, r6
 800ef74:	b003      	add	sp, #12
 800ef76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef7a:	6812      	ldr	r2, [r2, #0]
 800ef7c:	3b04      	subs	r3, #4
 800ef7e:	2a00      	cmp	r2, #0
 800ef80:	d1cc      	bne.n	800ef1c <quorem+0x9c>
 800ef82:	3c01      	subs	r4, #1
 800ef84:	e7c7      	b.n	800ef16 <quorem+0x96>
 800ef86:	6812      	ldr	r2, [r2, #0]
 800ef88:	3b04      	subs	r3, #4
 800ef8a:	2a00      	cmp	r2, #0
 800ef8c:	d1f0      	bne.n	800ef70 <quorem+0xf0>
 800ef8e:	3c01      	subs	r4, #1
 800ef90:	e7eb      	b.n	800ef6a <quorem+0xea>
 800ef92:	2000      	movs	r0, #0
 800ef94:	e7ee      	b.n	800ef74 <quorem+0xf4>
	...

0800ef98 <_dtoa_r>:
 800ef98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef9c:	ed2d 8b02 	vpush	{d8}
 800efa0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800efa2:	b091      	sub	sp, #68	; 0x44
 800efa4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800efa8:	ec59 8b10 	vmov	r8, r9, d0
 800efac:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800efae:	9106      	str	r1, [sp, #24]
 800efb0:	4606      	mov	r6, r0
 800efb2:	9208      	str	r2, [sp, #32]
 800efb4:	930c      	str	r3, [sp, #48]	; 0x30
 800efb6:	b975      	cbnz	r5, 800efd6 <_dtoa_r+0x3e>
 800efb8:	2010      	movs	r0, #16
 800efba:	f001 f8cf 	bl	801015c <malloc>
 800efbe:	4602      	mov	r2, r0
 800efc0:	6270      	str	r0, [r6, #36]	; 0x24
 800efc2:	b920      	cbnz	r0, 800efce <_dtoa_r+0x36>
 800efc4:	4baa      	ldr	r3, [pc, #680]	; (800f270 <_dtoa_r+0x2d8>)
 800efc6:	21ea      	movs	r1, #234	; 0xea
 800efc8:	48aa      	ldr	r0, [pc, #680]	; (800f274 <_dtoa_r+0x2dc>)
 800efca:	f002 f83b 	bl	8011044 <__assert_func>
 800efce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800efd2:	6005      	str	r5, [r0, #0]
 800efd4:	60c5      	str	r5, [r0, #12]
 800efd6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800efd8:	6819      	ldr	r1, [r3, #0]
 800efda:	b151      	cbz	r1, 800eff2 <_dtoa_r+0x5a>
 800efdc:	685a      	ldr	r2, [r3, #4]
 800efde:	604a      	str	r2, [r1, #4]
 800efe0:	2301      	movs	r3, #1
 800efe2:	4093      	lsls	r3, r2
 800efe4:	608b      	str	r3, [r1, #8]
 800efe6:	4630      	mov	r0, r6
 800efe8:	f001 f920 	bl	801022c <_Bfree>
 800efec:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800efee:	2200      	movs	r2, #0
 800eff0:	601a      	str	r2, [r3, #0]
 800eff2:	f1b9 0300 	subs.w	r3, r9, #0
 800eff6:	bfbb      	ittet	lt
 800eff8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800effc:	9303      	strlt	r3, [sp, #12]
 800effe:	2300      	movge	r3, #0
 800f000:	2201      	movlt	r2, #1
 800f002:	bfac      	ite	ge
 800f004:	6023      	strge	r3, [r4, #0]
 800f006:	6022      	strlt	r2, [r4, #0]
 800f008:	4b9b      	ldr	r3, [pc, #620]	; (800f278 <_dtoa_r+0x2e0>)
 800f00a:	9c03      	ldr	r4, [sp, #12]
 800f00c:	43a3      	bics	r3, r4
 800f00e:	d11c      	bne.n	800f04a <_dtoa_r+0xb2>
 800f010:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f012:	f242 730f 	movw	r3, #9999	; 0x270f
 800f016:	6013      	str	r3, [r2, #0]
 800f018:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800f01c:	ea53 0308 	orrs.w	r3, r3, r8
 800f020:	f000 84fd 	beq.w	800fa1e <_dtoa_r+0xa86>
 800f024:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f026:	b963      	cbnz	r3, 800f042 <_dtoa_r+0xaa>
 800f028:	4b94      	ldr	r3, [pc, #592]	; (800f27c <_dtoa_r+0x2e4>)
 800f02a:	e01f      	b.n	800f06c <_dtoa_r+0xd4>
 800f02c:	4b94      	ldr	r3, [pc, #592]	; (800f280 <_dtoa_r+0x2e8>)
 800f02e:	9301      	str	r3, [sp, #4]
 800f030:	3308      	adds	r3, #8
 800f032:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800f034:	6013      	str	r3, [r2, #0]
 800f036:	9801      	ldr	r0, [sp, #4]
 800f038:	b011      	add	sp, #68	; 0x44
 800f03a:	ecbd 8b02 	vpop	{d8}
 800f03e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f042:	4b8e      	ldr	r3, [pc, #568]	; (800f27c <_dtoa_r+0x2e4>)
 800f044:	9301      	str	r3, [sp, #4]
 800f046:	3303      	adds	r3, #3
 800f048:	e7f3      	b.n	800f032 <_dtoa_r+0x9a>
 800f04a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800f04e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f056:	d10b      	bne.n	800f070 <_dtoa_r+0xd8>
 800f058:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f05a:	2301      	movs	r3, #1
 800f05c:	6013      	str	r3, [r2, #0]
 800f05e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f060:	2b00      	cmp	r3, #0
 800f062:	f000 84d9 	beq.w	800fa18 <_dtoa_r+0xa80>
 800f066:	4887      	ldr	r0, [pc, #540]	; (800f284 <_dtoa_r+0x2ec>)
 800f068:	6018      	str	r0, [r3, #0]
 800f06a:	1e43      	subs	r3, r0, #1
 800f06c:	9301      	str	r3, [sp, #4]
 800f06e:	e7e2      	b.n	800f036 <_dtoa_r+0x9e>
 800f070:	a90f      	add	r1, sp, #60	; 0x3c
 800f072:	aa0e      	add	r2, sp, #56	; 0x38
 800f074:	4630      	mov	r0, r6
 800f076:	eeb0 0b48 	vmov.f64	d0, d8
 800f07a:	f001 fc85 	bl	8010988 <__d2b>
 800f07e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800f082:	4605      	mov	r5, r0
 800f084:	980e      	ldr	r0, [sp, #56]	; 0x38
 800f086:	2900      	cmp	r1, #0
 800f088:	d046      	beq.n	800f118 <_dtoa_r+0x180>
 800f08a:	ee18 4a90 	vmov	r4, s17
 800f08e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800f092:	ec53 2b18 	vmov	r2, r3, d8
 800f096:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800f09a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f09e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800f0a2:	2400      	movs	r4, #0
 800f0a4:	ec43 2b16 	vmov	d6, r2, r3
 800f0a8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800f0ac:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800f258 <_dtoa_r+0x2c0>
 800f0b0:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f0b4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800f260 <_dtoa_r+0x2c8>
 800f0b8:	eea7 6b05 	vfma.f64	d6, d7, d5
 800f0bc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800f268 <_dtoa_r+0x2d0>
 800f0c0:	ee07 1a90 	vmov	s15, r1
 800f0c4:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800f0c8:	eeb0 7b46 	vmov.f64	d7, d6
 800f0cc:	eea4 7b05 	vfma.f64	d7, d4, d5
 800f0d0:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800f0d4:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800f0d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0dc:	ee16 ba90 	vmov	fp, s13
 800f0e0:	940a      	str	r4, [sp, #40]	; 0x28
 800f0e2:	d508      	bpl.n	800f0f6 <_dtoa_r+0x15e>
 800f0e4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800f0e8:	eeb4 6b47 	vcmp.f64	d6, d7
 800f0ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0f0:	bf18      	it	ne
 800f0f2:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800f0f6:	f1bb 0f16 	cmp.w	fp, #22
 800f0fa:	d82f      	bhi.n	800f15c <_dtoa_r+0x1c4>
 800f0fc:	4b62      	ldr	r3, [pc, #392]	; (800f288 <_dtoa_r+0x2f0>)
 800f0fe:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f102:	ed93 7b00 	vldr	d7, [r3]
 800f106:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800f10a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f10e:	d501      	bpl.n	800f114 <_dtoa_r+0x17c>
 800f110:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f114:	2300      	movs	r3, #0
 800f116:	e022      	b.n	800f15e <_dtoa_r+0x1c6>
 800f118:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f11a:	4401      	add	r1, r0
 800f11c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800f120:	2b20      	cmp	r3, #32
 800f122:	bfc1      	itttt	gt
 800f124:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f128:	fa04 f303 	lslgt.w	r3, r4, r3
 800f12c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800f130:	fa28 f804 	lsrgt.w	r8, r8, r4
 800f134:	bfd6      	itet	le
 800f136:	f1c3 0320 	rsble	r3, r3, #32
 800f13a:	ea43 0808 	orrgt.w	r8, r3, r8
 800f13e:	fa08 f803 	lslle.w	r8, r8, r3
 800f142:	ee07 8a90 	vmov	s15, r8
 800f146:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800f14a:	3901      	subs	r1, #1
 800f14c:	ee17 4a90 	vmov	r4, s15
 800f150:	ec53 2b17 	vmov	r2, r3, d7
 800f154:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800f158:	2401      	movs	r4, #1
 800f15a:	e7a3      	b.n	800f0a4 <_dtoa_r+0x10c>
 800f15c:	2301      	movs	r3, #1
 800f15e:	930b      	str	r3, [sp, #44]	; 0x2c
 800f160:	1a43      	subs	r3, r0, r1
 800f162:	1e5a      	subs	r2, r3, #1
 800f164:	bf45      	ittet	mi
 800f166:	f1c3 0301 	rsbmi	r3, r3, #1
 800f16a:	9304      	strmi	r3, [sp, #16]
 800f16c:	2300      	movpl	r3, #0
 800f16e:	2300      	movmi	r3, #0
 800f170:	9205      	str	r2, [sp, #20]
 800f172:	bf54      	ite	pl
 800f174:	9304      	strpl	r3, [sp, #16]
 800f176:	9305      	strmi	r3, [sp, #20]
 800f178:	f1bb 0f00 	cmp.w	fp, #0
 800f17c:	db18      	blt.n	800f1b0 <_dtoa_r+0x218>
 800f17e:	9b05      	ldr	r3, [sp, #20]
 800f180:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800f184:	445b      	add	r3, fp
 800f186:	9305      	str	r3, [sp, #20]
 800f188:	2300      	movs	r3, #0
 800f18a:	9a06      	ldr	r2, [sp, #24]
 800f18c:	2a09      	cmp	r2, #9
 800f18e:	d849      	bhi.n	800f224 <_dtoa_r+0x28c>
 800f190:	2a05      	cmp	r2, #5
 800f192:	bfc4      	itt	gt
 800f194:	3a04      	subgt	r2, #4
 800f196:	9206      	strgt	r2, [sp, #24]
 800f198:	9a06      	ldr	r2, [sp, #24]
 800f19a:	f1a2 0202 	sub.w	r2, r2, #2
 800f19e:	bfcc      	ite	gt
 800f1a0:	2400      	movgt	r4, #0
 800f1a2:	2401      	movle	r4, #1
 800f1a4:	2a03      	cmp	r2, #3
 800f1a6:	d848      	bhi.n	800f23a <_dtoa_r+0x2a2>
 800f1a8:	e8df f002 	tbb	[pc, r2]
 800f1ac:	3a2c2e0b 	.word	0x3a2c2e0b
 800f1b0:	9b04      	ldr	r3, [sp, #16]
 800f1b2:	2200      	movs	r2, #0
 800f1b4:	eba3 030b 	sub.w	r3, r3, fp
 800f1b8:	9304      	str	r3, [sp, #16]
 800f1ba:	9209      	str	r2, [sp, #36]	; 0x24
 800f1bc:	f1cb 0300 	rsb	r3, fp, #0
 800f1c0:	e7e3      	b.n	800f18a <_dtoa_r+0x1f2>
 800f1c2:	2200      	movs	r2, #0
 800f1c4:	9207      	str	r2, [sp, #28]
 800f1c6:	9a08      	ldr	r2, [sp, #32]
 800f1c8:	2a00      	cmp	r2, #0
 800f1ca:	dc39      	bgt.n	800f240 <_dtoa_r+0x2a8>
 800f1cc:	f04f 0a01 	mov.w	sl, #1
 800f1d0:	46d1      	mov	r9, sl
 800f1d2:	4652      	mov	r2, sl
 800f1d4:	f8cd a020 	str.w	sl, [sp, #32]
 800f1d8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800f1da:	2100      	movs	r1, #0
 800f1dc:	6079      	str	r1, [r7, #4]
 800f1de:	2004      	movs	r0, #4
 800f1e0:	f100 0c14 	add.w	ip, r0, #20
 800f1e4:	4594      	cmp	ip, r2
 800f1e6:	6879      	ldr	r1, [r7, #4]
 800f1e8:	d92f      	bls.n	800f24a <_dtoa_r+0x2b2>
 800f1ea:	4630      	mov	r0, r6
 800f1ec:	930d      	str	r3, [sp, #52]	; 0x34
 800f1ee:	f000 ffdd 	bl	80101ac <_Balloc>
 800f1f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f1f4:	9001      	str	r0, [sp, #4]
 800f1f6:	4602      	mov	r2, r0
 800f1f8:	2800      	cmp	r0, #0
 800f1fa:	d149      	bne.n	800f290 <_dtoa_r+0x2f8>
 800f1fc:	4b23      	ldr	r3, [pc, #140]	; (800f28c <_dtoa_r+0x2f4>)
 800f1fe:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f202:	e6e1      	b.n	800efc8 <_dtoa_r+0x30>
 800f204:	2201      	movs	r2, #1
 800f206:	e7dd      	b.n	800f1c4 <_dtoa_r+0x22c>
 800f208:	2200      	movs	r2, #0
 800f20a:	9207      	str	r2, [sp, #28]
 800f20c:	9a08      	ldr	r2, [sp, #32]
 800f20e:	eb0b 0a02 	add.w	sl, fp, r2
 800f212:	f10a 0901 	add.w	r9, sl, #1
 800f216:	464a      	mov	r2, r9
 800f218:	2a01      	cmp	r2, #1
 800f21a:	bfb8      	it	lt
 800f21c:	2201      	movlt	r2, #1
 800f21e:	e7db      	b.n	800f1d8 <_dtoa_r+0x240>
 800f220:	2201      	movs	r2, #1
 800f222:	e7f2      	b.n	800f20a <_dtoa_r+0x272>
 800f224:	2401      	movs	r4, #1
 800f226:	2200      	movs	r2, #0
 800f228:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800f22c:	f04f 3aff 	mov.w	sl, #4294967295
 800f230:	2100      	movs	r1, #0
 800f232:	46d1      	mov	r9, sl
 800f234:	2212      	movs	r2, #18
 800f236:	9108      	str	r1, [sp, #32]
 800f238:	e7ce      	b.n	800f1d8 <_dtoa_r+0x240>
 800f23a:	2201      	movs	r2, #1
 800f23c:	9207      	str	r2, [sp, #28]
 800f23e:	e7f5      	b.n	800f22c <_dtoa_r+0x294>
 800f240:	f8dd a020 	ldr.w	sl, [sp, #32]
 800f244:	46d1      	mov	r9, sl
 800f246:	4652      	mov	r2, sl
 800f248:	e7c6      	b.n	800f1d8 <_dtoa_r+0x240>
 800f24a:	3101      	adds	r1, #1
 800f24c:	6079      	str	r1, [r7, #4]
 800f24e:	0040      	lsls	r0, r0, #1
 800f250:	e7c6      	b.n	800f1e0 <_dtoa_r+0x248>
 800f252:	bf00      	nop
 800f254:	f3af 8000 	nop.w
 800f258:	636f4361 	.word	0x636f4361
 800f25c:	3fd287a7 	.word	0x3fd287a7
 800f260:	8b60c8b3 	.word	0x8b60c8b3
 800f264:	3fc68a28 	.word	0x3fc68a28
 800f268:	509f79fb 	.word	0x509f79fb
 800f26c:	3fd34413 	.word	0x3fd34413
 800f270:	08014c1e 	.word	0x08014c1e
 800f274:	08014c35 	.word	0x08014c35
 800f278:	7ff00000 	.word	0x7ff00000
 800f27c:	08014c1a 	.word	0x08014c1a
 800f280:	08014c11 	.word	0x08014c11
 800f284:	08014a95 	.word	0x08014a95
 800f288:	08014da0 	.word	0x08014da0
 800f28c:	08014c90 	.word	0x08014c90
 800f290:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800f292:	9901      	ldr	r1, [sp, #4]
 800f294:	6011      	str	r1, [r2, #0]
 800f296:	f1b9 0f0e 	cmp.w	r9, #14
 800f29a:	d86c      	bhi.n	800f376 <_dtoa_r+0x3de>
 800f29c:	2c00      	cmp	r4, #0
 800f29e:	d06a      	beq.n	800f376 <_dtoa_r+0x3de>
 800f2a0:	f1bb 0f00 	cmp.w	fp, #0
 800f2a4:	f340 80a0 	ble.w	800f3e8 <_dtoa_r+0x450>
 800f2a8:	49c1      	ldr	r1, [pc, #772]	; (800f5b0 <_dtoa_r+0x618>)
 800f2aa:	f00b 020f 	and.w	r2, fp, #15
 800f2ae:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800f2b2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800f2b6:	ed92 7b00 	vldr	d7, [r2]
 800f2ba:	ea4f 112b 	mov.w	r1, fp, asr #4
 800f2be:	f000 8087 	beq.w	800f3d0 <_dtoa_r+0x438>
 800f2c2:	4abc      	ldr	r2, [pc, #752]	; (800f5b4 <_dtoa_r+0x61c>)
 800f2c4:	ed92 6b08 	vldr	d6, [r2, #32]
 800f2c8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800f2cc:	ed8d 6b02 	vstr	d6, [sp, #8]
 800f2d0:	f001 010f 	and.w	r1, r1, #15
 800f2d4:	2203      	movs	r2, #3
 800f2d6:	48b7      	ldr	r0, [pc, #732]	; (800f5b4 <_dtoa_r+0x61c>)
 800f2d8:	2900      	cmp	r1, #0
 800f2da:	d17b      	bne.n	800f3d4 <_dtoa_r+0x43c>
 800f2dc:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f2e0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f2e4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f2e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f2ea:	2900      	cmp	r1, #0
 800f2ec:	f000 80a2 	beq.w	800f434 <_dtoa_r+0x49c>
 800f2f0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800f2f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f2f8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f2fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f300:	f140 8098 	bpl.w	800f434 <_dtoa_r+0x49c>
 800f304:	f1b9 0f00 	cmp.w	r9, #0
 800f308:	f000 8094 	beq.w	800f434 <_dtoa_r+0x49c>
 800f30c:	f1ba 0f00 	cmp.w	sl, #0
 800f310:	dd2f      	ble.n	800f372 <_dtoa_r+0x3da>
 800f312:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800f316:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f31a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f31e:	f10b 37ff 	add.w	r7, fp, #4294967295
 800f322:	3201      	adds	r2, #1
 800f324:	4650      	mov	r0, sl
 800f326:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f32a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800f32e:	ee07 2a90 	vmov	s15, r2
 800f332:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f336:	eea7 5b06 	vfma.f64	d5, d7, d6
 800f33a:	ee15 4a90 	vmov	r4, s11
 800f33e:	ec52 1b15 	vmov	r1, r2, d5
 800f342:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800f346:	2800      	cmp	r0, #0
 800f348:	d177      	bne.n	800f43a <_dtoa_r+0x4a2>
 800f34a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800f34e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f352:	ec42 1b17 	vmov	d7, r1, r2
 800f356:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f35a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f35e:	f300 8263 	bgt.w	800f828 <_dtoa_r+0x890>
 800f362:	eeb1 7b47 	vneg.f64	d7, d7
 800f366:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f36a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f36e:	f100 8258 	bmi.w	800f822 <_dtoa_r+0x88a>
 800f372:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f376:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f378:	2a00      	cmp	r2, #0
 800f37a:	f2c0 811d 	blt.w	800f5b8 <_dtoa_r+0x620>
 800f37e:	f1bb 0f0e 	cmp.w	fp, #14
 800f382:	f300 8119 	bgt.w	800f5b8 <_dtoa_r+0x620>
 800f386:	4b8a      	ldr	r3, [pc, #552]	; (800f5b0 <_dtoa_r+0x618>)
 800f388:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f38c:	ed93 6b00 	vldr	d6, [r3]
 800f390:	9b08      	ldr	r3, [sp, #32]
 800f392:	2b00      	cmp	r3, #0
 800f394:	f280 80b7 	bge.w	800f506 <_dtoa_r+0x56e>
 800f398:	f1b9 0f00 	cmp.w	r9, #0
 800f39c:	f300 80b3 	bgt.w	800f506 <_dtoa_r+0x56e>
 800f3a0:	f040 823f 	bne.w	800f822 <_dtoa_r+0x88a>
 800f3a4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800f3a8:	ee26 6b07 	vmul.f64	d6, d6, d7
 800f3ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f3b0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f3b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3b8:	464c      	mov	r4, r9
 800f3ba:	464f      	mov	r7, r9
 800f3bc:	f280 8215 	bge.w	800f7ea <_dtoa_r+0x852>
 800f3c0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f3c4:	2331      	movs	r3, #49	; 0x31
 800f3c6:	f808 3b01 	strb.w	r3, [r8], #1
 800f3ca:	f10b 0b01 	add.w	fp, fp, #1
 800f3ce:	e211      	b.n	800f7f4 <_dtoa_r+0x85c>
 800f3d0:	2202      	movs	r2, #2
 800f3d2:	e780      	b.n	800f2d6 <_dtoa_r+0x33e>
 800f3d4:	07cc      	lsls	r4, r1, #31
 800f3d6:	d504      	bpl.n	800f3e2 <_dtoa_r+0x44a>
 800f3d8:	ed90 6b00 	vldr	d6, [r0]
 800f3dc:	3201      	adds	r2, #1
 800f3de:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f3e2:	1049      	asrs	r1, r1, #1
 800f3e4:	3008      	adds	r0, #8
 800f3e6:	e777      	b.n	800f2d8 <_dtoa_r+0x340>
 800f3e8:	d022      	beq.n	800f430 <_dtoa_r+0x498>
 800f3ea:	f1cb 0100 	rsb	r1, fp, #0
 800f3ee:	4a70      	ldr	r2, [pc, #448]	; (800f5b0 <_dtoa_r+0x618>)
 800f3f0:	f001 000f 	and.w	r0, r1, #15
 800f3f4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800f3f8:	ed92 7b00 	vldr	d7, [r2]
 800f3fc:	ee28 7b07 	vmul.f64	d7, d8, d7
 800f400:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f404:	486b      	ldr	r0, [pc, #428]	; (800f5b4 <_dtoa_r+0x61c>)
 800f406:	1109      	asrs	r1, r1, #4
 800f408:	2400      	movs	r4, #0
 800f40a:	2202      	movs	r2, #2
 800f40c:	b929      	cbnz	r1, 800f41a <_dtoa_r+0x482>
 800f40e:	2c00      	cmp	r4, #0
 800f410:	f43f af6a 	beq.w	800f2e8 <_dtoa_r+0x350>
 800f414:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f418:	e766      	b.n	800f2e8 <_dtoa_r+0x350>
 800f41a:	07cf      	lsls	r7, r1, #31
 800f41c:	d505      	bpl.n	800f42a <_dtoa_r+0x492>
 800f41e:	ed90 6b00 	vldr	d6, [r0]
 800f422:	3201      	adds	r2, #1
 800f424:	2401      	movs	r4, #1
 800f426:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f42a:	1049      	asrs	r1, r1, #1
 800f42c:	3008      	adds	r0, #8
 800f42e:	e7ed      	b.n	800f40c <_dtoa_r+0x474>
 800f430:	2202      	movs	r2, #2
 800f432:	e759      	b.n	800f2e8 <_dtoa_r+0x350>
 800f434:	465f      	mov	r7, fp
 800f436:	4648      	mov	r0, r9
 800f438:	e775      	b.n	800f326 <_dtoa_r+0x38e>
 800f43a:	ec42 1b17 	vmov	d7, r1, r2
 800f43e:	4a5c      	ldr	r2, [pc, #368]	; (800f5b0 <_dtoa_r+0x618>)
 800f440:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800f444:	ed12 4b02 	vldr	d4, [r2, #-8]
 800f448:	9a01      	ldr	r2, [sp, #4]
 800f44a:	1814      	adds	r4, r2, r0
 800f44c:	9a07      	ldr	r2, [sp, #28]
 800f44e:	b352      	cbz	r2, 800f4a6 <_dtoa_r+0x50e>
 800f450:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800f454:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800f458:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f45c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800f460:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800f464:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f468:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f46c:	ee14 2a90 	vmov	r2, s9
 800f470:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f474:	3230      	adds	r2, #48	; 0x30
 800f476:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f47a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f47e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f482:	f808 2b01 	strb.w	r2, [r8], #1
 800f486:	d439      	bmi.n	800f4fc <_dtoa_r+0x564>
 800f488:	ee32 5b46 	vsub.f64	d5, d2, d6
 800f48c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800f490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f494:	d472      	bmi.n	800f57c <_dtoa_r+0x5e4>
 800f496:	45a0      	cmp	r8, r4
 800f498:	f43f af6b 	beq.w	800f372 <_dtoa_r+0x3da>
 800f49c:	ee27 7b03 	vmul.f64	d7, d7, d3
 800f4a0:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f4a4:	e7e0      	b.n	800f468 <_dtoa_r+0x4d0>
 800f4a6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f4aa:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f4ae:	4621      	mov	r1, r4
 800f4b0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800f4b4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f4b8:	ee14 2a90 	vmov	r2, s9
 800f4bc:	3230      	adds	r2, #48	; 0x30
 800f4be:	f808 2b01 	strb.w	r2, [r8], #1
 800f4c2:	45a0      	cmp	r8, r4
 800f4c4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f4c8:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f4cc:	d118      	bne.n	800f500 <_dtoa_r+0x568>
 800f4ce:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800f4d2:	ee37 4b05 	vadd.f64	d4, d7, d5
 800f4d6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800f4da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4de:	dc4d      	bgt.n	800f57c <_dtoa_r+0x5e4>
 800f4e0:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f4e4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f4e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4ec:	f57f af41 	bpl.w	800f372 <_dtoa_r+0x3da>
 800f4f0:	4688      	mov	r8, r1
 800f4f2:	3901      	subs	r1, #1
 800f4f4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800f4f8:	2b30      	cmp	r3, #48	; 0x30
 800f4fa:	d0f9      	beq.n	800f4f0 <_dtoa_r+0x558>
 800f4fc:	46bb      	mov	fp, r7
 800f4fe:	e02a      	b.n	800f556 <_dtoa_r+0x5be>
 800f500:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f504:	e7d6      	b.n	800f4b4 <_dtoa_r+0x51c>
 800f506:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f50a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800f50e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f512:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800f516:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800f51a:	ee15 3a10 	vmov	r3, s10
 800f51e:	3330      	adds	r3, #48	; 0x30
 800f520:	f808 3b01 	strb.w	r3, [r8], #1
 800f524:	9b01      	ldr	r3, [sp, #4]
 800f526:	eba8 0303 	sub.w	r3, r8, r3
 800f52a:	4599      	cmp	r9, r3
 800f52c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800f530:	eea3 7b46 	vfms.f64	d7, d3, d6
 800f534:	d133      	bne.n	800f59e <_dtoa_r+0x606>
 800f536:	ee37 7b07 	vadd.f64	d7, d7, d7
 800f53a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f53e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f542:	dc1a      	bgt.n	800f57a <_dtoa_r+0x5e2>
 800f544:	eeb4 7b46 	vcmp.f64	d7, d6
 800f548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f54c:	d103      	bne.n	800f556 <_dtoa_r+0x5be>
 800f54e:	ee15 3a10 	vmov	r3, s10
 800f552:	07d9      	lsls	r1, r3, #31
 800f554:	d411      	bmi.n	800f57a <_dtoa_r+0x5e2>
 800f556:	4629      	mov	r1, r5
 800f558:	4630      	mov	r0, r6
 800f55a:	f000 fe67 	bl	801022c <_Bfree>
 800f55e:	2300      	movs	r3, #0
 800f560:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f562:	f888 3000 	strb.w	r3, [r8]
 800f566:	f10b 0301 	add.w	r3, fp, #1
 800f56a:	6013      	str	r3, [r2, #0]
 800f56c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f56e:	2b00      	cmp	r3, #0
 800f570:	f43f ad61 	beq.w	800f036 <_dtoa_r+0x9e>
 800f574:	f8c3 8000 	str.w	r8, [r3]
 800f578:	e55d      	b.n	800f036 <_dtoa_r+0x9e>
 800f57a:	465f      	mov	r7, fp
 800f57c:	4643      	mov	r3, r8
 800f57e:	4698      	mov	r8, r3
 800f580:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f584:	2a39      	cmp	r2, #57	; 0x39
 800f586:	d106      	bne.n	800f596 <_dtoa_r+0x5fe>
 800f588:	9a01      	ldr	r2, [sp, #4]
 800f58a:	429a      	cmp	r2, r3
 800f58c:	d1f7      	bne.n	800f57e <_dtoa_r+0x5e6>
 800f58e:	9901      	ldr	r1, [sp, #4]
 800f590:	2230      	movs	r2, #48	; 0x30
 800f592:	3701      	adds	r7, #1
 800f594:	700a      	strb	r2, [r1, #0]
 800f596:	781a      	ldrb	r2, [r3, #0]
 800f598:	3201      	adds	r2, #1
 800f59a:	701a      	strb	r2, [r3, #0]
 800f59c:	e7ae      	b.n	800f4fc <_dtoa_r+0x564>
 800f59e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f5a2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f5a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5aa:	d1b2      	bne.n	800f512 <_dtoa_r+0x57a>
 800f5ac:	e7d3      	b.n	800f556 <_dtoa_r+0x5be>
 800f5ae:	bf00      	nop
 800f5b0:	08014da0 	.word	0x08014da0
 800f5b4:	08014d78 	.word	0x08014d78
 800f5b8:	9907      	ldr	r1, [sp, #28]
 800f5ba:	2900      	cmp	r1, #0
 800f5bc:	f000 80d0 	beq.w	800f760 <_dtoa_r+0x7c8>
 800f5c0:	9906      	ldr	r1, [sp, #24]
 800f5c2:	2901      	cmp	r1, #1
 800f5c4:	f300 80b4 	bgt.w	800f730 <_dtoa_r+0x798>
 800f5c8:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f5ca:	2900      	cmp	r1, #0
 800f5cc:	f000 80ac 	beq.w	800f728 <_dtoa_r+0x790>
 800f5d0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f5d4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800f5d8:	461c      	mov	r4, r3
 800f5da:	930a      	str	r3, [sp, #40]	; 0x28
 800f5dc:	9b04      	ldr	r3, [sp, #16]
 800f5de:	4413      	add	r3, r2
 800f5e0:	9304      	str	r3, [sp, #16]
 800f5e2:	9b05      	ldr	r3, [sp, #20]
 800f5e4:	2101      	movs	r1, #1
 800f5e6:	4413      	add	r3, r2
 800f5e8:	4630      	mov	r0, r6
 800f5ea:	9305      	str	r3, [sp, #20]
 800f5ec:	f000 ff20 	bl	8010430 <__i2b>
 800f5f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f5f2:	4607      	mov	r7, r0
 800f5f4:	f1b8 0f00 	cmp.w	r8, #0
 800f5f8:	dd0d      	ble.n	800f616 <_dtoa_r+0x67e>
 800f5fa:	9a05      	ldr	r2, [sp, #20]
 800f5fc:	2a00      	cmp	r2, #0
 800f5fe:	dd0a      	ble.n	800f616 <_dtoa_r+0x67e>
 800f600:	4542      	cmp	r2, r8
 800f602:	9904      	ldr	r1, [sp, #16]
 800f604:	bfa8      	it	ge
 800f606:	4642      	movge	r2, r8
 800f608:	1a89      	subs	r1, r1, r2
 800f60a:	9104      	str	r1, [sp, #16]
 800f60c:	9905      	ldr	r1, [sp, #20]
 800f60e:	eba8 0802 	sub.w	r8, r8, r2
 800f612:	1a8a      	subs	r2, r1, r2
 800f614:	9205      	str	r2, [sp, #20]
 800f616:	b303      	cbz	r3, 800f65a <_dtoa_r+0x6c2>
 800f618:	9a07      	ldr	r2, [sp, #28]
 800f61a:	2a00      	cmp	r2, #0
 800f61c:	f000 80a5 	beq.w	800f76a <_dtoa_r+0x7d2>
 800f620:	2c00      	cmp	r4, #0
 800f622:	dd13      	ble.n	800f64c <_dtoa_r+0x6b4>
 800f624:	4639      	mov	r1, r7
 800f626:	4622      	mov	r2, r4
 800f628:	4630      	mov	r0, r6
 800f62a:	930d      	str	r3, [sp, #52]	; 0x34
 800f62c:	f000 ffc0 	bl	80105b0 <__pow5mult>
 800f630:	462a      	mov	r2, r5
 800f632:	4601      	mov	r1, r0
 800f634:	4607      	mov	r7, r0
 800f636:	4630      	mov	r0, r6
 800f638:	f000 ff10 	bl	801045c <__multiply>
 800f63c:	4629      	mov	r1, r5
 800f63e:	900a      	str	r0, [sp, #40]	; 0x28
 800f640:	4630      	mov	r0, r6
 800f642:	f000 fdf3 	bl	801022c <_Bfree>
 800f646:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f648:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f64a:	4615      	mov	r5, r2
 800f64c:	1b1a      	subs	r2, r3, r4
 800f64e:	d004      	beq.n	800f65a <_dtoa_r+0x6c2>
 800f650:	4629      	mov	r1, r5
 800f652:	4630      	mov	r0, r6
 800f654:	f000 ffac 	bl	80105b0 <__pow5mult>
 800f658:	4605      	mov	r5, r0
 800f65a:	2101      	movs	r1, #1
 800f65c:	4630      	mov	r0, r6
 800f65e:	f000 fee7 	bl	8010430 <__i2b>
 800f662:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f664:	2b00      	cmp	r3, #0
 800f666:	4604      	mov	r4, r0
 800f668:	f340 8081 	ble.w	800f76e <_dtoa_r+0x7d6>
 800f66c:	461a      	mov	r2, r3
 800f66e:	4601      	mov	r1, r0
 800f670:	4630      	mov	r0, r6
 800f672:	f000 ff9d 	bl	80105b0 <__pow5mult>
 800f676:	9b06      	ldr	r3, [sp, #24]
 800f678:	2b01      	cmp	r3, #1
 800f67a:	4604      	mov	r4, r0
 800f67c:	dd7a      	ble.n	800f774 <_dtoa_r+0x7dc>
 800f67e:	2300      	movs	r3, #0
 800f680:	930a      	str	r3, [sp, #40]	; 0x28
 800f682:	6922      	ldr	r2, [r4, #16]
 800f684:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800f688:	6910      	ldr	r0, [r2, #16]
 800f68a:	f000 fe81 	bl	8010390 <__hi0bits>
 800f68e:	f1c0 0020 	rsb	r0, r0, #32
 800f692:	9b05      	ldr	r3, [sp, #20]
 800f694:	4418      	add	r0, r3
 800f696:	f010 001f 	ands.w	r0, r0, #31
 800f69a:	f000 808c 	beq.w	800f7b6 <_dtoa_r+0x81e>
 800f69e:	f1c0 0220 	rsb	r2, r0, #32
 800f6a2:	2a04      	cmp	r2, #4
 800f6a4:	f340 8085 	ble.w	800f7b2 <_dtoa_r+0x81a>
 800f6a8:	f1c0 001c 	rsb	r0, r0, #28
 800f6ac:	9b04      	ldr	r3, [sp, #16]
 800f6ae:	4403      	add	r3, r0
 800f6b0:	9304      	str	r3, [sp, #16]
 800f6b2:	9b05      	ldr	r3, [sp, #20]
 800f6b4:	4403      	add	r3, r0
 800f6b6:	4480      	add	r8, r0
 800f6b8:	9305      	str	r3, [sp, #20]
 800f6ba:	9b04      	ldr	r3, [sp, #16]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	dd05      	ble.n	800f6cc <_dtoa_r+0x734>
 800f6c0:	4629      	mov	r1, r5
 800f6c2:	461a      	mov	r2, r3
 800f6c4:	4630      	mov	r0, r6
 800f6c6:	f000 ffcd 	bl	8010664 <__lshift>
 800f6ca:	4605      	mov	r5, r0
 800f6cc:	9b05      	ldr	r3, [sp, #20]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	dd05      	ble.n	800f6de <_dtoa_r+0x746>
 800f6d2:	4621      	mov	r1, r4
 800f6d4:	461a      	mov	r2, r3
 800f6d6:	4630      	mov	r0, r6
 800f6d8:	f000 ffc4 	bl	8010664 <__lshift>
 800f6dc:	4604      	mov	r4, r0
 800f6de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d06a      	beq.n	800f7ba <_dtoa_r+0x822>
 800f6e4:	4621      	mov	r1, r4
 800f6e6:	4628      	mov	r0, r5
 800f6e8:	f001 f82c 	bl	8010744 <__mcmp>
 800f6ec:	2800      	cmp	r0, #0
 800f6ee:	da64      	bge.n	800f7ba <_dtoa_r+0x822>
 800f6f0:	2300      	movs	r3, #0
 800f6f2:	4629      	mov	r1, r5
 800f6f4:	220a      	movs	r2, #10
 800f6f6:	4630      	mov	r0, r6
 800f6f8:	f000 fdba 	bl	8010270 <__multadd>
 800f6fc:	9b07      	ldr	r3, [sp, #28]
 800f6fe:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f702:	4605      	mov	r5, r0
 800f704:	2b00      	cmp	r3, #0
 800f706:	f000 8191 	beq.w	800fa2c <_dtoa_r+0xa94>
 800f70a:	4639      	mov	r1, r7
 800f70c:	2300      	movs	r3, #0
 800f70e:	220a      	movs	r2, #10
 800f710:	4630      	mov	r0, r6
 800f712:	f000 fdad 	bl	8010270 <__multadd>
 800f716:	f1ba 0f00 	cmp.w	sl, #0
 800f71a:	4607      	mov	r7, r0
 800f71c:	f300 808d 	bgt.w	800f83a <_dtoa_r+0x8a2>
 800f720:	9b06      	ldr	r3, [sp, #24]
 800f722:	2b02      	cmp	r3, #2
 800f724:	dc50      	bgt.n	800f7c8 <_dtoa_r+0x830>
 800f726:	e088      	b.n	800f83a <_dtoa_r+0x8a2>
 800f728:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f72a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f72e:	e751      	b.n	800f5d4 <_dtoa_r+0x63c>
 800f730:	f109 34ff 	add.w	r4, r9, #4294967295
 800f734:	42a3      	cmp	r3, r4
 800f736:	bfbf      	itttt	lt
 800f738:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800f73a:	1ae3      	sublt	r3, r4, r3
 800f73c:	18d2      	addlt	r2, r2, r3
 800f73e:	9209      	strlt	r2, [sp, #36]	; 0x24
 800f740:	bfb6      	itet	lt
 800f742:	4623      	movlt	r3, r4
 800f744:	1b1c      	subge	r4, r3, r4
 800f746:	2400      	movlt	r4, #0
 800f748:	f1b9 0f00 	cmp.w	r9, #0
 800f74c:	bfb5      	itete	lt
 800f74e:	9a04      	ldrlt	r2, [sp, #16]
 800f750:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800f754:	eba2 0809 	sublt.w	r8, r2, r9
 800f758:	464a      	movge	r2, r9
 800f75a:	bfb8      	it	lt
 800f75c:	2200      	movlt	r2, #0
 800f75e:	e73c      	b.n	800f5da <_dtoa_r+0x642>
 800f760:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800f764:	9f07      	ldr	r7, [sp, #28]
 800f766:	461c      	mov	r4, r3
 800f768:	e744      	b.n	800f5f4 <_dtoa_r+0x65c>
 800f76a:	461a      	mov	r2, r3
 800f76c:	e770      	b.n	800f650 <_dtoa_r+0x6b8>
 800f76e:	9b06      	ldr	r3, [sp, #24]
 800f770:	2b01      	cmp	r3, #1
 800f772:	dc18      	bgt.n	800f7a6 <_dtoa_r+0x80e>
 800f774:	9b02      	ldr	r3, [sp, #8]
 800f776:	b9b3      	cbnz	r3, 800f7a6 <_dtoa_r+0x80e>
 800f778:	9b03      	ldr	r3, [sp, #12]
 800f77a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800f77e:	b9a2      	cbnz	r2, 800f7aa <_dtoa_r+0x812>
 800f780:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800f784:	0d12      	lsrs	r2, r2, #20
 800f786:	0512      	lsls	r2, r2, #20
 800f788:	b18a      	cbz	r2, 800f7ae <_dtoa_r+0x816>
 800f78a:	9b04      	ldr	r3, [sp, #16]
 800f78c:	3301      	adds	r3, #1
 800f78e:	9304      	str	r3, [sp, #16]
 800f790:	9b05      	ldr	r3, [sp, #20]
 800f792:	3301      	adds	r3, #1
 800f794:	9305      	str	r3, [sp, #20]
 800f796:	2301      	movs	r3, #1
 800f798:	930a      	str	r3, [sp, #40]	; 0x28
 800f79a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	f47f af70 	bne.w	800f682 <_dtoa_r+0x6ea>
 800f7a2:	2001      	movs	r0, #1
 800f7a4:	e775      	b.n	800f692 <_dtoa_r+0x6fa>
 800f7a6:	2300      	movs	r3, #0
 800f7a8:	e7f6      	b.n	800f798 <_dtoa_r+0x800>
 800f7aa:	9b02      	ldr	r3, [sp, #8]
 800f7ac:	e7f4      	b.n	800f798 <_dtoa_r+0x800>
 800f7ae:	920a      	str	r2, [sp, #40]	; 0x28
 800f7b0:	e7f3      	b.n	800f79a <_dtoa_r+0x802>
 800f7b2:	d082      	beq.n	800f6ba <_dtoa_r+0x722>
 800f7b4:	4610      	mov	r0, r2
 800f7b6:	301c      	adds	r0, #28
 800f7b8:	e778      	b.n	800f6ac <_dtoa_r+0x714>
 800f7ba:	f1b9 0f00 	cmp.w	r9, #0
 800f7be:	dc37      	bgt.n	800f830 <_dtoa_r+0x898>
 800f7c0:	9b06      	ldr	r3, [sp, #24]
 800f7c2:	2b02      	cmp	r3, #2
 800f7c4:	dd34      	ble.n	800f830 <_dtoa_r+0x898>
 800f7c6:	46ca      	mov	sl, r9
 800f7c8:	f1ba 0f00 	cmp.w	sl, #0
 800f7cc:	d10d      	bne.n	800f7ea <_dtoa_r+0x852>
 800f7ce:	4621      	mov	r1, r4
 800f7d0:	4653      	mov	r3, sl
 800f7d2:	2205      	movs	r2, #5
 800f7d4:	4630      	mov	r0, r6
 800f7d6:	f000 fd4b 	bl	8010270 <__multadd>
 800f7da:	4601      	mov	r1, r0
 800f7dc:	4604      	mov	r4, r0
 800f7de:	4628      	mov	r0, r5
 800f7e0:	f000 ffb0 	bl	8010744 <__mcmp>
 800f7e4:	2800      	cmp	r0, #0
 800f7e6:	f73f adeb 	bgt.w	800f3c0 <_dtoa_r+0x428>
 800f7ea:	9b08      	ldr	r3, [sp, #32]
 800f7ec:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f7f0:	ea6f 0b03 	mvn.w	fp, r3
 800f7f4:	f04f 0900 	mov.w	r9, #0
 800f7f8:	4621      	mov	r1, r4
 800f7fa:	4630      	mov	r0, r6
 800f7fc:	f000 fd16 	bl	801022c <_Bfree>
 800f800:	2f00      	cmp	r7, #0
 800f802:	f43f aea8 	beq.w	800f556 <_dtoa_r+0x5be>
 800f806:	f1b9 0f00 	cmp.w	r9, #0
 800f80a:	d005      	beq.n	800f818 <_dtoa_r+0x880>
 800f80c:	45b9      	cmp	r9, r7
 800f80e:	d003      	beq.n	800f818 <_dtoa_r+0x880>
 800f810:	4649      	mov	r1, r9
 800f812:	4630      	mov	r0, r6
 800f814:	f000 fd0a 	bl	801022c <_Bfree>
 800f818:	4639      	mov	r1, r7
 800f81a:	4630      	mov	r0, r6
 800f81c:	f000 fd06 	bl	801022c <_Bfree>
 800f820:	e699      	b.n	800f556 <_dtoa_r+0x5be>
 800f822:	2400      	movs	r4, #0
 800f824:	4627      	mov	r7, r4
 800f826:	e7e0      	b.n	800f7ea <_dtoa_r+0x852>
 800f828:	46bb      	mov	fp, r7
 800f82a:	4604      	mov	r4, r0
 800f82c:	4607      	mov	r7, r0
 800f82e:	e5c7      	b.n	800f3c0 <_dtoa_r+0x428>
 800f830:	9b07      	ldr	r3, [sp, #28]
 800f832:	46ca      	mov	sl, r9
 800f834:	2b00      	cmp	r3, #0
 800f836:	f000 8100 	beq.w	800fa3a <_dtoa_r+0xaa2>
 800f83a:	f1b8 0f00 	cmp.w	r8, #0
 800f83e:	dd05      	ble.n	800f84c <_dtoa_r+0x8b4>
 800f840:	4639      	mov	r1, r7
 800f842:	4642      	mov	r2, r8
 800f844:	4630      	mov	r0, r6
 800f846:	f000 ff0d 	bl	8010664 <__lshift>
 800f84a:	4607      	mov	r7, r0
 800f84c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d05d      	beq.n	800f90e <_dtoa_r+0x976>
 800f852:	6879      	ldr	r1, [r7, #4]
 800f854:	4630      	mov	r0, r6
 800f856:	f000 fca9 	bl	80101ac <_Balloc>
 800f85a:	4680      	mov	r8, r0
 800f85c:	b928      	cbnz	r0, 800f86a <_dtoa_r+0x8d2>
 800f85e:	4b82      	ldr	r3, [pc, #520]	; (800fa68 <_dtoa_r+0xad0>)
 800f860:	4602      	mov	r2, r0
 800f862:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f866:	f7ff bbaf 	b.w	800efc8 <_dtoa_r+0x30>
 800f86a:	693a      	ldr	r2, [r7, #16]
 800f86c:	3202      	adds	r2, #2
 800f86e:	0092      	lsls	r2, r2, #2
 800f870:	f107 010c 	add.w	r1, r7, #12
 800f874:	300c      	adds	r0, #12
 800f876:	f000 fc8b 	bl	8010190 <memcpy>
 800f87a:	2201      	movs	r2, #1
 800f87c:	4641      	mov	r1, r8
 800f87e:	4630      	mov	r0, r6
 800f880:	f000 fef0 	bl	8010664 <__lshift>
 800f884:	9b01      	ldr	r3, [sp, #4]
 800f886:	3301      	adds	r3, #1
 800f888:	9304      	str	r3, [sp, #16]
 800f88a:	9b01      	ldr	r3, [sp, #4]
 800f88c:	4453      	add	r3, sl
 800f88e:	9308      	str	r3, [sp, #32]
 800f890:	9b02      	ldr	r3, [sp, #8]
 800f892:	f003 0301 	and.w	r3, r3, #1
 800f896:	46b9      	mov	r9, r7
 800f898:	9307      	str	r3, [sp, #28]
 800f89a:	4607      	mov	r7, r0
 800f89c:	9b04      	ldr	r3, [sp, #16]
 800f89e:	4621      	mov	r1, r4
 800f8a0:	3b01      	subs	r3, #1
 800f8a2:	4628      	mov	r0, r5
 800f8a4:	9302      	str	r3, [sp, #8]
 800f8a6:	f7ff faeb 	bl	800ee80 <quorem>
 800f8aa:	4603      	mov	r3, r0
 800f8ac:	3330      	adds	r3, #48	; 0x30
 800f8ae:	9005      	str	r0, [sp, #20]
 800f8b0:	4649      	mov	r1, r9
 800f8b2:	4628      	mov	r0, r5
 800f8b4:	9309      	str	r3, [sp, #36]	; 0x24
 800f8b6:	f000 ff45 	bl	8010744 <__mcmp>
 800f8ba:	463a      	mov	r2, r7
 800f8bc:	4682      	mov	sl, r0
 800f8be:	4621      	mov	r1, r4
 800f8c0:	4630      	mov	r0, r6
 800f8c2:	f000 ff5b 	bl	801077c <__mdiff>
 800f8c6:	68c2      	ldr	r2, [r0, #12]
 800f8c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8ca:	4680      	mov	r8, r0
 800f8cc:	bb0a      	cbnz	r2, 800f912 <_dtoa_r+0x97a>
 800f8ce:	4601      	mov	r1, r0
 800f8d0:	4628      	mov	r0, r5
 800f8d2:	f000 ff37 	bl	8010744 <__mcmp>
 800f8d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8d8:	4602      	mov	r2, r0
 800f8da:	4641      	mov	r1, r8
 800f8dc:	4630      	mov	r0, r6
 800f8de:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800f8e2:	f000 fca3 	bl	801022c <_Bfree>
 800f8e6:	9b06      	ldr	r3, [sp, #24]
 800f8e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f8ea:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800f8ee:	ea43 0102 	orr.w	r1, r3, r2
 800f8f2:	9b07      	ldr	r3, [sp, #28]
 800f8f4:	430b      	orrs	r3, r1
 800f8f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8f8:	d10d      	bne.n	800f916 <_dtoa_r+0x97e>
 800f8fa:	2b39      	cmp	r3, #57	; 0x39
 800f8fc:	d029      	beq.n	800f952 <_dtoa_r+0x9ba>
 800f8fe:	f1ba 0f00 	cmp.w	sl, #0
 800f902:	dd01      	ble.n	800f908 <_dtoa_r+0x970>
 800f904:	9b05      	ldr	r3, [sp, #20]
 800f906:	3331      	adds	r3, #49	; 0x31
 800f908:	9a02      	ldr	r2, [sp, #8]
 800f90a:	7013      	strb	r3, [r2, #0]
 800f90c:	e774      	b.n	800f7f8 <_dtoa_r+0x860>
 800f90e:	4638      	mov	r0, r7
 800f910:	e7b8      	b.n	800f884 <_dtoa_r+0x8ec>
 800f912:	2201      	movs	r2, #1
 800f914:	e7e1      	b.n	800f8da <_dtoa_r+0x942>
 800f916:	f1ba 0f00 	cmp.w	sl, #0
 800f91a:	db06      	blt.n	800f92a <_dtoa_r+0x992>
 800f91c:	9906      	ldr	r1, [sp, #24]
 800f91e:	ea41 0a0a 	orr.w	sl, r1, sl
 800f922:	9907      	ldr	r1, [sp, #28]
 800f924:	ea5a 0101 	orrs.w	r1, sl, r1
 800f928:	d120      	bne.n	800f96c <_dtoa_r+0x9d4>
 800f92a:	2a00      	cmp	r2, #0
 800f92c:	ddec      	ble.n	800f908 <_dtoa_r+0x970>
 800f92e:	4629      	mov	r1, r5
 800f930:	2201      	movs	r2, #1
 800f932:	4630      	mov	r0, r6
 800f934:	9304      	str	r3, [sp, #16]
 800f936:	f000 fe95 	bl	8010664 <__lshift>
 800f93a:	4621      	mov	r1, r4
 800f93c:	4605      	mov	r5, r0
 800f93e:	f000 ff01 	bl	8010744 <__mcmp>
 800f942:	2800      	cmp	r0, #0
 800f944:	9b04      	ldr	r3, [sp, #16]
 800f946:	dc02      	bgt.n	800f94e <_dtoa_r+0x9b6>
 800f948:	d1de      	bne.n	800f908 <_dtoa_r+0x970>
 800f94a:	07da      	lsls	r2, r3, #31
 800f94c:	d5dc      	bpl.n	800f908 <_dtoa_r+0x970>
 800f94e:	2b39      	cmp	r3, #57	; 0x39
 800f950:	d1d8      	bne.n	800f904 <_dtoa_r+0x96c>
 800f952:	9a02      	ldr	r2, [sp, #8]
 800f954:	2339      	movs	r3, #57	; 0x39
 800f956:	7013      	strb	r3, [r2, #0]
 800f958:	4643      	mov	r3, r8
 800f95a:	4698      	mov	r8, r3
 800f95c:	3b01      	subs	r3, #1
 800f95e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800f962:	2a39      	cmp	r2, #57	; 0x39
 800f964:	d051      	beq.n	800fa0a <_dtoa_r+0xa72>
 800f966:	3201      	adds	r2, #1
 800f968:	701a      	strb	r2, [r3, #0]
 800f96a:	e745      	b.n	800f7f8 <_dtoa_r+0x860>
 800f96c:	2a00      	cmp	r2, #0
 800f96e:	dd03      	ble.n	800f978 <_dtoa_r+0x9e0>
 800f970:	2b39      	cmp	r3, #57	; 0x39
 800f972:	d0ee      	beq.n	800f952 <_dtoa_r+0x9ba>
 800f974:	3301      	adds	r3, #1
 800f976:	e7c7      	b.n	800f908 <_dtoa_r+0x970>
 800f978:	9a04      	ldr	r2, [sp, #16]
 800f97a:	9908      	ldr	r1, [sp, #32]
 800f97c:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f980:	428a      	cmp	r2, r1
 800f982:	d02b      	beq.n	800f9dc <_dtoa_r+0xa44>
 800f984:	4629      	mov	r1, r5
 800f986:	2300      	movs	r3, #0
 800f988:	220a      	movs	r2, #10
 800f98a:	4630      	mov	r0, r6
 800f98c:	f000 fc70 	bl	8010270 <__multadd>
 800f990:	45b9      	cmp	r9, r7
 800f992:	4605      	mov	r5, r0
 800f994:	f04f 0300 	mov.w	r3, #0
 800f998:	f04f 020a 	mov.w	r2, #10
 800f99c:	4649      	mov	r1, r9
 800f99e:	4630      	mov	r0, r6
 800f9a0:	d107      	bne.n	800f9b2 <_dtoa_r+0xa1a>
 800f9a2:	f000 fc65 	bl	8010270 <__multadd>
 800f9a6:	4681      	mov	r9, r0
 800f9a8:	4607      	mov	r7, r0
 800f9aa:	9b04      	ldr	r3, [sp, #16]
 800f9ac:	3301      	adds	r3, #1
 800f9ae:	9304      	str	r3, [sp, #16]
 800f9b0:	e774      	b.n	800f89c <_dtoa_r+0x904>
 800f9b2:	f000 fc5d 	bl	8010270 <__multadd>
 800f9b6:	4639      	mov	r1, r7
 800f9b8:	4681      	mov	r9, r0
 800f9ba:	2300      	movs	r3, #0
 800f9bc:	220a      	movs	r2, #10
 800f9be:	4630      	mov	r0, r6
 800f9c0:	f000 fc56 	bl	8010270 <__multadd>
 800f9c4:	4607      	mov	r7, r0
 800f9c6:	e7f0      	b.n	800f9aa <_dtoa_r+0xa12>
 800f9c8:	f1ba 0f00 	cmp.w	sl, #0
 800f9cc:	9a01      	ldr	r2, [sp, #4]
 800f9ce:	bfcc      	ite	gt
 800f9d0:	46d0      	movgt	r8, sl
 800f9d2:	f04f 0801 	movle.w	r8, #1
 800f9d6:	4490      	add	r8, r2
 800f9d8:	f04f 0900 	mov.w	r9, #0
 800f9dc:	4629      	mov	r1, r5
 800f9de:	2201      	movs	r2, #1
 800f9e0:	4630      	mov	r0, r6
 800f9e2:	9302      	str	r3, [sp, #8]
 800f9e4:	f000 fe3e 	bl	8010664 <__lshift>
 800f9e8:	4621      	mov	r1, r4
 800f9ea:	4605      	mov	r5, r0
 800f9ec:	f000 feaa 	bl	8010744 <__mcmp>
 800f9f0:	2800      	cmp	r0, #0
 800f9f2:	dcb1      	bgt.n	800f958 <_dtoa_r+0x9c0>
 800f9f4:	d102      	bne.n	800f9fc <_dtoa_r+0xa64>
 800f9f6:	9b02      	ldr	r3, [sp, #8]
 800f9f8:	07db      	lsls	r3, r3, #31
 800f9fa:	d4ad      	bmi.n	800f958 <_dtoa_r+0x9c0>
 800f9fc:	4643      	mov	r3, r8
 800f9fe:	4698      	mov	r8, r3
 800fa00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fa04:	2a30      	cmp	r2, #48	; 0x30
 800fa06:	d0fa      	beq.n	800f9fe <_dtoa_r+0xa66>
 800fa08:	e6f6      	b.n	800f7f8 <_dtoa_r+0x860>
 800fa0a:	9a01      	ldr	r2, [sp, #4]
 800fa0c:	429a      	cmp	r2, r3
 800fa0e:	d1a4      	bne.n	800f95a <_dtoa_r+0x9c2>
 800fa10:	f10b 0b01 	add.w	fp, fp, #1
 800fa14:	2331      	movs	r3, #49	; 0x31
 800fa16:	e778      	b.n	800f90a <_dtoa_r+0x972>
 800fa18:	4b14      	ldr	r3, [pc, #80]	; (800fa6c <_dtoa_r+0xad4>)
 800fa1a:	f7ff bb27 	b.w	800f06c <_dtoa_r+0xd4>
 800fa1e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	f47f ab03 	bne.w	800f02c <_dtoa_r+0x94>
 800fa26:	4b12      	ldr	r3, [pc, #72]	; (800fa70 <_dtoa_r+0xad8>)
 800fa28:	f7ff bb20 	b.w	800f06c <_dtoa_r+0xd4>
 800fa2c:	f1ba 0f00 	cmp.w	sl, #0
 800fa30:	dc03      	bgt.n	800fa3a <_dtoa_r+0xaa2>
 800fa32:	9b06      	ldr	r3, [sp, #24]
 800fa34:	2b02      	cmp	r3, #2
 800fa36:	f73f aec7 	bgt.w	800f7c8 <_dtoa_r+0x830>
 800fa3a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800fa3e:	4621      	mov	r1, r4
 800fa40:	4628      	mov	r0, r5
 800fa42:	f7ff fa1d 	bl	800ee80 <quorem>
 800fa46:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800fa4a:	f808 3b01 	strb.w	r3, [r8], #1
 800fa4e:	9a01      	ldr	r2, [sp, #4]
 800fa50:	eba8 0202 	sub.w	r2, r8, r2
 800fa54:	4592      	cmp	sl, r2
 800fa56:	ddb7      	ble.n	800f9c8 <_dtoa_r+0xa30>
 800fa58:	4629      	mov	r1, r5
 800fa5a:	2300      	movs	r3, #0
 800fa5c:	220a      	movs	r2, #10
 800fa5e:	4630      	mov	r0, r6
 800fa60:	f000 fc06 	bl	8010270 <__multadd>
 800fa64:	4605      	mov	r5, r0
 800fa66:	e7ea      	b.n	800fa3e <_dtoa_r+0xaa6>
 800fa68:	08014c90 	.word	0x08014c90
 800fa6c:	08014a94 	.word	0x08014a94
 800fa70:	08014c11 	.word	0x08014c11

0800fa74 <rshift>:
 800fa74:	6903      	ldr	r3, [r0, #16]
 800fa76:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800fa7a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fa7e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800fa82:	f100 0414 	add.w	r4, r0, #20
 800fa86:	dd45      	ble.n	800fb14 <rshift+0xa0>
 800fa88:	f011 011f 	ands.w	r1, r1, #31
 800fa8c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800fa90:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800fa94:	d10c      	bne.n	800fab0 <rshift+0x3c>
 800fa96:	f100 0710 	add.w	r7, r0, #16
 800fa9a:	4629      	mov	r1, r5
 800fa9c:	42b1      	cmp	r1, r6
 800fa9e:	d334      	bcc.n	800fb0a <rshift+0x96>
 800faa0:	1a9b      	subs	r3, r3, r2
 800faa2:	009b      	lsls	r3, r3, #2
 800faa4:	1eea      	subs	r2, r5, #3
 800faa6:	4296      	cmp	r6, r2
 800faa8:	bf38      	it	cc
 800faaa:	2300      	movcc	r3, #0
 800faac:	4423      	add	r3, r4
 800faae:	e015      	b.n	800fadc <rshift+0x68>
 800fab0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800fab4:	f1c1 0820 	rsb	r8, r1, #32
 800fab8:	40cf      	lsrs	r7, r1
 800faba:	f105 0e04 	add.w	lr, r5, #4
 800fabe:	46a1      	mov	r9, r4
 800fac0:	4576      	cmp	r6, lr
 800fac2:	46f4      	mov	ip, lr
 800fac4:	d815      	bhi.n	800faf2 <rshift+0x7e>
 800fac6:	1a9a      	subs	r2, r3, r2
 800fac8:	0092      	lsls	r2, r2, #2
 800faca:	3a04      	subs	r2, #4
 800facc:	3501      	adds	r5, #1
 800face:	42ae      	cmp	r6, r5
 800fad0:	bf38      	it	cc
 800fad2:	2200      	movcc	r2, #0
 800fad4:	18a3      	adds	r3, r4, r2
 800fad6:	50a7      	str	r7, [r4, r2]
 800fad8:	b107      	cbz	r7, 800fadc <rshift+0x68>
 800fada:	3304      	adds	r3, #4
 800fadc:	1b1a      	subs	r2, r3, r4
 800fade:	42a3      	cmp	r3, r4
 800fae0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fae4:	bf08      	it	eq
 800fae6:	2300      	moveq	r3, #0
 800fae8:	6102      	str	r2, [r0, #16]
 800faea:	bf08      	it	eq
 800faec:	6143      	streq	r3, [r0, #20]
 800faee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800faf2:	f8dc c000 	ldr.w	ip, [ip]
 800faf6:	fa0c fc08 	lsl.w	ip, ip, r8
 800fafa:	ea4c 0707 	orr.w	r7, ip, r7
 800fafe:	f849 7b04 	str.w	r7, [r9], #4
 800fb02:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fb06:	40cf      	lsrs	r7, r1
 800fb08:	e7da      	b.n	800fac0 <rshift+0x4c>
 800fb0a:	f851 cb04 	ldr.w	ip, [r1], #4
 800fb0e:	f847 cf04 	str.w	ip, [r7, #4]!
 800fb12:	e7c3      	b.n	800fa9c <rshift+0x28>
 800fb14:	4623      	mov	r3, r4
 800fb16:	e7e1      	b.n	800fadc <rshift+0x68>

0800fb18 <__hexdig_fun>:
 800fb18:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800fb1c:	2b09      	cmp	r3, #9
 800fb1e:	d802      	bhi.n	800fb26 <__hexdig_fun+0xe>
 800fb20:	3820      	subs	r0, #32
 800fb22:	b2c0      	uxtb	r0, r0
 800fb24:	4770      	bx	lr
 800fb26:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800fb2a:	2b05      	cmp	r3, #5
 800fb2c:	d801      	bhi.n	800fb32 <__hexdig_fun+0x1a>
 800fb2e:	3847      	subs	r0, #71	; 0x47
 800fb30:	e7f7      	b.n	800fb22 <__hexdig_fun+0xa>
 800fb32:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800fb36:	2b05      	cmp	r3, #5
 800fb38:	d801      	bhi.n	800fb3e <__hexdig_fun+0x26>
 800fb3a:	3827      	subs	r0, #39	; 0x27
 800fb3c:	e7f1      	b.n	800fb22 <__hexdig_fun+0xa>
 800fb3e:	2000      	movs	r0, #0
 800fb40:	4770      	bx	lr
	...

0800fb44 <__gethex>:
 800fb44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb48:	ed2d 8b02 	vpush	{d8}
 800fb4c:	b089      	sub	sp, #36	; 0x24
 800fb4e:	ee08 0a10 	vmov	s16, r0
 800fb52:	9304      	str	r3, [sp, #16]
 800fb54:	4bb4      	ldr	r3, [pc, #720]	; (800fe28 <__gethex+0x2e4>)
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	9301      	str	r3, [sp, #4]
 800fb5a:	4618      	mov	r0, r3
 800fb5c:	468b      	mov	fp, r1
 800fb5e:	4690      	mov	r8, r2
 800fb60:	f7f0 fc1e 	bl	80003a0 <strlen>
 800fb64:	9b01      	ldr	r3, [sp, #4]
 800fb66:	f8db 2000 	ldr.w	r2, [fp]
 800fb6a:	4403      	add	r3, r0
 800fb6c:	4682      	mov	sl, r0
 800fb6e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800fb72:	9305      	str	r3, [sp, #20]
 800fb74:	1c93      	adds	r3, r2, #2
 800fb76:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800fb7a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800fb7e:	32fe      	adds	r2, #254	; 0xfe
 800fb80:	18d1      	adds	r1, r2, r3
 800fb82:	461f      	mov	r7, r3
 800fb84:	f813 0b01 	ldrb.w	r0, [r3], #1
 800fb88:	9100      	str	r1, [sp, #0]
 800fb8a:	2830      	cmp	r0, #48	; 0x30
 800fb8c:	d0f8      	beq.n	800fb80 <__gethex+0x3c>
 800fb8e:	f7ff ffc3 	bl	800fb18 <__hexdig_fun>
 800fb92:	4604      	mov	r4, r0
 800fb94:	2800      	cmp	r0, #0
 800fb96:	d13a      	bne.n	800fc0e <__gethex+0xca>
 800fb98:	9901      	ldr	r1, [sp, #4]
 800fb9a:	4652      	mov	r2, sl
 800fb9c:	4638      	mov	r0, r7
 800fb9e:	f001 fa2f 	bl	8011000 <strncmp>
 800fba2:	4605      	mov	r5, r0
 800fba4:	2800      	cmp	r0, #0
 800fba6:	d168      	bne.n	800fc7a <__gethex+0x136>
 800fba8:	f817 000a 	ldrb.w	r0, [r7, sl]
 800fbac:	eb07 060a 	add.w	r6, r7, sl
 800fbb0:	f7ff ffb2 	bl	800fb18 <__hexdig_fun>
 800fbb4:	2800      	cmp	r0, #0
 800fbb6:	d062      	beq.n	800fc7e <__gethex+0x13a>
 800fbb8:	4633      	mov	r3, r6
 800fbba:	7818      	ldrb	r0, [r3, #0]
 800fbbc:	2830      	cmp	r0, #48	; 0x30
 800fbbe:	461f      	mov	r7, r3
 800fbc0:	f103 0301 	add.w	r3, r3, #1
 800fbc4:	d0f9      	beq.n	800fbba <__gethex+0x76>
 800fbc6:	f7ff ffa7 	bl	800fb18 <__hexdig_fun>
 800fbca:	2301      	movs	r3, #1
 800fbcc:	fab0 f480 	clz	r4, r0
 800fbd0:	0964      	lsrs	r4, r4, #5
 800fbd2:	4635      	mov	r5, r6
 800fbd4:	9300      	str	r3, [sp, #0]
 800fbd6:	463a      	mov	r2, r7
 800fbd8:	4616      	mov	r6, r2
 800fbda:	3201      	adds	r2, #1
 800fbdc:	7830      	ldrb	r0, [r6, #0]
 800fbde:	f7ff ff9b 	bl	800fb18 <__hexdig_fun>
 800fbe2:	2800      	cmp	r0, #0
 800fbe4:	d1f8      	bne.n	800fbd8 <__gethex+0x94>
 800fbe6:	9901      	ldr	r1, [sp, #4]
 800fbe8:	4652      	mov	r2, sl
 800fbea:	4630      	mov	r0, r6
 800fbec:	f001 fa08 	bl	8011000 <strncmp>
 800fbf0:	b980      	cbnz	r0, 800fc14 <__gethex+0xd0>
 800fbf2:	b94d      	cbnz	r5, 800fc08 <__gethex+0xc4>
 800fbf4:	eb06 050a 	add.w	r5, r6, sl
 800fbf8:	462a      	mov	r2, r5
 800fbfa:	4616      	mov	r6, r2
 800fbfc:	3201      	adds	r2, #1
 800fbfe:	7830      	ldrb	r0, [r6, #0]
 800fc00:	f7ff ff8a 	bl	800fb18 <__hexdig_fun>
 800fc04:	2800      	cmp	r0, #0
 800fc06:	d1f8      	bne.n	800fbfa <__gethex+0xb6>
 800fc08:	1bad      	subs	r5, r5, r6
 800fc0a:	00ad      	lsls	r5, r5, #2
 800fc0c:	e004      	b.n	800fc18 <__gethex+0xd4>
 800fc0e:	2400      	movs	r4, #0
 800fc10:	4625      	mov	r5, r4
 800fc12:	e7e0      	b.n	800fbd6 <__gethex+0x92>
 800fc14:	2d00      	cmp	r5, #0
 800fc16:	d1f7      	bne.n	800fc08 <__gethex+0xc4>
 800fc18:	7833      	ldrb	r3, [r6, #0]
 800fc1a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800fc1e:	2b50      	cmp	r3, #80	; 0x50
 800fc20:	d13b      	bne.n	800fc9a <__gethex+0x156>
 800fc22:	7873      	ldrb	r3, [r6, #1]
 800fc24:	2b2b      	cmp	r3, #43	; 0x2b
 800fc26:	d02c      	beq.n	800fc82 <__gethex+0x13e>
 800fc28:	2b2d      	cmp	r3, #45	; 0x2d
 800fc2a:	d02e      	beq.n	800fc8a <__gethex+0x146>
 800fc2c:	1c71      	adds	r1, r6, #1
 800fc2e:	f04f 0900 	mov.w	r9, #0
 800fc32:	7808      	ldrb	r0, [r1, #0]
 800fc34:	f7ff ff70 	bl	800fb18 <__hexdig_fun>
 800fc38:	1e43      	subs	r3, r0, #1
 800fc3a:	b2db      	uxtb	r3, r3
 800fc3c:	2b18      	cmp	r3, #24
 800fc3e:	d82c      	bhi.n	800fc9a <__gethex+0x156>
 800fc40:	f1a0 0210 	sub.w	r2, r0, #16
 800fc44:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fc48:	f7ff ff66 	bl	800fb18 <__hexdig_fun>
 800fc4c:	1e43      	subs	r3, r0, #1
 800fc4e:	b2db      	uxtb	r3, r3
 800fc50:	2b18      	cmp	r3, #24
 800fc52:	d91d      	bls.n	800fc90 <__gethex+0x14c>
 800fc54:	f1b9 0f00 	cmp.w	r9, #0
 800fc58:	d000      	beq.n	800fc5c <__gethex+0x118>
 800fc5a:	4252      	negs	r2, r2
 800fc5c:	4415      	add	r5, r2
 800fc5e:	f8cb 1000 	str.w	r1, [fp]
 800fc62:	b1e4      	cbz	r4, 800fc9e <__gethex+0x15a>
 800fc64:	9b00      	ldr	r3, [sp, #0]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	bf14      	ite	ne
 800fc6a:	2700      	movne	r7, #0
 800fc6c:	2706      	moveq	r7, #6
 800fc6e:	4638      	mov	r0, r7
 800fc70:	b009      	add	sp, #36	; 0x24
 800fc72:	ecbd 8b02 	vpop	{d8}
 800fc76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc7a:	463e      	mov	r6, r7
 800fc7c:	4625      	mov	r5, r4
 800fc7e:	2401      	movs	r4, #1
 800fc80:	e7ca      	b.n	800fc18 <__gethex+0xd4>
 800fc82:	f04f 0900 	mov.w	r9, #0
 800fc86:	1cb1      	adds	r1, r6, #2
 800fc88:	e7d3      	b.n	800fc32 <__gethex+0xee>
 800fc8a:	f04f 0901 	mov.w	r9, #1
 800fc8e:	e7fa      	b.n	800fc86 <__gethex+0x142>
 800fc90:	230a      	movs	r3, #10
 800fc92:	fb03 0202 	mla	r2, r3, r2, r0
 800fc96:	3a10      	subs	r2, #16
 800fc98:	e7d4      	b.n	800fc44 <__gethex+0x100>
 800fc9a:	4631      	mov	r1, r6
 800fc9c:	e7df      	b.n	800fc5e <__gethex+0x11a>
 800fc9e:	1bf3      	subs	r3, r6, r7
 800fca0:	3b01      	subs	r3, #1
 800fca2:	4621      	mov	r1, r4
 800fca4:	2b07      	cmp	r3, #7
 800fca6:	dc0b      	bgt.n	800fcc0 <__gethex+0x17c>
 800fca8:	ee18 0a10 	vmov	r0, s16
 800fcac:	f000 fa7e 	bl	80101ac <_Balloc>
 800fcb0:	4604      	mov	r4, r0
 800fcb2:	b940      	cbnz	r0, 800fcc6 <__gethex+0x182>
 800fcb4:	4b5d      	ldr	r3, [pc, #372]	; (800fe2c <__gethex+0x2e8>)
 800fcb6:	4602      	mov	r2, r0
 800fcb8:	21de      	movs	r1, #222	; 0xde
 800fcba:	485d      	ldr	r0, [pc, #372]	; (800fe30 <__gethex+0x2ec>)
 800fcbc:	f001 f9c2 	bl	8011044 <__assert_func>
 800fcc0:	3101      	adds	r1, #1
 800fcc2:	105b      	asrs	r3, r3, #1
 800fcc4:	e7ee      	b.n	800fca4 <__gethex+0x160>
 800fcc6:	f100 0914 	add.w	r9, r0, #20
 800fcca:	f04f 0b00 	mov.w	fp, #0
 800fcce:	f1ca 0301 	rsb	r3, sl, #1
 800fcd2:	f8cd 9008 	str.w	r9, [sp, #8]
 800fcd6:	f8cd b000 	str.w	fp, [sp]
 800fcda:	9306      	str	r3, [sp, #24]
 800fcdc:	42b7      	cmp	r7, r6
 800fcde:	d340      	bcc.n	800fd62 <__gethex+0x21e>
 800fce0:	9802      	ldr	r0, [sp, #8]
 800fce2:	9b00      	ldr	r3, [sp, #0]
 800fce4:	f840 3b04 	str.w	r3, [r0], #4
 800fce8:	eba0 0009 	sub.w	r0, r0, r9
 800fcec:	1080      	asrs	r0, r0, #2
 800fcee:	0146      	lsls	r6, r0, #5
 800fcf0:	6120      	str	r0, [r4, #16]
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	f000 fb4c 	bl	8010390 <__hi0bits>
 800fcf8:	1a30      	subs	r0, r6, r0
 800fcfa:	f8d8 6000 	ldr.w	r6, [r8]
 800fcfe:	42b0      	cmp	r0, r6
 800fd00:	dd63      	ble.n	800fdca <__gethex+0x286>
 800fd02:	1b87      	subs	r7, r0, r6
 800fd04:	4639      	mov	r1, r7
 800fd06:	4620      	mov	r0, r4
 800fd08:	f000 feed 	bl	8010ae6 <__any_on>
 800fd0c:	4682      	mov	sl, r0
 800fd0e:	b1a8      	cbz	r0, 800fd3c <__gethex+0x1f8>
 800fd10:	1e7b      	subs	r3, r7, #1
 800fd12:	1159      	asrs	r1, r3, #5
 800fd14:	f003 021f 	and.w	r2, r3, #31
 800fd18:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800fd1c:	f04f 0a01 	mov.w	sl, #1
 800fd20:	fa0a f202 	lsl.w	r2, sl, r2
 800fd24:	420a      	tst	r2, r1
 800fd26:	d009      	beq.n	800fd3c <__gethex+0x1f8>
 800fd28:	4553      	cmp	r3, sl
 800fd2a:	dd05      	ble.n	800fd38 <__gethex+0x1f4>
 800fd2c:	1eb9      	subs	r1, r7, #2
 800fd2e:	4620      	mov	r0, r4
 800fd30:	f000 fed9 	bl	8010ae6 <__any_on>
 800fd34:	2800      	cmp	r0, #0
 800fd36:	d145      	bne.n	800fdc4 <__gethex+0x280>
 800fd38:	f04f 0a02 	mov.w	sl, #2
 800fd3c:	4639      	mov	r1, r7
 800fd3e:	4620      	mov	r0, r4
 800fd40:	f7ff fe98 	bl	800fa74 <rshift>
 800fd44:	443d      	add	r5, r7
 800fd46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fd4a:	42ab      	cmp	r3, r5
 800fd4c:	da4c      	bge.n	800fde8 <__gethex+0x2a4>
 800fd4e:	ee18 0a10 	vmov	r0, s16
 800fd52:	4621      	mov	r1, r4
 800fd54:	f000 fa6a 	bl	801022c <_Bfree>
 800fd58:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fd5a:	2300      	movs	r3, #0
 800fd5c:	6013      	str	r3, [r2, #0]
 800fd5e:	27a3      	movs	r7, #163	; 0xa3
 800fd60:	e785      	b.n	800fc6e <__gethex+0x12a>
 800fd62:	1e73      	subs	r3, r6, #1
 800fd64:	9a05      	ldr	r2, [sp, #20]
 800fd66:	9303      	str	r3, [sp, #12]
 800fd68:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800fd6c:	4293      	cmp	r3, r2
 800fd6e:	d019      	beq.n	800fda4 <__gethex+0x260>
 800fd70:	f1bb 0f20 	cmp.w	fp, #32
 800fd74:	d107      	bne.n	800fd86 <__gethex+0x242>
 800fd76:	9b02      	ldr	r3, [sp, #8]
 800fd78:	9a00      	ldr	r2, [sp, #0]
 800fd7a:	f843 2b04 	str.w	r2, [r3], #4
 800fd7e:	9302      	str	r3, [sp, #8]
 800fd80:	2300      	movs	r3, #0
 800fd82:	9300      	str	r3, [sp, #0]
 800fd84:	469b      	mov	fp, r3
 800fd86:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800fd8a:	f7ff fec5 	bl	800fb18 <__hexdig_fun>
 800fd8e:	9b00      	ldr	r3, [sp, #0]
 800fd90:	f000 000f 	and.w	r0, r0, #15
 800fd94:	fa00 f00b 	lsl.w	r0, r0, fp
 800fd98:	4303      	orrs	r3, r0
 800fd9a:	9300      	str	r3, [sp, #0]
 800fd9c:	f10b 0b04 	add.w	fp, fp, #4
 800fda0:	9b03      	ldr	r3, [sp, #12]
 800fda2:	e00d      	b.n	800fdc0 <__gethex+0x27c>
 800fda4:	9b03      	ldr	r3, [sp, #12]
 800fda6:	9a06      	ldr	r2, [sp, #24]
 800fda8:	4413      	add	r3, r2
 800fdaa:	42bb      	cmp	r3, r7
 800fdac:	d3e0      	bcc.n	800fd70 <__gethex+0x22c>
 800fdae:	4618      	mov	r0, r3
 800fdb0:	9901      	ldr	r1, [sp, #4]
 800fdb2:	9307      	str	r3, [sp, #28]
 800fdb4:	4652      	mov	r2, sl
 800fdb6:	f001 f923 	bl	8011000 <strncmp>
 800fdba:	9b07      	ldr	r3, [sp, #28]
 800fdbc:	2800      	cmp	r0, #0
 800fdbe:	d1d7      	bne.n	800fd70 <__gethex+0x22c>
 800fdc0:	461e      	mov	r6, r3
 800fdc2:	e78b      	b.n	800fcdc <__gethex+0x198>
 800fdc4:	f04f 0a03 	mov.w	sl, #3
 800fdc8:	e7b8      	b.n	800fd3c <__gethex+0x1f8>
 800fdca:	da0a      	bge.n	800fde2 <__gethex+0x29e>
 800fdcc:	1a37      	subs	r7, r6, r0
 800fdce:	4621      	mov	r1, r4
 800fdd0:	ee18 0a10 	vmov	r0, s16
 800fdd4:	463a      	mov	r2, r7
 800fdd6:	f000 fc45 	bl	8010664 <__lshift>
 800fdda:	1bed      	subs	r5, r5, r7
 800fddc:	4604      	mov	r4, r0
 800fdde:	f100 0914 	add.w	r9, r0, #20
 800fde2:	f04f 0a00 	mov.w	sl, #0
 800fde6:	e7ae      	b.n	800fd46 <__gethex+0x202>
 800fde8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800fdec:	42a8      	cmp	r0, r5
 800fdee:	dd72      	ble.n	800fed6 <__gethex+0x392>
 800fdf0:	1b45      	subs	r5, r0, r5
 800fdf2:	42ae      	cmp	r6, r5
 800fdf4:	dc36      	bgt.n	800fe64 <__gethex+0x320>
 800fdf6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fdfa:	2b02      	cmp	r3, #2
 800fdfc:	d02a      	beq.n	800fe54 <__gethex+0x310>
 800fdfe:	2b03      	cmp	r3, #3
 800fe00:	d02c      	beq.n	800fe5c <__gethex+0x318>
 800fe02:	2b01      	cmp	r3, #1
 800fe04:	d11c      	bne.n	800fe40 <__gethex+0x2fc>
 800fe06:	42ae      	cmp	r6, r5
 800fe08:	d11a      	bne.n	800fe40 <__gethex+0x2fc>
 800fe0a:	2e01      	cmp	r6, #1
 800fe0c:	d112      	bne.n	800fe34 <__gethex+0x2f0>
 800fe0e:	9a04      	ldr	r2, [sp, #16]
 800fe10:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800fe14:	6013      	str	r3, [r2, #0]
 800fe16:	2301      	movs	r3, #1
 800fe18:	6123      	str	r3, [r4, #16]
 800fe1a:	f8c9 3000 	str.w	r3, [r9]
 800fe1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fe20:	2762      	movs	r7, #98	; 0x62
 800fe22:	601c      	str	r4, [r3, #0]
 800fe24:	e723      	b.n	800fc6e <__gethex+0x12a>
 800fe26:	bf00      	nop
 800fe28:	08014d08 	.word	0x08014d08
 800fe2c:	08014c90 	.word	0x08014c90
 800fe30:	08014ca1 	.word	0x08014ca1
 800fe34:	1e71      	subs	r1, r6, #1
 800fe36:	4620      	mov	r0, r4
 800fe38:	f000 fe55 	bl	8010ae6 <__any_on>
 800fe3c:	2800      	cmp	r0, #0
 800fe3e:	d1e6      	bne.n	800fe0e <__gethex+0x2ca>
 800fe40:	ee18 0a10 	vmov	r0, s16
 800fe44:	4621      	mov	r1, r4
 800fe46:	f000 f9f1 	bl	801022c <_Bfree>
 800fe4a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fe4c:	2300      	movs	r3, #0
 800fe4e:	6013      	str	r3, [r2, #0]
 800fe50:	2750      	movs	r7, #80	; 0x50
 800fe52:	e70c      	b.n	800fc6e <__gethex+0x12a>
 800fe54:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	d1f2      	bne.n	800fe40 <__gethex+0x2fc>
 800fe5a:	e7d8      	b.n	800fe0e <__gethex+0x2ca>
 800fe5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d1d5      	bne.n	800fe0e <__gethex+0x2ca>
 800fe62:	e7ed      	b.n	800fe40 <__gethex+0x2fc>
 800fe64:	1e6f      	subs	r7, r5, #1
 800fe66:	f1ba 0f00 	cmp.w	sl, #0
 800fe6a:	d131      	bne.n	800fed0 <__gethex+0x38c>
 800fe6c:	b127      	cbz	r7, 800fe78 <__gethex+0x334>
 800fe6e:	4639      	mov	r1, r7
 800fe70:	4620      	mov	r0, r4
 800fe72:	f000 fe38 	bl	8010ae6 <__any_on>
 800fe76:	4682      	mov	sl, r0
 800fe78:	117b      	asrs	r3, r7, #5
 800fe7a:	2101      	movs	r1, #1
 800fe7c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800fe80:	f007 071f 	and.w	r7, r7, #31
 800fe84:	fa01 f707 	lsl.w	r7, r1, r7
 800fe88:	421f      	tst	r7, r3
 800fe8a:	4629      	mov	r1, r5
 800fe8c:	4620      	mov	r0, r4
 800fe8e:	bf18      	it	ne
 800fe90:	f04a 0a02 	orrne.w	sl, sl, #2
 800fe94:	1b76      	subs	r6, r6, r5
 800fe96:	f7ff fded 	bl	800fa74 <rshift>
 800fe9a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800fe9e:	2702      	movs	r7, #2
 800fea0:	f1ba 0f00 	cmp.w	sl, #0
 800fea4:	d048      	beq.n	800ff38 <__gethex+0x3f4>
 800fea6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800feaa:	2b02      	cmp	r3, #2
 800feac:	d015      	beq.n	800feda <__gethex+0x396>
 800feae:	2b03      	cmp	r3, #3
 800feb0:	d017      	beq.n	800fee2 <__gethex+0x39e>
 800feb2:	2b01      	cmp	r3, #1
 800feb4:	d109      	bne.n	800feca <__gethex+0x386>
 800feb6:	f01a 0f02 	tst.w	sl, #2
 800feba:	d006      	beq.n	800feca <__gethex+0x386>
 800febc:	f8d9 0000 	ldr.w	r0, [r9]
 800fec0:	ea4a 0a00 	orr.w	sl, sl, r0
 800fec4:	f01a 0f01 	tst.w	sl, #1
 800fec8:	d10e      	bne.n	800fee8 <__gethex+0x3a4>
 800feca:	f047 0710 	orr.w	r7, r7, #16
 800fece:	e033      	b.n	800ff38 <__gethex+0x3f4>
 800fed0:	f04f 0a01 	mov.w	sl, #1
 800fed4:	e7d0      	b.n	800fe78 <__gethex+0x334>
 800fed6:	2701      	movs	r7, #1
 800fed8:	e7e2      	b.n	800fea0 <__gethex+0x35c>
 800feda:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fedc:	f1c3 0301 	rsb	r3, r3, #1
 800fee0:	9315      	str	r3, [sp, #84]	; 0x54
 800fee2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d0f0      	beq.n	800feca <__gethex+0x386>
 800fee8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800feec:	f104 0314 	add.w	r3, r4, #20
 800fef0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800fef4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800fef8:	f04f 0c00 	mov.w	ip, #0
 800fefc:	4618      	mov	r0, r3
 800fefe:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff02:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ff06:	d01c      	beq.n	800ff42 <__gethex+0x3fe>
 800ff08:	3201      	adds	r2, #1
 800ff0a:	6002      	str	r2, [r0, #0]
 800ff0c:	2f02      	cmp	r7, #2
 800ff0e:	f104 0314 	add.w	r3, r4, #20
 800ff12:	d13f      	bne.n	800ff94 <__gethex+0x450>
 800ff14:	f8d8 2000 	ldr.w	r2, [r8]
 800ff18:	3a01      	subs	r2, #1
 800ff1a:	42b2      	cmp	r2, r6
 800ff1c:	d10a      	bne.n	800ff34 <__gethex+0x3f0>
 800ff1e:	1171      	asrs	r1, r6, #5
 800ff20:	2201      	movs	r2, #1
 800ff22:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ff26:	f006 061f 	and.w	r6, r6, #31
 800ff2a:	fa02 f606 	lsl.w	r6, r2, r6
 800ff2e:	421e      	tst	r6, r3
 800ff30:	bf18      	it	ne
 800ff32:	4617      	movne	r7, r2
 800ff34:	f047 0720 	orr.w	r7, r7, #32
 800ff38:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ff3a:	601c      	str	r4, [r3, #0]
 800ff3c:	9b04      	ldr	r3, [sp, #16]
 800ff3e:	601d      	str	r5, [r3, #0]
 800ff40:	e695      	b.n	800fc6e <__gethex+0x12a>
 800ff42:	4299      	cmp	r1, r3
 800ff44:	f843 cc04 	str.w	ip, [r3, #-4]
 800ff48:	d8d8      	bhi.n	800fefc <__gethex+0x3b8>
 800ff4a:	68a3      	ldr	r3, [r4, #8]
 800ff4c:	459b      	cmp	fp, r3
 800ff4e:	db19      	blt.n	800ff84 <__gethex+0x440>
 800ff50:	6861      	ldr	r1, [r4, #4]
 800ff52:	ee18 0a10 	vmov	r0, s16
 800ff56:	3101      	adds	r1, #1
 800ff58:	f000 f928 	bl	80101ac <_Balloc>
 800ff5c:	4681      	mov	r9, r0
 800ff5e:	b918      	cbnz	r0, 800ff68 <__gethex+0x424>
 800ff60:	4b1a      	ldr	r3, [pc, #104]	; (800ffcc <__gethex+0x488>)
 800ff62:	4602      	mov	r2, r0
 800ff64:	2184      	movs	r1, #132	; 0x84
 800ff66:	e6a8      	b.n	800fcba <__gethex+0x176>
 800ff68:	6922      	ldr	r2, [r4, #16]
 800ff6a:	3202      	adds	r2, #2
 800ff6c:	f104 010c 	add.w	r1, r4, #12
 800ff70:	0092      	lsls	r2, r2, #2
 800ff72:	300c      	adds	r0, #12
 800ff74:	f000 f90c 	bl	8010190 <memcpy>
 800ff78:	4621      	mov	r1, r4
 800ff7a:	ee18 0a10 	vmov	r0, s16
 800ff7e:	f000 f955 	bl	801022c <_Bfree>
 800ff82:	464c      	mov	r4, r9
 800ff84:	6923      	ldr	r3, [r4, #16]
 800ff86:	1c5a      	adds	r2, r3, #1
 800ff88:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ff8c:	6122      	str	r2, [r4, #16]
 800ff8e:	2201      	movs	r2, #1
 800ff90:	615a      	str	r2, [r3, #20]
 800ff92:	e7bb      	b.n	800ff0c <__gethex+0x3c8>
 800ff94:	6922      	ldr	r2, [r4, #16]
 800ff96:	455a      	cmp	r2, fp
 800ff98:	dd0b      	ble.n	800ffb2 <__gethex+0x46e>
 800ff9a:	2101      	movs	r1, #1
 800ff9c:	4620      	mov	r0, r4
 800ff9e:	f7ff fd69 	bl	800fa74 <rshift>
 800ffa2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ffa6:	3501      	adds	r5, #1
 800ffa8:	42ab      	cmp	r3, r5
 800ffaa:	f6ff aed0 	blt.w	800fd4e <__gethex+0x20a>
 800ffae:	2701      	movs	r7, #1
 800ffb0:	e7c0      	b.n	800ff34 <__gethex+0x3f0>
 800ffb2:	f016 061f 	ands.w	r6, r6, #31
 800ffb6:	d0fa      	beq.n	800ffae <__gethex+0x46a>
 800ffb8:	4453      	add	r3, sl
 800ffba:	f1c6 0620 	rsb	r6, r6, #32
 800ffbe:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ffc2:	f000 f9e5 	bl	8010390 <__hi0bits>
 800ffc6:	42b0      	cmp	r0, r6
 800ffc8:	dbe7      	blt.n	800ff9a <__gethex+0x456>
 800ffca:	e7f0      	b.n	800ffae <__gethex+0x46a>
 800ffcc:	08014c90 	.word	0x08014c90

0800ffd0 <L_shift>:
 800ffd0:	f1c2 0208 	rsb	r2, r2, #8
 800ffd4:	0092      	lsls	r2, r2, #2
 800ffd6:	b570      	push	{r4, r5, r6, lr}
 800ffd8:	f1c2 0620 	rsb	r6, r2, #32
 800ffdc:	6843      	ldr	r3, [r0, #4]
 800ffde:	6804      	ldr	r4, [r0, #0]
 800ffe0:	fa03 f506 	lsl.w	r5, r3, r6
 800ffe4:	432c      	orrs	r4, r5
 800ffe6:	40d3      	lsrs	r3, r2
 800ffe8:	6004      	str	r4, [r0, #0]
 800ffea:	f840 3f04 	str.w	r3, [r0, #4]!
 800ffee:	4288      	cmp	r0, r1
 800fff0:	d3f4      	bcc.n	800ffdc <L_shift+0xc>
 800fff2:	bd70      	pop	{r4, r5, r6, pc}

0800fff4 <__match>:
 800fff4:	b530      	push	{r4, r5, lr}
 800fff6:	6803      	ldr	r3, [r0, #0]
 800fff8:	3301      	adds	r3, #1
 800fffa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fffe:	b914      	cbnz	r4, 8010006 <__match+0x12>
 8010000:	6003      	str	r3, [r0, #0]
 8010002:	2001      	movs	r0, #1
 8010004:	bd30      	pop	{r4, r5, pc}
 8010006:	f813 2b01 	ldrb.w	r2, [r3], #1
 801000a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801000e:	2d19      	cmp	r5, #25
 8010010:	bf98      	it	ls
 8010012:	3220      	addls	r2, #32
 8010014:	42a2      	cmp	r2, r4
 8010016:	d0f0      	beq.n	800fffa <__match+0x6>
 8010018:	2000      	movs	r0, #0
 801001a:	e7f3      	b.n	8010004 <__match+0x10>

0801001c <__hexnan>:
 801001c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010020:	680b      	ldr	r3, [r1, #0]
 8010022:	115e      	asrs	r6, r3, #5
 8010024:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010028:	f013 031f 	ands.w	r3, r3, #31
 801002c:	b087      	sub	sp, #28
 801002e:	bf18      	it	ne
 8010030:	3604      	addne	r6, #4
 8010032:	2500      	movs	r5, #0
 8010034:	1f37      	subs	r7, r6, #4
 8010036:	4690      	mov	r8, r2
 8010038:	6802      	ldr	r2, [r0, #0]
 801003a:	9301      	str	r3, [sp, #4]
 801003c:	4682      	mov	sl, r0
 801003e:	f846 5c04 	str.w	r5, [r6, #-4]
 8010042:	46b9      	mov	r9, r7
 8010044:	463c      	mov	r4, r7
 8010046:	9502      	str	r5, [sp, #8]
 8010048:	46ab      	mov	fp, r5
 801004a:	7851      	ldrb	r1, [r2, #1]
 801004c:	1c53      	adds	r3, r2, #1
 801004e:	9303      	str	r3, [sp, #12]
 8010050:	b341      	cbz	r1, 80100a4 <__hexnan+0x88>
 8010052:	4608      	mov	r0, r1
 8010054:	9205      	str	r2, [sp, #20]
 8010056:	9104      	str	r1, [sp, #16]
 8010058:	f7ff fd5e 	bl	800fb18 <__hexdig_fun>
 801005c:	2800      	cmp	r0, #0
 801005e:	d14f      	bne.n	8010100 <__hexnan+0xe4>
 8010060:	9904      	ldr	r1, [sp, #16]
 8010062:	9a05      	ldr	r2, [sp, #20]
 8010064:	2920      	cmp	r1, #32
 8010066:	d818      	bhi.n	801009a <__hexnan+0x7e>
 8010068:	9b02      	ldr	r3, [sp, #8]
 801006a:	459b      	cmp	fp, r3
 801006c:	dd13      	ble.n	8010096 <__hexnan+0x7a>
 801006e:	454c      	cmp	r4, r9
 8010070:	d206      	bcs.n	8010080 <__hexnan+0x64>
 8010072:	2d07      	cmp	r5, #7
 8010074:	dc04      	bgt.n	8010080 <__hexnan+0x64>
 8010076:	462a      	mov	r2, r5
 8010078:	4649      	mov	r1, r9
 801007a:	4620      	mov	r0, r4
 801007c:	f7ff ffa8 	bl	800ffd0 <L_shift>
 8010080:	4544      	cmp	r4, r8
 8010082:	d950      	bls.n	8010126 <__hexnan+0x10a>
 8010084:	2300      	movs	r3, #0
 8010086:	f1a4 0904 	sub.w	r9, r4, #4
 801008a:	f844 3c04 	str.w	r3, [r4, #-4]
 801008e:	f8cd b008 	str.w	fp, [sp, #8]
 8010092:	464c      	mov	r4, r9
 8010094:	461d      	mov	r5, r3
 8010096:	9a03      	ldr	r2, [sp, #12]
 8010098:	e7d7      	b.n	801004a <__hexnan+0x2e>
 801009a:	2929      	cmp	r1, #41	; 0x29
 801009c:	d156      	bne.n	801014c <__hexnan+0x130>
 801009e:	3202      	adds	r2, #2
 80100a0:	f8ca 2000 	str.w	r2, [sl]
 80100a4:	f1bb 0f00 	cmp.w	fp, #0
 80100a8:	d050      	beq.n	801014c <__hexnan+0x130>
 80100aa:	454c      	cmp	r4, r9
 80100ac:	d206      	bcs.n	80100bc <__hexnan+0xa0>
 80100ae:	2d07      	cmp	r5, #7
 80100b0:	dc04      	bgt.n	80100bc <__hexnan+0xa0>
 80100b2:	462a      	mov	r2, r5
 80100b4:	4649      	mov	r1, r9
 80100b6:	4620      	mov	r0, r4
 80100b8:	f7ff ff8a 	bl	800ffd0 <L_shift>
 80100bc:	4544      	cmp	r4, r8
 80100be:	d934      	bls.n	801012a <__hexnan+0x10e>
 80100c0:	f1a8 0204 	sub.w	r2, r8, #4
 80100c4:	4623      	mov	r3, r4
 80100c6:	f853 1b04 	ldr.w	r1, [r3], #4
 80100ca:	f842 1f04 	str.w	r1, [r2, #4]!
 80100ce:	429f      	cmp	r7, r3
 80100d0:	d2f9      	bcs.n	80100c6 <__hexnan+0xaa>
 80100d2:	1b3b      	subs	r3, r7, r4
 80100d4:	f023 0303 	bic.w	r3, r3, #3
 80100d8:	3304      	adds	r3, #4
 80100da:	3401      	adds	r4, #1
 80100dc:	3e03      	subs	r6, #3
 80100de:	42b4      	cmp	r4, r6
 80100e0:	bf88      	it	hi
 80100e2:	2304      	movhi	r3, #4
 80100e4:	4443      	add	r3, r8
 80100e6:	2200      	movs	r2, #0
 80100e8:	f843 2b04 	str.w	r2, [r3], #4
 80100ec:	429f      	cmp	r7, r3
 80100ee:	d2fb      	bcs.n	80100e8 <__hexnan+0xcc>
 80100f0:	683b      	ldr	r3, [r7, #0]
 80100f2:	b91b      	cbnz	r3, 80100fc <__hexnan+0xe0>
 80100f4:	4547      	cmp	r7, r8
 80100f6:	d127      	bne.n	8010148 <__hexnan+0x12c>
 80100f8:	2301      	movs	r3, #1
 80100fa:	603b      	str	r3, [r7, #0]
 80100fc:	2005      	movs	r0, #5
 80100fe:	e026      	b.n	801014e <__hexnan+0x132>
 8010100:	3501      	adds	r5, #1
 8010102:	2d08      	cmp	r5, #8
 8010104:	f10b 0b01 	add.w	fp, fp, #1
 8010108:	dd06      	ble.n	8010118 <__hexnan+0xfc>
 801010a:	4544      	cmp	r4, r8
 801010c:	d9c3      	bls.n	8010096 <__hexnan+0x7a>
 801010e:	2300      	movs	r3, #0
 8010110:	f844 3c04 	str.w	r3, [r4, #-4]
 8010114:	2501      	movs	r5, #1
 8010116:	3c04      	subs	r4, #4
 8010118:	6822      	ldr	r2, [r4, #0]
 801011a:	f000 000f 	and.w	r0, r0, #15
 801011e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8010122:	6022      	str	r2, [r4, #0]
 8010124:	e7b7      	b.n	8010096 <__hexnan+0x7a>
 8010126:	2508      	movs	r5, #8
 8010128:	e7b5      	b.n	8010096 <__hexnan+0x7a>
 801012a:	9b01      	ldr	r3, [sp, #4]
 801012c:	2b00      	cmp	r3, #0
 801012e:	d0df      	beq.n	80100f0 <__hexnan+0xd4>
 8010130:	f04f 32ff 	mov.w	r2, #4294967295
 8010134:	f1c3 0320 	rsb	r3, r3, #32
 8010138:	fa22 f303 	lsr.w	r3, r2, r3
 801013c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8010140:	401a      	ands	r2, r3
 8010142:	f846 2c04 	str.w	r2, [r6, #-4]
 8010146:	e7d3      	b.n	80100f0 <__hexnan+0xd4>
 8010148:	3f04      	subs	r7, #4
 801014a:	e7d1      	b.n	80100f0 <__hexnan+0xd4>
 801014c:	2004      	movs	r0, #4
 801014e:	b007      	add	sp, #28
 8010150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010154 <_localeconv_r>:
 8010154:	4800      	ldr	r0, [pc, #0]	; (8010158 <_localeconv_r+0x4>)
 8010156:	4770      	bx	lr
 8010158:	2400016c 	.word	0x2400016c

0801015c <malloc>:
 801015c:	4b02      	ldr	r3, [pc, #8]	; (8010168 <malloc+0xc>)
 801015e:	4601      	mov	r1, r0
 8010160:	6818      	ldr	r0, [r3, #0]
 8010162:	f000 bd63 	b.w	8010c2c <_malloc_r>
 8010166:	bf00      	nop
 8010168:	24000014 	.word	0x24000014

0801016c <__ascii_mbtowc>:
 801016c:	b082      	sub	sp, #8
 801016e:	b901      	cbnz	r1, 8010172 <__ascii_mbtowc+0x6>
 8010170:	a901      	add	r1, sp, #4
 8010172:	b142      	cbz	r2, 8010186 <__ascii_mbtowc+0x1a>
 8010174:	b14b      	cbz	r3, 801018a <__ascii_mbtowc+0x1e>
 8010176:	7813      	ldrb	r3, [r2, #0]
 8010178:	600b      	str	r3, [r1, #0]
 801017a:	7812      	ldrb	r2, [r2, #0]
 801017c:	1e10      	subs	r0, r2, #0
 801017e:	bf18      	it	ne
 8010180:	2001      	movne	r0, #1
 8010182:	b002      	add	sp, #8
 8010184:	4770      	bx	lr
 8010186:	4610      	mov	r0, r2
 8010188:	e7fb      	b.n	8010182 <__ascii_mbtowc+0x16>
 801018a:	f06f 0001 	mvn.w	r0, #1
 801018e:	e7f8      	b.n	8010182 <__ascii_mbtowc+0x16>

08010190 <memcpy>:
 8010190:	440a      	add	r2, r1
 8010192:	4291      	cmp	r1, r2
 8010194:	f100 33ff 	add.w	r3, r0, #4294967295
 8010198:	d100      	bne.n	801019c <memcpy+0xc>
 801019a:	4770      	bx	lr
 801019c:	b510      	push	{r4, lr}
 801019e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80101a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80101a6:	4291      	cmp	r1, r2
 80101a8:	d1f9      	bne.n	801019e <memcpy+0xe>
 80101aa:	bd10      	pop	{r4, pc}

080101ac <_Balloc>:
 80101ac:	b570      	push	{r4, r5, r6, lr}
 80101ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80101b0:	4604      	mov	r4, r0
 80101b2:	460d      	mov	r5, r1
 80101b4:	b976      	cbnz	r6, 80101d4 <_Balloc+0x28>
 80101b6:	2010      	movs	r0, #16
 80101b8:	f7ff ffd0 	bl	801015c <malloc>
 80101bc:	4602      	mov	r2, r0
 80101be:	6260      	str	r0, [r4, #36]	; 0x24
 80101c0:	b920      	cbnz	r0, 80101cc <_Balloc+0x20>
 80101c2:	4b18      	ldr	r3, [pc, #96]	; (8010224 <_Balloc+0x78>)
 80101c4:	4818      	ldr	r0, [pc, #96]	; (8010228 <_Balloc+0x7c>)
 80101c6:	2166      	movs	r1, #102	; 0x66
 80101c8:	f000 ff3c 	bl	8011044 <__assert_func>
 80101cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80101d0:	6006      	str	r6, [r0, #0]
 80101d2:	60c6      	str	r6, [r0, #12]
 80101d4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80101d6:	68f3      	ldr	r3, [r6, #12]
 80101d8:	b183      	cbz	r3, 80101fc <_Balloc+0x50>
 80101da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80101dc:	68db      	ldr	r3, [r3, #12]
 80101de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80101e2:	b9b8      	cbnz	r0, 8010214 <_Balloc+0x68>
 80101e4:	2101      	movs	r1, #1
 80101e6:	fa01 f605 	lsl.w	r6, r1, r5
 80101ea:	1d72      	adds	r2, r6, #5
 80101ec:	0092      	lsls	r2, r2, #2
 80101ee:	4620      	mov	r0, r4
 80101f0:	f000 fc9a 	bl	8010b28 <_calloc_r>
 80101f4:	b160      	cbz	r0, 8010210 <_Balloc+0x64>
 80101f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80101fa:	e00e      	b.n	801021a <_Balloc+0x6e>
 80101fc:	2221      	movs	r2, #33	; 0x21
 80101fe:	2104      	movs	r1, #4
 8010200:	4620      	mov	r0, r4
 8010202:	f000 fc91 	bl	8010b28 <_calloc_r>
 8010206:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010208:	60f0      	str	r0, [r6, #12]
 801020a:	68db      	ldr	r3, [r3, #12]
 801020c:	2b00      	cmp	r3, #0
 801020e:	d1e4      	bne.n	80101da <_Balloc+0x2e>
 8010210:	2000      	movs	r0, #0
 8010212:	bd70      	pop	{r4, r5, r6, pc}
 8010214:	6802      	ldr	r2, [r0, #0]
 8010216:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801021a:	2300      	movs	r3, #0
 801021c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010220:	e7f7      	b.n	8010212 <_Balloc+0x66>
 8010222:	bf00      	nop
 8010224:	08014c1e 	.word	0x08014c1e
 8010228:	08014d1c 	.word	0x08014d1c

0801022c <_Bfree>:
 801022c:	b570      	push	{r4, r5, r6, lr}
 801022e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010230:	4605      	mov	r5, r0
 8010232:	460c      	mov	r4, r1
 8010234:	b976      	cbnz	r6, 8010254 <_Bfree+0x28>
 8010236:	2010      	movs	r0, #16
 8010238:	f7ff ff90 	bl	801015c <malloc>
 801023c:	4602      	mov	r2, r0
 801023e:	6268      	str	r0, [r5, #36]	; 0x24
 8010240:	b920      	cbnz	r0, 801024c <_Bfree+0x20>
 8010242:	4b09      	ldr	r3, [pc, #36]	; (8010268 <_Bfree+0x3c>)
 8010244:	4809      	ldr	r0, [pc, #36]	; (801026c <_Bfree+0x40>)
 8010246:	218a      	movs	r1, #138	; 0x8a
 8010248:	f000 fefc 	bl	8011044 <__assert_func>
 801024c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010250:	6006      	str	r6, [r0, #0]
 8010252:	60c6      	str	r6, [r0, #12]
 8010254:	b13c      	cbz	r4, 8010266 <_Bfree+0x3a>
 8010256:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8010258:	6862      	ldr	r2, [r4, #4]
 801025a:	68db      	ldr	r3, [r3, #12]
 801025c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010260:	6021      	str	r1, [r4, #0]
 8010262:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010266:	bd70      	pop	{r4, r5, r6, pc}
 8010268:	08014c1e 	.word	0x08014c1e
 801026c:	08014d1c 	.word	0x08014d1c

08010270 <__multadd>:
 8010270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010274:	690d      	ldr	r5, [r1, #16]
 8010276:	4607      	mov	r7, r0
 8010278:	460c      	mov	r4, r1
 801027a:	461e      	mov	r6, r3
 801027c:	f101 0c14 	add.w	ip, r1, #20
 8010280:	2000      	movs	r0, #0
 8010282:	f8dc 3000 	ldr.w	r3, [ip]
 8010286:	b299      	uxth	r1, r3
 8010288:	fb02 6101 	mla	r1, r2, r1, r6
 801028c:	0c1e      	lsrs	r6, r3, #16
 801028e:	0c0b      	lsrs	r3, r1, #16
 8010290:	fb02 3306 	mla	r3, r2, r6, r3
 8010294:	b289      	uxth	r1, r1
 8010296:	3001      	adds	r0, #1
 8010298:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801029c:	4285      	cmp	r5, r0
 801029e:	f84c 1b04 	str.w	r1, [ip], #4
 80102a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80102a6:	dcec      	bgt.n	8010282 <__multadd+0x12>
 80102a8:	b30e      	cbz	r6, 80102ee <__multadd+0x7e>
 80102aa:	68a3      	ldr	r3, [r4, #8]
 80102ac:	42ab      	cmp	r3, r5
 80102ae:	dc19      	bgt.n	80102e4 <__multadd+0x74>
 80102b0:	6861      	ldr	r1, [r4, #4]
 80102b2:	4638      	mov	r0, r7
 80102b4:	3101      	adds	r1, #1
 80102b6:	f7ff ff79 	bl	80101ac <_Balloc>
 80102ba:	4680      	mov	r8, r0
 80102bc:	b928      	cbnz	r0, 80102ca <__multadd+0x5a>
 80102be:	4602      	mov	r2, r0
 80102c0:	4b0c      	ldr	r3, [pc, #48]	; (80102f4 <__multadd+0x84>)
 80102c2:	480d      	ldr	r0, [pc, #52]	; (80102f8 <__multadd+0x88>)
 80102c4:	21b5      	movs	r1, #181	; 0xb5
 80102c6:	f000 febd 	bl	8011044 <__assert_func>
 80102ca:	6922      	ldr	r2, [r4, #16]
 80102cc:	3202      	adds	r2, #2
 80102ce:	f104 010c 	add.w	r1, r4, #12
 80102d2:	0092      	lsls	r2, r2, #2
 80102d4:	300c      	adds	r0, #12
 80102d6:	f7ff ff5b 	bl	8010190 <memcpy>
 80102da:	4621      	mov	r1, r4
 80102dc:	4638      	mov	r0, r7
 80102de:	f7ff ffa5 	bl	801022c <_Bfree>
 80102e2:	4644      	mov	r4, r8
 80102e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80102e8:	3501      	adds	r5, #1
 80102ea:	615e      	str	r6, [r3, #20]
 80102ec:	6125      	str	r5, [r4, #16]
 80102ee:	4620      	mov	r0, r4
 80102f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102f4:	08014c90 	.word	0x08014c90
 80102f8:	08014d1c 	.word	0x08014d1c

080102fc <__s2b>:
 80102fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010300:	460c      	mov	r4, r1
 8010302:	4615      	mov	r5, r2
 8010304:	461f      	mov	r7, r3
 8010306:	2209      	movs	r2, #9
 8010308:	3308      	adds	r3, #8
 801030a:	4606      	mov	r6, r0
 801030c:	fb93 f3f2 	sdiv	r3, r3, r2
 8010310:	2100      	movs	r1, #0
 8010312:	2201      	movs	r2, #1
 8010314:	429a      	cmp	r2, r3
 8010316:	db09      	blt.n	801032c <__s2b+0x30>
 8010318:	4630      	mov	r0, r6
 801031a:	f7ff ff47 	bl	80101ac <_Balloc>
 801031e:	b940      	cbnz	r0, 8010332 <__s2b+0x36>
 8010320:	4602      	mov	r2, r0
 8010322:	4b19      	ldr	r3, [pc, #100]	; (8010388 <__s2b+0x8c>)
 8010324:	4819      	ldr	r0, [pc, #100]	; (801038c <__s2b+0x90>)
 8010326:	21ce      	movs	r1, #206	; 0xce
 8010328:	f000 fe8c 	bl	8011044 <__assert_func>
 801032c:	0052      	lsls	r2, r2, #1
 801032e:	3101      	adds	r1, #1
 8010330:	e7f0      	b.n	8010314 <__s2b+0x18>
 8010332:	9b08      	ldr	r3, [sp, #32]
 8010334:	6143      	str	r3, [r0, #20]
 8010336:	2d09      	cmp	r5, #9
 8010338:	f04f 0301 	mov.w	r3, #1
 801033c:	6103      	str	r3, [r0, #16]
 801033e:	dd16      	ble.n	801036e <__s2b+0x72>
 8010340:	f104 0909 	add.w	r9, r4, #9
 8010344:	46c8      	mov	r8, r9
 8010346:	442c      	add	r4, r5
 8010348:	f818 3b01 	ldrb.w	r3, [r8], #1
 801034c:	4601      	mov	r1, r0
 801034e:	3b30      	subs	r3, #48	; 0x30
 8010350:	220a      	movs	r2, #10
 8010352:	4630      	mov	r0, r6
 8010354:	f7ff ff8c 	bl	8010270 <__multadd>
 8010358:	45a0      	cmp	r8, r4
 801035a:	d1f5      	bne.n	8010348 <__s2b+0x4c>
 801035c:	f1a5 0408 	sub.w	r4, r5, #8
 8010360:	444c      	add	r4, r9
 8010362:	1b2d      	subs	r5, r5, r4
 8010364:	1963      	adds	r3, r4, r5
 8010366:	42bb      	cmp	r3, r7
 8010368:	db04      	blt.n	8010374 <__s2b+0x78>
 801036a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801036e:	340a      	adds	r4, #10
 8010370:	2509      	movs	r5, #9
 8010372:	e7f6      	b.n	8010362 <__s2b+0x66>
 8010374:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010378:	4601      	mov	r1, r0
 801037a:	3b30      	subs	r3, #48	; 0x30
 801037c:	220a      	movs	r2, #10
 801037e:	4630      	mov	r0, r6
 8010380:	f7ff ff76 	bl	8010270 <__multadd>
 8010384:	e7ee      	b.n	8010364 <__s2b+0x68>
 8010386:	bf00      	nop
 8010388:	08014c90 	.word	0x08014c90
 801038c:	08014d1c 	.word	0x08014d1c

08010390 <__hi0bits>:
 8010390:	0c03      	lsrs	r3, r0, #16
 8010392:	041b      	lsls	r3, r3, #16
 8010394:	b9d3      	cbnz	r3, 80103cc <__hi0bits+0x3c>
 8010396:	0400      	lsls	r0, r0, #16
 8010398:	2310      	movs	r3, #16
 801039a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801039e:	bf04      	itt	eq
 80103a0:	0200      	lsleq	r0, r0, #8
 80103a2:	3308      	addeq	r3, #8
 80103a4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80103a8:	bf04      	itt	eq
 80103aa:	0100      	lsleq	r0, r0, #4
 80103ac:	3304      	addeq	r3, #4
 80103ae:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80103b2:	bf04      	itt	eq
 80103b4:	0080      	lsleq	r0, r0, #2
 80103b6:	3302      	addeq	r3, #2
 80103b8:	2800      	cmp	r0, #0
 80103ba:	db05      	blt.n	80103c8 <__hi0bits+0x38>
 80103bc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80103c0:	f103 0301 	add.w	r3, r3, #1
 80103c4:	bf08      	it	eq
 80103c6:	2320      	moveq	r3, #32
 80103c8:	4618      	mov	r0, r3
 80103ca:	4770      	bx	lr
 80103cc:	2300      	movs	r3, #0
 80103ce:	e7e4      	b.n	801039a <__hi0bits+0xa>

080103d0 <__lo0bits>:
 80103d0:	6803      	ldr	r3, [r0, #0]
 80103d2:	f013 0207 	ands.w	r2, r3, #7
 80103d6:	4601      	mov	r1, r0
 80103d8:	d00b      	beq.n	80103f2 <__lo0bits+0x22>
 80103da:	07da      	lsls	r2, r3, #31
 80103dc:	d423      	bmi.n	8010426 <__lo0bits+0x56>
 80103de:	0798      	lsls	r0, r3, #30
 80103e0:	bf49      	itett	mi
 80103e2:	085b      	lsrmi	r3, r3, #1
 80103e4:	089b      	lsrpl	r3, r3, #2
 80103e6:	2001      	movmi	r0, #1
 80103e8:	600b      	strmi	r3, [r1, #0]
 80103ea:	bf5c      	itt	pl
 80103ec:	600b      	strpl	r3, [r1, #0]
 80103ee:	2002      	movpl	r0, #2
 80103f0:	4770      	bx	lr
 80103f2:	b298      	uxth	r0, r3
 80103f4:	b9a8      	cbnz	r0, 8010422 <__lo0bits+0x52>
 80103f6:	0c1b      	lsrs	r3, r3, #16
 80103f8:	2010      	movs	r0, #16
 80103fa:	b2da      	uxtb	r2, r3
 80103fc:	b90a      	cbnz	r2, 8010402 <__lo0bits+0x32>
 80103fe:	3008      	adds	r0, #8
 8010400:	0a1b      	lsrs	r3, r3, #8
 8010402:	071a      	lsls	r2, r3, #28
 8010404:	bf04      	itt	eq
 8010406:	091b      	lsreq	r3, r3, #4
 8010408:	3004      	addeq	r0, #4
 801040a:	079a      	lsls	r2, r3, #30
 801040c:	bf04      	itt	eq
 801040e:	089b      	lsreq	r3, r3, #2
 8010410:	3002      	addeq	r0, #2
 8010412:	07da      	lsls	r2, r3, #31
 8010414:	d403      	bmi.n	801041e <__lo0bits+0x4e>
 8010416:	085b      	lsrs	r3, r3, #1
 8010418:	f100 0001 	add.w	r0, r0, #1
 801041c:	d005      	beq.n	801042a <__lo0bits+0x5a>
 801041e:	600b      	str	r3, [r1, #0]
 8010420:	4770      	bx	lr
 8010422:	4610      	mov	r0, r2
 8010424:	e7e9      	b.n	80103fa <__lo0bits+0x2a>
 8010426:	2000      	movs	r0, #0
 8010428:	4770      	bx	lr
 801042a:	2020      	movs	r0, #32
 801042c:	4770      	bx	lr
	...

08010430 <__i2b>:
 8010430:	b510      	push	{r4, lr}
 8010432:	460c      	mov	r4, r1
 8010434:	2101      	movs	r1, #1
 8010436:	f7ff feb9 	bl	80101ac <_Balloc>
 801043a:	4602      	mov	r2, r0
 801043c:	b928      	cbnz	r0, 801044a <__i2b+0x1a>
 801043e:	4b05      	ldr	r3, [pc, #20]	; (8010454 <__i2b+0x24>)
 8010440:	4805      	ldr	r0, [pc, #20]	; (8010458 <__i2b+0x28>)
 8010442:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010446:	f000 fdfd 	bl	8011044 <__assert_func>
 801044a:	2301      	movs	r3, #1
 801044c:	6144      	str	r4, [r0, #20]
 801044e:	6103      	str	r3, [r0, #16]
 8010450:	bd10      	pop	{r4, pc}
 8010452:	bf00      	nop
 8010454:	08014c90 	.word	0x08014c90
 8010458:	08014d1c 	.word	0x08014d1c

0801045c <__multiply>:
 801045c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010460:	4691      	mov	r9, r2
 8010462:	690a      	ldr	r2, [r1, #16]
 8010464:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010468:	429a      	cmp	r2, r3
 801046a:	bfb8      	it	lt
 801046c:	460b      	movlt	r3, r1
 801046e:	460c      	mov	r4, r1
 8010470:	bfbc      	itt	lt
 8010472:	464c      	movlt	r4, r9
 8010474:	4699      	movlt	r9, r3
 8010476:	6927      	ldr	r7, [r4, #16]
 8010478:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801047c:	68a3      	ldr	r3, [r4, #8]
 801047e:	6861      	ldr	r1, [r4, #4]
 8010480:	eb07 060a 	add.w	r6, r7, sl
 8010484:	42b3      	cmp	r3, r6
 8010486:	b085      	sub	sp, #20
 8010488:	bfb8      	it	lt
 801048a:	3101      	addlt	r1, #1
 801048c:	f7ff fe8e 	bl	80101ac <_Balloc>
 8010490:	b930      	cbnz	r0, 80104a0 <__multiply+0x44>
 8010492:	4602      	mov	r2, r0
 8010494:	4b44      	ldr	r3, [pc, #272]	; (80105a8 <__multiply+0x14c>)
 8010496:	4845      	ldr	r0, [pc, #276]	; (80105ac <__multiply+0x150>)
 8010498:	f240 115d 	movw	r1, #349	; 0x15d
 801049c:	f000 fdd2 	bl	8011044 <__assert_func>
 80104a0:	f100 0514 	add.w	r5, r0, #20
 80104a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80104a8:	462b      	mov	r3, r5
 80104aa:	2200      	movs	r2, #0
 80104ac:	4543      	cmp	r3, r8
 80104ae:	d321      	bcc.n	80104f4 <__multiply+0x98>
 80104b0:	f104 0314 	add.w	r3, r4, #20
 80104b4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80104b8:	f109 0314 	add.w	r3, r9, #20
 80104bc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80104c0:	9202      	str	r2, [sp, #8]
 80104c2:	1b3a      	subs	r2, r7, r4
 80104c4:	3a15      	subs	r2, #21
 80104c6:	f022 0203 	bic.w	r2, r2, #3
 80104ca:	3204      	adds	r2, #4
 80104cc:	f104 0115 	add.w	r1, r4, #21
 80104d0:	428f      	cmp	r7, r1
 80104d2:	bf38      	it	cc
 80104d4:	2204      	movcc	r2, #4
 80104d6:	9201      	str	r2, [sp, #4]
 80104d8:	9a02      	ldr	r2, [sp, #8]
 80104da:	9303      	str	r3, [sp, #12]
 80104dc:	429a      	cmp	r2, r3
 80104de:	d80c      	bhi.n	80104fa <__multiply+0x9e>
 80104e0:	2e00      	cmp	r6, #0
 80104e2:	dd03      	ble.n	80104ec <__multiply+0x90>
 80104e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d05a      	beq.n	80105a2 <__multiply+0x146>
 80104ec:	6106      	str	r6, [r0, #16]
 80104ee:	b005      	add	sp, #20
 80104f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104f4:	f843 2b04 	str.w	r2, [r3], #4
 80104f8:	e7d8      	b.n	80104ac <__multiply+0x50>
 80104fa:	f8b3 a000 	ldrh.w	sl, [r3]
 80104fe:	f1ba 0f00 	cmp.w	sl, #0
 8010502:	d024      	beq.n	801054e <__multiply+0xf2>
 8010504:	f104 0e14 	add.w	lr, r4, #20
 8010508:	46a9      	mov	r9, r5
 801050a:	f04f 0c00 	mov.w	ip, #0
 801050e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010512:	f8d9 1000 	ldr.w	r1, [r9]
 8010516:	fa1f fb82 	uxth.w	fp, r2
 801051a:	b289      	uxth	r1, r1
 801051c:	fb0a 110b 	mla	r1, sl, fp, r1
 8010520:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010524:	f8d9 2000 	ldr.w	r2, [r9]
 8010528:	4461      	add	r1, ip
 801052a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801052e:	fb0a c20b 	mla	r2, sl, fp, ip
 8010532:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010536:	b289      	uxth	r1, r1
 8010538:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801053c:	4577      	cmp	r7, lr
 801053e:	f849 1b04 	str.w	r1, [r9], #4
 8010542:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010546:	d8e2      	bhi.n	801050e <__multiply+0xb2>
 8010548:	9a01      	ldr	r2, [sp, #4]
 801054a:	f845 c002 	str.w	ip, [r5, r2]
 801054e:	9a03      	ldr	r2, [sp, #12]
 8010550:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010554:	3304      	adds	r3, #4
 8010556:	f1b9 0f00 	cmp.w	r9, #0
 801055a:	d020      	beq.n	801059e <__multiply+0x142>
 801055c:	6829      	ldr	r1, [r5, #0]
 801055e:	f104 0c14 	add.w	ip, r4, #20
 8010562:	46ae      	mov	lr, r5
 8010564:	f04f 0a00 	mov.w	sl, #0
 8010568:	f8bc b000 	ldrh.w	fp, [ip]
 801056c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010570:	fb09 220b 	mla	r2, r9, fp, r2
 8010574:	4492      	add	sl, r2
 8010576:	b289      	uxth	r1, r1
 8010578:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801057c:	f84e 1b04 	str.w	r1, [lr], #4
 8010580:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010584:	f8be 1000 	ldrh.w	r1, [lr]
 8010588:	0c12      	lsrs	r2, r2, #16
 801058a:	fb09 1102 	mla	r1, r9, r2, r1
 801058e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8010592:	4567      	cmp	r7, ip
 8010594:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010598:	d8e6      	bhi.n	8010568 <__multiply+0x10c>
 801059a:	9a01      	ldr	r2, [sp, #4]
 801059c:	50a9      	str	r1, [r5, r2]
 801059e:	3504      	adds	r5, #4
 80105a0:	e79a      	b.n	80104d8 <__multiply+0x7c>
 80105a2:	3e01      	subs	r6, #1
 80105a4:	e79c      	b.n	80104e0 <__multiply+0x84>
 80105a6:	bf00      	nop
 80105a8:	08014c90 	.word	0x08014c90
 80105ac:	08014d1c 	.word	0x08014d1c

080105b0 <__pow5mult>:
 80105b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80105b4:	4615      	mov	r5, r2
 80105b6:	f012 0203 	ands.w	r2, r2, #3
 80105ba:	4606      	mov	r6, r0
 80105bc:	460f      	mov	r7, r1
 80105be:	d007      	beq.n	80105d0 <__pow5mult+0x20>
 80105c0:	4c25      	ldr	r4, [pc, #148]	; (8010658 <__pow5mult+0xa8>)
 80105c2:	3a01      	subs	r2, #1
 80105c4:	2300      	movs	r3, #0
 80105c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80105ca:	f7ff fe51 	bl	8010270 <__multadd>
 80105ce:	4607      	mov	r7, r0
 80105d0:	10ad      	asrs	r5, r5, #2
 80105d2:	d03d      	beq.n	8010650 <__pow5mult+0xa0>
 80105d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80105d6:	b97c      	cbnz	r4, 80105f8 <__pow5mult+0x48>
 80105d8:	2010      	movs	r0, #16
 80105da:	f7ff fdbf 	bl	801015c <malloc>
 80105de:	4602      	mov	r2, r0
 80105e0:	6270      	str	r0, [r6, #36]	; 0x24
 80105e2:	b928      	cbnz	r0, 80105f0 <__pow5mult+0x40>
 80105e4:	4b1d      	ldr	r3, [pc, #116]	; (801065c <__pow5mult+0xac>)
 80105e6:	481e      	ldr	r0, [pc, #120]	; (8010660 <__pow5mult+0xb0>)
 80105e8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80105ec:	f000 fd2a 	bl	8011044 <__assert_func>
 80105f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80105f4:	6004      	str	r4, [r0, #0]
 80105f6:	60c4      	str	r4, [r0, #12]
 80105f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80105fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010600:	b94c      	cbnz	r4, 8010616 <__pow5mult+0x66>
 8010602:	f240 2171 	movw	r1, #625	; 0x271
 8010606:	4630      	mov	r0, r6
 8010608:	f7ff ff12 	bl	8010430 <__i2b>
 801060c:	2300      	movs	r3, #0
 801060e:	f8c8 0008 	str.w	r0, [r8, #8]
 8010612:	4604      	mov	r4, r0
 8010614:	6003      	str	r3, [r0, #0]
 8010616:	f04f 0900 	mov.w	r9, #0
 801061a:	07eb      	lsls	r3, r5, #31
 801061c:	d50a      	bpl.n	8010634 <__pow5mult+0x84>
 801061e:	4639      	mov	r1, r7
 8010620:	4622      	mov	r2, r4
 8010622:	4630      	mov	r0, r6
 8010624:	f7ff ff1a 	bl	801045c <__multiply>
 8010628:	4639      	mov	r1, r7
 801062a:	4680      	mov	r8, r0
 801062c:	4630      	mov	r0, r6
 801062e:	f7ff fdfd 	bl	801022c <_Bfree>
 8010632:	4647      	mov	r7, r8
 8010634:	106d      	asrs	r5, r5, #1
 8010636:	d00b      	beq.n	8010650 <__pow5mult+0xa0>
 8010638:	6820      	ldr	r0, [r4, #0]
 801063a:	b938      	cbnz	r0, 801064c <__pow5mult+0x9c>
 801063c:	4622      	mov	r2, r4
 801063e:	4621      	mov	r1, r4
 8010640:	4630      	mov	r0, r6
 8010642:	f7ff ff0b 	bl	801045c <__multiply>
 8010646:	6020      	str	r0, [r4, #0]
 8010648:	f8c0 9000 	str.w	r9, [r0]
 801064c:	4604      	mov	r4, r0
 801064e:	e7e4      	b.n	801061a <__pow5mult+0x6a>
 8010650:	4638      	mov	r0, r7
 8010652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010656:	bf00      	nop
 8010658:	08014e68 	.word	0x08014e68
 801065c:	08014c1e 	.word	0x08014c1e
 8010660:	08014d1c 	.word	0x08014d1c

08010664 <__lshift>:
 8010664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010668:	460c      	mov	r4, r1
 801066a:	6849      	ldr	r1, [r1, #4]
 801066c:	6923      	ldr	r3, [r4, #16]
 801066e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010672:	68a3      	ldr	r3, [r4, #8]
 8010674:	4607      	mov	r7, r0
 8010676:	4691      	mov	r9, r2
 8010678:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801067c:	f108 0601 	add.w	r6, r8, #1
 8010680:	42b3      	cmp	r3, r6
 8010682:	db0b      	blt.n	801069c <__lshift+0x38>
 8010684:	4638      	mov	r0, r7
 8010686:	f7ff fd91 	bl	80101ac <_Balloc>
 801068a:	4605      	mov	r5, r0
 801068c:	b948      	cbnz	r0, 80106a2 <__lshift+0x3e>
 801068e:	4602      	mov	r2, r0
 8010690:	4b2a      	ldr	r3, [pc, #168]	; (801073c <__lshift+0xd8>)
 8010692:	482b      	ldr	r0, [pc, #172]	; (8010740 <__lshift+0xdc>)
 8010694:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010698:	f000 fcd4 	bl	8011044 <__assert_func>
 801069c:	3101      	adds	r1, #1
 801069e:	005b      	lsls	r3, r3, #1
 80106a0:	e7ee      	b.n	8010680 <__lshift+0x1c>
 80106a2:	2300      	movs	r3, #0
 80106a4:	f100 0114 	add.w	r1, r0, #20
 80106a8:	f100 0210 	add.w	r2, r0, #16
 80106ac:	4618      	mov	r0, r3
 80106ae:	4553      	cmp	r3, sl
 80106b0:	db37      	blt.n	8010722 <__lshift+0xbe>
 80106b2:	6920      	ldr	r0, [r4, #16]
 80106b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80106b8:	f104 0314 	add.w	r3, r4, #20
 80106bc:	f019 091f 	ands.w	r9, r9, #31
 80106c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80106c4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80106c8:	d02f      	beq.n	801072a <__lshift+0xc6>
 80106ca:	f1c9 0e20 	rsb	lr, r9, #32
 80106ce:	468a      	mov	sl, r1
 80106d0:	f04f 0c00 	mov.w	ip, #0
 80106d4:	681a      	ldr	r2, [r3, #0]
 80106d6:	fa02 f209 	lsl.w	r2, r2, r9
 80106da:	ea42 020c 	orr.w	r2, r2, ip
 80106de:	f84a 2b04 	str.w	r2, [sl], #4
 80106e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80106e6:	4298      	cmp	r0, r3
 80106e8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80106ec:	d8f2      	bhi.n	80106d4 <__lshift+0x70>
 80106ee:	1b03      	subs	r3, r0, r4
 80106f0:	3b15      	subs	r3, #21
 80106f2:	f023 0303 	bic.w	r3, r3, #3
 80106f6:	3304      	adds	r3, #4
 80106f8:	f104 0215 	add.w	r2, r4, #21
 80106fc:	4290      	cmp	r0, r2
 80106fe:	bf38      	it	cc
 8010700:	2304      	movcc	r3, #4
 8010702:	f841 c003 	str.w	ip, [r1, r3]
 8010706:	f1bc 0f00 	cmp.w	ip, #0
 801070a:	d001      	beq.n	8010710 <__lshift+0xac>
 801070c:	f108 0602 	add.w	r6, r8, #2
 8010710:	3e01      	subs	r6, #1
 8010712:	4638      	mov	r0, r7
 8010714:	612e      	str	r6, [r5, #16]
 8010716:	4621      	mov	r1, r4
 8010718:	f7ff fd88 	bl	801022c <_Bfree>
 801071c:	4628      	mov	r0, r5
 801071e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010722:	f842 0f04 	str.w	r0, [r2, #4]!
 8010726:	3301      	adds	r3, #1
 8010728:	e7c1      	b.n	80106ae <__lshift+0x4a>
 801072a:	3904      	subs	r1, #4
 801072c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010730:	f841 2f04 	str.w	r2, [r1, #4]!
 8010734:	4298      	cmp	r0, r3
 8010736:	d8f9      	bhi.n	801072c <__lshift+0xc8>
 8010738:	e7ea      	b.n	8010710 <__lshift+0xac>
 801073a:	bf00      	nop
 801073c:	08014c90 	.word	0x08014c90
 8010740:	08014d1c 	.word	0x08014d1c

08010744 <__mcmp>:
 8010744:	b530      	push	{r4, r5, lr}
 8010746:	6902      	ldr	r2, [r0, #16]
 8010748:	690c      	ldr	r4, [r1, #16]
 801074a:	1b12      	subs	r2, r2, r4
 801074c:	d10e      	bne.n	801076c <__mcmp+0x28>
 801074e:	f100 0314 	add.w	r3, r0, #20
 8010752:	3114      	adds	r1, #20
 8010754:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010758:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801075c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010760:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010764:	42a5      	cmp	r5, r4
 8010766:	d003      	beq.n	8010770 <__mcmp+0x2c>
 8010768:	d305      	bcc.n	8010776 <__mcmp+0x32>
 801076a:	2201      	movs	r2, #1
 801076c:	4610      	mov	r0, r2
 801076e:	bd30      	pop	{r4, r5, pc}
 8010770:	4283      	cmp	r3, r0
 8010772:	d3f3      	bcc.n	801075c <__mcmp+0x18>
 8010774:	e7fa      	b.n	801076c <__mcmp+0x28>
 8010776:	f04f 32ff 	mov.w	r2, #4294967295
 801077a:	e7f7      	b.n	801076c <__mcmp+0x28>

0801077c <__mdiff>:
 801077c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010780:	460c      	mov	r4, r1
 8010782:	4606      	mov	r6, r0
 8010784:	4611      	mov	r1, r2
 8010786:	4620      	mov	r0, r4
 8010788:	4690      	mov	r8, r2
 801078a:	f7ff ffdb 	bl	8010744 <__mcmp>
 801078e:	1e05      	subs	r5, r0, #0
 8010790:	d110      	bne.n	80107b4 <__mdiff+0x38>
 8010792:	4629      	mov	r1, r5
 8010794:	4630      	mov	r0, r6
 8010796:	f7ff fd09 	bl	80101ac <_Balloc>
 801079a:	b930      	cbnz	r0, 80107aa <__mdiff+0x2e>
 801079c:	4b3a      	ldr	r3, [pc, #232]	; (8010888 <__mdiff+0x10c>)
 801079e:	4602      	mov	r2, r0
 80107a0:	f240 2132 	movw	r1, #562	; 0x232
 80107a4:	4839      	ldr	r0, [pc, #228]	; (801088c <__mdiff+0x110>)
 80107a6:	f000 fc4d 	bl	8011044 <__assert_func>
 80107aa:	2301      	movs	r3, #1
 80107ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80107b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107b4:	bfa4      	itt	ge
 80107b6:	4643      	movge	r3, r8
 80107b8:	46a0      	movge	r8, r4
 80107ba:	4630      	mov	r0, r6
 80107bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80107c0:	bfa6      	itte	ge
 80107c2:	461c      	movge	r4, r3
 80107c4:	2500      	movge	r5, #0
 80107c6:	2501      	movlt	r5, #1
 80107c8:	f7ff fcf0 	bl	80101ac <_Balloc>
 80107cc:	b920      	cbnz	r0, 80107d8 <__mdiff+0x5c>
 80107ce:	4b2e      	ldr	r3, [pc, #184]	; (8010888 <__mdiff+0x10c>)
 80107d0:	4602      	mov	r2, r0
 80107d2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80107d6:	e7e5      	b.n	80107a4 <__mdiff+0x28>
 80107d8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80107dc:	6926      	ldr	r6, [r4, #16]
 80107de:	60c5      	str	r5, [r0, #12]
 80107e0:	f104 0914 	add.w	r9, r4, #20
 80107e4:	f108 0514 	add.w	r5, r8, #20
 80107e8:	f100 0e14 	add.w	lr, r0, #20
 80107ec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80107f0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80107f4:	f108 0210 	add.w	r2, r8, #16
 80107f8:	46f2      	mov	sl, lr
 80107fa:	2100      	movs	r1, #0
 80107fc:	f859 3b04 	ldr.w	r3, [r9], #4
 8010800:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010804:	fa1f f883 	uxth.w	r8, r3
 8010808:	fa11 f18b 	uxtah	r1, r1, fp
 801080c:	0c1b      	lsrs	r3, r3, #16
 801080e:	eba1 0808 	sub.w	r8, r1, r8
 8010812:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010816:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801081a:	fa1f f888 	uxth.w	r8, r8
 801081e:	1419      	asrs	r1, r3, #16
 8010820:	454e      	cmp	r6, r9
 8010822:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010826:	f84a 3b04 	str.w	r3, [sl], #4
 801082a:	d8e7      	bhi.n	80107fc <__mdiff+0x80>
 801082c:	1b33      	subs	r3, r6, r4
 801082e:	3b15      	subs	r3, #21
 8010830:	f023 0303 	bic.w	r3, r3, #3
 8010834:	3304      	adds	r3, #4
 8010836:	3415      	adds	r4, #21
 8010838:	42a6      	cmp	r6, r4
 801083a:	bf38      	it	cc
 801083c:	2304      	movcc	r3, #4
 801083e:	441d      	add	r5, r3
 8010840:	4473      	add	r3, lr
 8010842:	469e      	mov	lr, r3
 8010844:	462e      	mov	r6, r5
 8010846:	4566      	cmp	r6, ip
 8010848:	d30e      	bcc.n	8010868 <__mdiff+0xec>
 801084a:	f10c 0203 	add.w	r2, ip, #3
 801084e:	1b52      	subs	r2, r2, r5
 8010850:	f022 0203 	bic.w	r2, r2, #3
 8010854:	3d03      	subs	r5, #3
 8010856:	45ac      	cmp	ip, r5
 8010858:	bf38      	it	cc
 801085a:	2200      	movcc	r2, #0
 801085c:	441a      	add	r2, r3
 801085e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010862:	b17b      	cbz	r3, 8010884 <__mdiff+0x108>
 8010864:	6107      	str	r7, [r0, #16]
 8010866:	e7a3      	b.n	80107b0 <__mdiff+0x34>
 8010868:	f856 8b04 	ldr.w	r8, [r6], #4
 801086c:	fa11 f288 	uxtah	r2, r1, r8
 8010870:	1414      	asrs	r4, r2, #16
 8010872:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010876:	b292      	uxth	r2, r2
 8010878:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801087c:	f84e 2b04 	str.w	r2, [lr], #4
 8010880:	1421      	asrs	r1, r4, #16
 8010882:	e7e0      	b.n	8010846 <__mdiff+0xca>
 8010884:	3f01      	subs	r7, #1
 8010886:	e7ea      	b.n	801085e <__mdiff+0xe2>
 8010888:	08014c90 	.word	0x08014c90
 801088c:	08014d1c 	.word	0x08014d1c

08010890 <__ulp>:
 8010890:	b082      	sub	sp, #8
 8010892:	ed8d 0b00 	vstr	d0, [sp]
 8010896:	9b01      	ldr	r3, [sp, #4]
 8010898:	4912      	ldr	r1, [pc, #72]	; (80108e4 <__ulp+0x54>)
 801089a:	4019      	ands	r1, r3
 801089c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80108a0:	2900      	cmp	r1, #0
 80108a2:	dd05      	ble.n	80108b0 <__ulp+0x20>
 80108a4:	2200      	movs	r2, #0
 80108a6:	460b      	mov	r3, r1
 80108a8:	ec43 2b10 	vmov	d0, r2, r3
 80108ac:	b002      	add	sp, #8
 80108ae:	4770      	bx	lr
 80108b0:	4249      	negs	r1, r1
 80108b2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80108b6:	ea4f 5021 	mov.w	r0, r1, asr #20
 80108ba:	f04f 0200 	mov.w	r2, #0
 80108be:	f04f 0300 	mov.w	r3, #0
 80108c2:	da04      	bge.n	80108ce <__ulp+0x3e>
 80108c4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80108c8:	fa41 f300 	asr.w	r3, r1, r0
 80108cc:	e7ec      	b.n	80108a8 <__ulp+0x18>
 80108ce:	f1a0 0114 	sub.w	r1, r0, #20
 80108d2:	291e      	cmp	r1, #30
 80108d4:	bfda      	itte	le
 80108d6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80108da:	fa20 f101 	lsrle.w	r1, r0, r1
 80108de:	2101      	movgt	r1, #1
 80108e0:	460a      	mov	r2, r1
 80108e2:	e7e1      	b.n	80108a8 <__ulp+0x18>
 80108e4:	7ff00000 	.word	0x7ff00000

080108e8 <__b2d>:
 80108e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108ea:	6905      	ldr	r5, [r0, #16]
 80108ec:	f100 0714 	add.w	r7, r0, #20
 80108f0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80108f4:	1f2e      	subs	r6, r5, #4
 80108f6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80108fa:	4620      	mov	r0, r4
 80108fc:	f7ff fd48 	bl	8010390 <__hi0bits>
 8010900:	f1c0 0320 	rsb	r3, r0, #32
 8010904:	280a      	cmp	r0, #10
 8010906:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8010984 <__b2d+0x9c>
 801090a:	600b      	str	r3, [r1, #0]
 801090c:	dc14      	bgt.n	8010938 <__b2d+0x50>
 801090e:	f1c0 0e0b 	rsb	lr, r0, #11
 8010912:	fa24 f10e 	lsr.w	r1, r4, lr
 8010916:	42b7      	cmp	r7, r6
 8010918:	ea41 030c 	orr.w	r3, r1, ip
 801091c:	bf34      	ite	cc
 801091e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010922:	2100      	movcs	r1, #0
 8010924:	3015      	adds	r0, #21
 8010926:	fa04 f000 	lsl.w	r0, r4, r0
 801092a:	fa21 f10e 	lsr.w	r1, r1, lr
 801092e:	ea40 0201 	orr.w	r2, r0, r1
 8010932:	ec43 2b10 	vmov	d0, r2, r3
 8010936:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010938:	42b7      	cmp	r7, r6
 801093a:	bf3a      	itte	cc
 801093c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010940:	f1a5 0608 	subcc.w	r6, r5, #8
 8010944:	2100      	movcs	r1, #0
 8010946:	380b      	subs	r0, #11
 8010948:	d017      	beq.n	801097a <__b2d+0x92>
 801094a:	f1c0 0c20 	rsb	ip, r0, #32
 801094e:	fa04 f500 	lsl.w	r5, r4, r0
 8010952:	42be      	cmp	r6, r7
 8010954:	fa21 f40c 	lsr.w	r4, r1, ip
 8010958:	ea45 0504 	orr.w	r5, r5, r4
 801095c:	bf8c      	ite	hi
 801095e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8010962:	2400      	movls	r4, #0
 8010964:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8010968:	fa01 f000 	lsl.w	r0, r1, r0
 801096c:	fa24 f40c 	lsr.w	r4, r4, ip
 8010970:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010974:	ea40 0204 	orr.w	r2, r0, r4
 8010978:	e7db      	b.n	8010932 <__b2d+0x4a>
 801097a:	ea44 030c 	orr.w	r3, r4, ip
 801097e:	460a      	mov	r2, r1
 8010980:	e7d7      	b.n	8010932 <__b2d+0x4a>
 8010982:	bf00      	nop
 8010984:	3ff00000 	.word	0x3ff00000

08010988 <__d2b>:
 8010988:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801098c:	4689      	mov	r9, r1
 801098e:	2101      	movs	r1, #1
 8010990:	ec57 6b10 	vmov	r6, r7, d0
 8010994:	4690      	mov	r8, r2
 8010996:	f7ff fc09 	bl	80101ac <_Balloc>
 801099a:	4604      	mov	r4, r0
 801099c:	b930      	cbnz	r0, 80109ac <__d2b+0x24>
 801099e:	4602      	mov	r2, r0
 80109a0:	4b25      	ldr	r3, [pc, #148]	; (8010a38 <__d2b+0xb0>)
 80109a2:	4826      	ldr	r0, [pc, #152]	; (8010a3c <__d2b+0xb4>)
 80109a4:	f240 310a 	movw	r1, #778	; 0x30a
 80109a8:	f000 fb4c 	bl	8011044 <__assert_func>
 80109ac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80109b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80109b4:	bb35      	cbnz	r5, 8010a04 <__d2b+0x7c>
 80109b6:	2e00      	cmp	r6, #0
 80109b8:	9301      	str	r3, [sp, #4]
 80109ba:	d028      	beq.n	8010a0e <__d2b+0x86>
 80109bc:	4668      	mov	r0, sp
 80109be:	9600      	str	r6, [sp, #0]
 80109c0:	f7ff fd06 	bl	80103d0 <__lo0bits>
 80109c4:	9900      	ldr	r1, [sp, #0]
 80109c6:	b300      	cbz	r0, 8010a0a <__d2b+0x82>
 80109c8:	9a01      	ldr	r2, [sp, #4]
 80109ca:	f1c0 0320 	rsb	r3, r0, #32
 80109ce:	fa02 f303 	lsl.w	r3, r2, r3
 80109d2:	430b      	orrs	r3, r1
 80109d4:	40c2      	lsrs	r2, r0
 80109d6:	6163      	str	r3, [r4, #20]
 80109d8:	9201      	str	r2, [sp, #4]
 80109da:	9b01      	ldr	r3, [sp, #4]
 80109dc:	61a3      	str	r3, [r4, #24]
 80109de:	2b00      	cmp	r3, #0
 80109e0:	bf14      	ite	ne
 80109e2:	2202      	movne	r2, #2
 80109e4:	2201      	moveq	r2, #1
 80109e6:	6122      	str	r2, [r4, #16]
 80109e8:	b1d5      	cbz	r5, 8010a20 <__d2b+0x98>
 80109ea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80109ee:	4405      	add	r5, r0
 80109f0:	f8c9 5000 	str.w	r5, [r9]
 80109f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80109f8:	f8c8 0000 	str.w	r0, [r8]
 80109fc:	4620      	mov	r0, r4
 80109fe:	b003      	add	sp, #12
 8010a00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010a04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010a08:	e7d5      	b.n	80109b6 <__d2b+0x2e>
 8010a0a:	6161      	str	r1, [r4, #20]
 8010a0c:	e7e5      	b.n	80109da <__d2b+0x52>
 8010a0e:	a801      	add	r0, sp, #4
 8010a10:	f7ff fcde 	bl	80103d0 <__lo0bits>
 8010a14:	9b01      	ldr	r3, [sp, #4]
 8010a16:	6163      	str	r3, [r4, #20]
 8010a18:	2201      	movs	r2, #1
 8010a1a:	6122      	str	r2, [r4, #16]
 8010a1c:	3020      	adds	r0, #32
 8010a1e:	e7e3      	b.n	80109e8 <__d2b+0x60>
 8010a20:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010a24:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010a28:	f8c9 0000 	str.w	r0, [r9]
 8010a2c:	6918      	ldr	r0, [r3, #16]
 8010a2e:	f7ff fcaf 	bl	8010390 <__hi0bits>
 8010a32:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010a36:	e7df      	b.n	80109f8 <__d2b+0x70>
 8010a38:	08014c90 	.word	0x08014c90
 8010a3c:	08014d1c 	.word	0x08014d1c

08010a40 <__ratio>:
 8010a40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a44:	4688      	mov	r8, r1
 8010a46:	4669      	mov	r1, sp
 8010a48:	4681      	mov	r9, r0
 8010a4a:	f7ff ff4d 	bl	80108e8 <__b2d>
 8010a4e:	a901      	add	r1, sp, #4
 8010a50:	4640      	mov	r0, r8
 8010a52:	ec55 4b10 	vmov	r4, r5, d0
 8010a56:	ee10 aa10 	vmov	sl, s0
 8010a5a:	f7ff ff45 	bl	80108e8 <__b2d>
 8010a5e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010a62:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8010a66:	1a59      	subs	r1, r3, r1
 8010a68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010a6c:	1ad3      	subs	r3, r2, r3
 8010a6e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8010a72:	ec57 6b10 	vmov	r6, r7, d0
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	bfd6      	itet	le
 8010a7a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010a7e:	462a      	movgt	r2, r5
 8010a80:	463a      	movle	r2, r7
 8010a82:	46ab      	mov	fp, r5
 8010a84:	bfd6      	itet	le
 8010a86:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8010a8a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8010a8e:	ee00 3a90 	vmovle	s1, r3
 8010a92:	ec4b ab17 	vmov	d7, sl, fp
 8010a96:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8010a9a:	b003      	add	sp, #12
 8010a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010aa0 <__copybits>:
 8010aa0:	3901      	subs	r1, #1
 8010aa2:	b570      	push	{r4, r5, r6, lr}
 8010aa4:	1149      	asrs	r1, r1, #5
 8010aa6:	6914      	ldr	r4, [r2, #16]
 8010aa8:	3101      	adds	r1, #1
 8010aaa:	f102 0314 	add.w	r3, r2, #20
 8010aae:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010ab2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010ab6:	1f05      	subs	r5, r0, #4
 8010ab8:	42a3      	cmp	r3, r4
 8010aba:	d30c      	bcc.n	8010ad6 <__copybits+0x36>
 8010abc:	1aa3      	subs	r3, r4, r2
 8010abe:	3b11      	subs	r3, #17
 8010ac0:	f023 0303 	bic.w	r3, r3, #3
 8010ac4:	3211      	adds	r2, #17
 8010ac6:	42a2      	cmp	r2, r4
 8010ac8:	bf88      	it	hi
 8010aca:	2300      	movhi	r3, #0
 8010acc:	4418      	add	r0, r3
 8010ace:	2300      	movs	r3, #0
 8010ad0:	4288      	cmp	r0, r1
 8010ad2:	d305      	bcc.n	8010ae0 <__copybits+0x40>
 8010ad4:	bd70      	pop	{r4, r5, r6, pc}
 8010ad6:	f853 6b04 	ldr.w	r6, [r3], #4
 8010ada:	f845 6f04 	str.w	r6, [r5, #4]!
 8010ade:	e7eb      	b.n	8010ab8 <__copybits+0x18>
 8010ae0:	f840 3b04 	str.w	r3, [r0], #4
 8010ae4:	e7f4      	b.n	8010ad0 <__copybits+0x30>

08010ae6 <__any_on>:
 8010ae6:	f100 0214 	add.w	r2, r0, #20
 8010aea:	6900      	ldr	r0, [r0, #16]
 8010aec:	114b      	asrs	r3, r1, #5
 8010aee:	4298      	cmp	r0, r3
 8010af0:	b510      	push	{r4, lr}
 8010af2:	db11      	blt.n	8010b18 <__any_on+0x32>
 8010af4:	dd0a      	ble.n	8010b0c <__any_on+0x26>
 8010af6:	f011 011f 	ands.w	r1, r1, #31
 8010afa:	d007      	beq.n	8010b0c <__any_on+0x26>
 8010afc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010b00:	fa24 f001 	lsr.w	r0, r4, r1
 8010b04:	fa00 f101 	lsl.w	r1, r0, r1
 8010b08:	428c      	cmp	r4, r1
 8010b0a:	d10b      	bne.n	8010b24 <__any_on+0x3e>
 8010b0c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010b10:	4293      	cmp	r3, r2
 8010b12:	d803      	bhi.n	8010b1c <__any_on+0x36>
 8010b14:	2000      	movs	r0, #0
 8010b16:	bd10      	pop	{r4, pc}
 8010b18:	4603      	mov	r3, r0
 8010b1a:	e7f7      	b.n	8010b0c <__any_on+0x26>
 8010b1c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010b20:	2900      	cmp	r1, #0
 8010b22:	d0f5      	beq.n	8010b10 <__any_on+0x2a>
 8010b24:	2001      	movs	r0, #1
 8010b26:	e7f6      	b.n	8010b16 <__any_on+0x30>

08010b28 <_calloc_r>:
 8010b28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010b2a:	fba1 2402 	umull	r2, r4, r1, r2
 8010b2e:	b94c      	cbnz	r4, 8010b44 <_calloc_r+0x1c>
 8010b30:	4611      	mov	r1, r2
 8010b32:	9201      	str	r2, [sp, #4]
 8010b34:	f000 f87a 	bl	8010c2c <_malloc_r>
 8010b38:	9a01      	ldr	r2, [sp, #4]
 8010b3a:	4605      	mov	r5, r0
 8010b3c:	b930      	cbnz	r0, 8010b4c <_calloc_r+0x24>
 8010b3e:	4628      	mov	r0, r5
 8010b40:	b003      	add	sp, #12
 8010b42:	bd30      	pop	{r4, r5, pc}
 8010b44:	220c      	movs	r2, #12
 8010b46:	6002      	str	r2, [r0, #0]
 8010b48:	2500      	movs	r5, #0
 8010b4a:	e7f8      	b.n	8010b3e <_calloc_r+0x16>
 8010b4c:	4621      	mov	r1, r4
 8010b4e:	f7fc fcc5 	bl	800d4dc <memset>
 8010b52:	e7f4      	b.n	8010b3e <_calloc_r+0x16>

08010b54 <_free_r>:
 8010b54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010b56:	2900      	cmp	r1, #0
 8010b58:	d044      	beq.n	8010be4 <_free_r+0x90>
 8010b5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010b5e:	9001      	str	r0, [sp, #4]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	f1a1 0404 	sub.w	r4, r1, #4
 8010b66:	bfb8      	it	lt
 8010b68:	18e4      	addlt	r4, r4, r3
 8010b6a:	f000 fab5 	bl	80110d8 <__malloc_lock>
 8010b6e:	4a1e      	ldr	r2, [pc, #120]	; (8010be8 <_free_r+0x94>)
 8010b70:	9801      	ldr	r0, [sp, #4]
 8010b72:	6813      	ldr	r3, [r2, #0]
 8010b74:	b933      	cbnz	r3, 8010b84 <_free_r+0x30>
 8010b76:	6063      	str	r3, [r4, #4]
 8010b78:	6014      	str	r4, [r2, #0]
 8010b7a:	b003      	add	sp, #12
 8010b7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010b80:	f000 bab0 	b.w	80110e4 <__malloc_unlock>
 8010b84:	42a3      	cmp	r3, r4
 8010b86:	d908      	bls.n	8010b9a <_free_r+0x46>
 8010b88:	6825      	ldr	r5, [r4, #0]
 8010b8a:	1961      	adds	r1, r4, r5
 8010b8c:	428b      	cmp	r3, r1
 8010b8e:	bf01      	itttt	eq
 8010b90:	6819      	ldreq	r1, [r3, #0]
 8010b92:	685b      	ldreq	r3, [r3, #4]
 8010b94:	1949      	addeq	r1, r1, r5
 8010b96:	6021      	streq	r1, [r4, #0]
 8010b98:	e7ed      	b.n	8010b76 <_free_r+0x22>
 8010b9a:	461a      	mov	r2, r3
 8010b9c:	685b      	ldr	r3, [r3, #4]
 8010b9e:	b10b      	cbz	r3, 8010ba4 <_free_r+0x50>
 8010ba0:	42a3      	cmp	r3, r4
 8010ba2:	d9fa      	bls.n	8010b9a <_free_r+0x46>
 8010ba4:	6811      	ldr	r1, [r2, #0]
 8010ba6:	1855      	adds	r5, r2, r1
 8010ba8:	42a5      	cmp	r5, r4
 8010baa:	d10b      	bne.n	8010bc4 <_free_r+0x70>
 8010bac:	6824      	ldr	r4, [r4, #0]
 8010bae:	4421      	add	r1, r4
 8010bb0:	1854      	adds	r4, r2, r1
 8010bb2:	42a3      	cmp	r3, r4
 8010bb4:	6011      	str	r1, [r2, #0]
 8010bb6:	d1e0      	bne.n	8010b7a <_free_r+0x26>
 8010bb8:	681c      	ldr	r4, [r3, #0]
 8010bba:	685b      	ldr	r3, [r3, #4]
 8010bbc:	6053      	str	r3, [r2, #4]
 8010bbe:	4421      	add	r1, r4
 8010bc0:	6011      	str	r1, [r2, #0]
 8010bc2:	e7da      	b.n	8010b7a <_free_r+0x26>
 8010bc4:	d902      	bls.n	8010bcc <_free_r+0x78>
 8010bc6:	230c      	movs	r3, #12
 8010bc8:	6003      	str	r3, [r0, #0]
 8010bca:	e7d6      	b.n	8010b7a <_free_r+0x26>
 8010bcc:	6825      	ldr	r5, [r4, #0]
 8010bce:	1961      	adds	r1, r4, r5
 8010bd0:	428b      	cmp	r3, r1
 8010bd2:	bf04      	itt	eq
 8010bd4:	6819      	ldreq	r1, [r3, #0]
 8010bd6:	685b      	ldreq	r3, [r3, #4]
 8010bd8:	6063      	str	r3, [r4, #4]
 8010bda:	bf04      	itt	eq
 8010bdc:	1949      	addeq	r1, r1, r5
 8010bde:	6021      	streq	r1, [r4, #0]
 8010be0:	6054      	str	r4, [r2, #4]
 8010be2:	e7ca      	b.n	8010b7a <_free_r+0x26>
 8010be4:	b003      	add	sp, #12
 8010be6:	bd30      	pop	{r4, r5, pc}
 8010be8:	24004a4c 	.word	0x24004a4c

08010bec <sbrk_aligned>:
 8010bec:	b570      	push	{r4, r5, r6, lr}
 8010bee:	4e0e      	ldr	r6, [pc, #56]	; (8010c28 <sbrk_aligned+0x3c>)
 8010bf0:	460c      	mov	r4, r1
 8010bf2:	6831      	ldr	r1, [r6, #0]
 8010bf4:	4605      	mov	r5, r0
 8010bf6:	b911      	cbnz	r1, 8010bfe <sbrk_aligned+0x12>
 8010bf8:	f000 f9f2 	bl	8010fe0 <_sbrk_r>
 8010bfc:	6030      	str	r0, [r6, #0]
 8010bfe:	4621      	mov	r1, r4
 8010c00:	4628      	mov	r0, r5
 8010c02:	f000 f9ed 	bl	8010fe0 <_sbrk_r>
 8010c06:	1c43      	adds	r3, r0, #1
 8010c08:	d00a      	beq.n	8010c20 <sbrk_aligned+0x34>
 8010c0a:	1cc4      	adds	r4, r0, #3
 8010c0c:	f024 0403 	bic.w	r4, r4, #3
 8010c10:	42a0      	cmp	r0, r4
 8010c12:	d007      	beq.n	8010c24 <sbrk_aligned+0x38>
 8010c14:	1a21      	subs	r1, r4, r0
 8010c16:	4628      	mov	r0, r5
 8010c18:	f000 f9e2 	bl	8010fe0 <_sbrk_r>
 8010c1c:	3001      	adds	r0, #1
 8010c1e:	d101      	bne.n	8010c24 <sbrk_aligned+0x38>
 8010c20:	f04f 34ff 	mov.w	r4, #4294967295
 8010c24:	4620      	mov	r0, r4
 8010c26:	bd70      	pop	{r4, r5, r6, pc}
 8010c28:	24004a50 	.word	0x24004a50

08010c2c <_malloc_r>:
 8010c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c30:	1ccd      	adds	r5, r1, #3
 8010c32:	f025 0503 	bic.w	r5, r5, #3
 8010c36:	3508      	adds	r5, #8
 8010c38:	2d0c      	cmp	r5, #12
 8010c3a:	bf38      	it	cc
 8010c3c:	250c      	movcc	r5, #12
 8010c3e:	2d00      	cmp	r5, #0
 8010c40:	4607      	mov	r7, r0
 8010c42:	db01      	blt.n	8010c48 <_malloc_r+0x1c>
 8010c44:	42a9      	cmp	r1, r5
 8010c46:	d905      	bls.n	8010c54 <_malloc_r+0x28>
 8010c48:	230c      	movs	r3, #12
 8010c4a:	603b      	str	r3, [r7, #0]
 8010c4c:	2600      	movs	r6, #0
 8010c4e:	4630      	mov	r0, r6
 8010c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c54:	4e2e      	ldr	r6, [pc, #184]	; (8010d10 <_malloc_r+0xe4>)
 8010c56:	f000 fa3f 	bl	80110d8 <__malloc_lock>
 8010c5a:	6833      	ldr	r3, [r6, #0]
 8010c5c:	461c      	mov	r4, r3
 8010c5e:	bb34      	cbnz	r4, 8010cae <_malloc_r+0x82>
 8010c60:	4629      	mov	r1, r5
 8010c62:	4638      	mov	r0, r7
 8010c64:	f7ff ffc2 	bl	8010bec <sbrk_aligned>
 8010c68:	1c43      	adds	r3, r0, #1
 8010c6a:	4604      	mov	r4, r0
 8010c6c:	d14d      	bne.n	8010d0a <_malloc_r+0xde>
 8010c6e:	6834      	ldr	r4, [r6, #0]
 8010c70:	4626      	mov	r6, r4
 8010c72:	2e00      	cmp	r6, #0
 8010c74:	d140      	bne.n	8010cf8 <_malloc_r+0xcc>
 8010c76:	6823      	ldr	r3, [r4, #0]
 8010c78:	4631      	mov	r1, r6
 8010c7a:	4638      	mov	r0, r7
 8010c7c:	eb04 0803 	add.w	r8, r4, r3
 8010c80:	f000 f9ae 	bl	8010fe0 <_sbrk_r>
 8010c84:	4580      	cmp	r8, r0
 8010c86:	d13a      	bne.n	8010cfe <_malloc_r+0xd2>
 8010c88:	6821      	ldr	r1, [r4, #0]
 8010c8a:	3503      	adds	r5, #3
 8010c8c:	1a6d      	subs	r5, r5, r1
 8010c8e:	f025 0503 	bic.w	r5, r5, #3
 8010c92:	3508      	adds	r5, #8
 8010c94:	2d0c      	cmp	r5, #12
 8010c96:	bf38      	it	cc
 8010c98:	250c      	movcc	r5, #12
 8010c9a:	4629      	mov	r1, r5
 8010c9c:	4638      	mov	r0, r7
 8010c9e:	f7ff ffa5 	bl	8010bec <sbrk_aligned>
 8010ca2:	3001      	adds	r0, #1
 8010ca4:	d02b      	beq.n	8010cfe <_malloc_r+0xd2>
 8010ca6:	6823      	ldr	r3, [r4, #0]
 8010ca8:	442b      	add	r3, r5
 8010caa:	6023      	str	r3, [r4, #0]
 8010cac:	e00e      	b.n	8010ccc <_malloc_r+0xa0>
 8010cae:	6822      	ldr	r2, [r4, #0]
 8010cb0:	1b52      	subs	r2, r2, r5
 8010cb2:	d41e      	bmi.n	8010cf2 <_malloc_r+0xc6>
 8010cb4:	2a0b      	cmp	r2, #11
 8010cb6:	d916      	bls.n	8010ce6 <_malloc_r+0xba>
 8010cb8:	1961      	adds	r1, r4, r5
 8010cba:	42a3      	cmp	r3, r4
 8010cbc:	6025      	str	r5, [r4, #0]
 8010cbe:	bf18      	it	ne
 8010cc0:	6059      	strne	r1, [r3, #4]
 8010cc2:	6863      	ldr	r3, [r4, #4]
 8010cc4:	bf08      	it	eq
 8010cc6:	6031      	streq	r1, [r6, #0]
 8010cc8:	5162      	str	r2, [r4, r5]
 8010cca:	604b      	str	r3, [r1, #4]
 8010ccc:	4638      	mov	r0, r7
 8010cce:	f104 060b 	add.w	r6, r4, #11
 8010cd2:	f000 fa07 	bl	80110e4 <__malloc_unlock>
 8010cd6:	f026 0607 	bic.w	r6, r6, #7
 8010cda:	1d23      	adds	r3, r4, #4
 8010cdc:	1af2      	subs	r2, r6, r3
 8010cde:	d0b6      	beq.n	8010c4e <_malloc_r+0x22>
 8010ce0:	1b9b      	subs	r3, r3, r6
 8010ce2:	50a3      	str	r3, [r4, r2]
 8010ce4:	e7b3      	b.n	8010c4e <_malloc_r+0x22>
 8010ce6:	6862      	ldr	r2, [r4, #4]
 8010ce8:	42a3      	cmp	r3, r4
 8010cea:	bf0c      	ite	eq
 8010cec:	6032      	streq	r2, [r6, #0]
 8010cee:	605a      	strne	r2, [r3, #4]
 8010cf0:	e7ec      	b.n	8010ccc <_malloc_r+0xa0>
 8010cf2:	4623      	mov	r3, r4
 8010cf4:	6864      	ldr	r4, [r4, #4]
 8010cf6:	e7b2      	b.n	8010c5e <_malloc_r+0x32>
 8010cf8:	4634      	mov	r4, r6
 8010cfa:	6876      	ldr	r6, [r6, #4]
 8010cfc:	e7b9      	b.n	8010c72 <_malloc_r+0x46>
 8010cfe:	230c      	movs	r3, #12
 8010d00:	603b      	str	r3, [r7, #0]
 8010d02:	4638      	mov	r0, r7
 8010d04:	f000 f9ee 	bl	80110e4 <__malloc_unlock>
 8010d08:	e7a1      	b.n	8010c4e <_malloc_r+0x22>
 8010d0a:	6025      	str	r5, [r4, #0]
 8010d0c:	e7de      	b.n	8010ccc <_malloc_r+0xa0>
 8010d0e:	bf00      	nop
 8010d10:	24004a4c 	.word	0x24004a4c

08010d14 <__ssputs_r>:
 8010d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d18:	688e      	ldr	r6, [r1, #8]
 8010d1a:	429e      	cmp	r6, r3
 8010d1c:	4682      	mov	sl, r0
 8010d1e:	460c      	mov	r4, r1
 8010d20:	4690      	mov	r8, r2
 8010d22:	461f      	mov	r7, r3
 8010d24:	d838      	bhi.n	8010d98 <__ssputs_r+0x84>
 8010d26:	898a      	ldrh	r2, [r1, #12]
 8010d28:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010d2c:	d032      	beq.n	8010d94 <__ssputs_r+0x80>
 8010d2e:	6825      	ldr	r5, [r4, #0]
 8010d30:	6909      	ldr	r1, [r1, #16]
 8010d32:	eba5 0901 	sub.w	r9, r5, r1
 8010d36:	6965      	ldr	r5, [r4, #20]
 8010d38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010d3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010d40:	3301      	adds	r3, #1
 8010d42:	444b      	add	r3, r9
 8010d44:	106d      	asrs	r5, r5, #1
 8010d46:	429d      	cmp	r5, r3
 8010d48:	bf38      	it	cc
 8010d4a:	461d      	movcc	r5, r3
 8010d4c:	0553      	lsls	r3, r2, #21
 8010d4e:	d531      	bpl.n	8010db4 <__ssputs_r+0xa0>
 8010d50:	4629      	mov	r1, r5
 8010d52:	f7ff ff6b 	bl	8010c2c <_malloc_r>
 8010d56:	4606      	mov	r6, r0
 8010d58:	b950      	cbnz	r0, 8010d70 <__ssputs_r+0x5c>
 8010d5a:	230c      	movs	r3, #12
 8010d5c:	f8ca 3000 	str.w	r3, [sl]
 8010d60:	89a3      	ldrh	r3, [r4, #12]
 8010d62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d66:	81a3      	strh	r3, [r4, #12]
 8010d68:	f04f 30ff 	mov.w	r0, #4294967295
 8010d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d70:	6921      	ldr	r1, [r4, #16]
 8010d72:	464a      	mov	r2, r9
 8010d74:	f7ff fa0c 	bl	8010190 <memcpy>
 8010d78:	89a3      	ldrh	r3, [r4, #12]
 8010d7a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010d7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010d82:	81a3      	strh	r3, [r4, #12]
 8010d84:	6126      	str	r6, [r4, #16]
 8010d86:	6165      	str	r5, [r4, #20]
 8010d88:	444e      	add	r6, r9
 8010d8a:	eba5 0509 	sub.w	r5, r5, r9
 8010d8e:	6026      	str	r6, [r4, #0]
 8010d90:	60a5      	str	r5, [r4, #8]
 8010d92:	463e      	mov	r6, r7
 8010d94:	42be      	cmp	r6, r7
 8010d96:	d900      	bls.n	8010d9a <__ssputs_r+0x86>
 8010d98:	463e      	mov	r6, r7
 8010d9a:	6820      	ldr	r0, [r4, #0]
 8010d9c:	4632      	mov	r2, r6
 8010d9e:	4641      	mov	r1, r8
 8010da0:	f000 f980 	bl	80110a4 <memmove>
 8010da4:	68a3      	ldr	r3, [r4, #8]
 8010da6:	1b9b      	subs	r3, r3, r6
 8010da8:	60a3      	str	r3, [r4, #8]
 8010daa:	6823      	ldr	r3, [r4, #0]
 8010dac:	4433      	add	r3, r6
 8010dae:	6023      	str	r3, [r4, #0]
 8010db0:	2000      	movs	r0, #0
 8010db2:	e7db      	b.n	8010d6c <__ssputs_r+0x58>
 8010db4:	462a      	mov	r2, r5
 8010db6:	f000 f99b 	bl	80110f0 <_realloc_r>
 8010dba:	4606      	mov	r6, r0
 8010dbc:	2800      	cmp	r0, #0
 8010dbe:	d1e1      	bne.n	8010d84 <__ssputs_r+0x70>
 8010dc0:	6921      	ldr	r1, [r4, #16]
 8010dc2:	4650      	mov	r0, sl
 8010dc4:	f7ff fec6 	bl	8010b54 <_free_r>
 8010dc8:	e7c7      	b.n	8010d5a <__ssputs_r+0x46>
	...

08010dcc <_svfiprintf_r>:
 8010dcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dd0:	4698      	mov	r8, r3
 8010dd2:	898b      	ldrh	r3, [r1, #12]
 8010dd4:	061b      	lsls	r3, r3, #24
 8010dd6:	b09d      	sub	sp, #116	; 0x74
 8010dd8:	4607      	mov	r7, r0
 8010dda:	460d      	mov	r5, r1
 8010ddc:	4614      	mov	r4, r2
 8010dde:	d50e      	bpl.n	8010dfe <_svfiprintf_r+0x32>
 8010de0:	690b      	ldr	r3, [r1, #16]
 8010de2:	b963      	cbnz	r3, 8010dfe <_svfiprintf_r+0x32>
 8010de4:	2140      	movs	r1, #64	; 0x40
 8010de6:	f7ff ff21 	bl	8010c2c <_malloc_r>
 8010dea:	6028      	str	r0, [r5, #0]
 8010dec:	6128      	str	r0, [r5, #16]
 8010dee:	b920      	cbnz	r0, 8010dfa <_svfiprintf_r+0x2e>
 8010df0:	230c      	movs	r3, #12
 8010df2:	603b      	str	r3, [r7, #0]
 8010df4:	f04f 30ff 	mov.w	r0, #4294967295
 8010df8:	e0d1      	b.n	8010f9e <_svfiprintf_r+0x1d2>
 8010dfa:	2340      	movs	r3, #64	; 0x40
 8010dfc:	616b      	str	r3, [r5, #20]
 8010dfe:	2300      	movs	r3, #0
 8010e00:	9309      	str	r3, [sp, #36]	; 0x24
 8010e02:	2320      	movs	r3, #32
 8010e04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010e08:	f8cd 800c 	str.w	r8, [sp, #12]
 8010e0c:	2330      	movs	r3, #48	; 0x30
 8010e0e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010fb8 <_svfiprintf_r+0x1ec>
 8010e12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010e16:	f04f 0901 	mov.w	r9, #1
 8010e1a:	4623      	mov	r3, r4
 8010e1c:	469a      	mov	sl, r3
 8010e1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010e22:	b10a      	cbz	r2, 8010e28 <_svfiprintf_r+0x5c>
 8010e24:	2a25      	cmp	r2, #37	; 0x25
 8010e26:	d1f9      	bne.n	8010e1c <_svfiprintf_r+0x50>
 8010e28:	ebba 0b04 	subs.w	fp, sl, r4
 8010e2c:	d00b      	beq.n	8010e46 <_svfiprintf_r+0x7a>
 8010e2e:	465b      	mov	r3, fp
 8010e30:	4622      	mov	r2, r4
 8010e32:	4629      	mov	r1, r5
 8010e34:	4638      	mov	r0, r7
 8010e36:	f7ff ff6d 	bl	8010d14 <__ssputs_r>
 8010e3a:	3001      	adds	r0, #1
 8010e3c:	f000 80aa 	beq.w	8010f94 <_svfiprintf_r+0x1c8>
 8010e40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010e42:	445a      	add	r2, fp
 8010e44:	9209      	str	r2, [sp, #36]	; 0x24
 8010e46:	f89a 3000 	ldrb.w	r3, [sl]
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	f000 80a2 	beq.w	8010f94 <_svfiprintf_r+0x1c8>
 8010e50:	2300      	movs	r3, #0
 8010e52:	f04f 32ff 	mov.w	r2, #4294967295
 8010e56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010e5a:	f10a 0a01 	add.w	sl, sl, #1
 8010e5e:	9304      	str	r3, [sp, #16]
 8010e60:	9307      	str	r3, [sp, #28]
 8010e62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010e66:	931a      	str	r3, [sp, #104]	; 0x68
 8010e68:	4654      	mov	r4, sl
 8010e6a:	2205      	movs	r2, #5
 8010e6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e70:	4851      	ldr	r0, [pc, #324]	; (8010fb8 <_svfiprintf_r+0x1ec>)
 8010e72:	f7ef fa9d 	bl	80003b0 <memchr>
 8010e76:	9a04      	ldr	r2, [sp, #16]
 8010e78:	b9d8      	cbnz	r0, 8010eb2 <_svfiprintf_r+0xe6>
 8010e7a:	06d0      	lsls	r0, r2, #27
 8010e7c:	bf44      	itt	mi
 8010e7e:	2320      	movmi	r3, #32
 8010e80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010e84:	0711      	lsls	r1, r2, #28
 8010e86:	bf44      	itt	mi
 8010e88:	232b      	movmi	r3, #43	; 0x2b
 8010e8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010e8e:	f89a 3000 	ldrb.w	r3, [sl]
 8010e92:	2b2a      	cmp	r3, #42	; 0x2a
 8010e94:	d015      	beq.n	8010ec2 <_svfiprintf_r+0xf6>
 8010e96:	9a07      	ldr	r2, [sp, #28]
 8010e98:	4654      	mov	r4, sl
 8010e9a:	2000      	movs	r0, #0
 8010e9c:	f04f 0c0a 	mov.w	ip, #10
 8010ea0:	4621      	mov	r1, r4
 8010ea2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010ea6:	3b30      	subs	r3, #48	; 0x30
 8010ea8:	2b09      	cmp	r3, #9
 8010eaa:	d94e      	bls.n	8010f4a <_svfiprintf_r+0x17e>
 8010eac:	b1b0      	cbz	r0, 8010edc <_svfiprintf_r+0x110>
 8010eae:	9207      	str	r2, [sp, #28]
 8010eb0:	e014      	b.n	8010edc <_svfiprintf_r+0x110>
 8010eb2:	eba0 0308 	sub.w	r3, r0, r8
 8010eb6:	fa09 f303 	lsl.w	r3, r9, r3
 8010eba:	4313      	orrs	r3, r2
 8010ebc:	9304      	str	r3, [sp, #16]
 8010ebe:	46a2      	mov	sl, r4
 8010ec0:	e7d2      	b.n	8010e68 <_svfiprintf_r+0x9c>
 8010ec2:	9b03      	ldr	r3, [sp, #12]
 8010ec4:	1d19      	adds	r1, r3, #4
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	9103      	str	r1, [sp, #12]
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	bfbb      	ittet	lt
 8010ece:	425b      	neglt	r3, r3
 8010ed0:	f042 0202 	orrlt.w	r2, r2, #2
 8010ed4:	9307      	strge	r3, [sp, #28]
 8010ed6:	9307      	strlt	r3, [sp, #28]
 8010ed8:	bfb8      	it	lt
 8010eda:	9204      	strlt	r2, [sp, #16]
 8010edc:	7823      	ldrb	r3, [r4, #0]
 8010ede:	2b2e      	cmp	r3, #46	; 0x2e
 8010ee0:	d10c      	bne.n	8010efc <_svfiprintf_r+0x130>
 8010ee2:	7863      	ldrb	r3, [r4, #1]
 8010ee4:	2b2a      	cmp	r3, #42	; 0x2a
 8010ee6:	d135      	bne.n	8010f54 <_svfiprintf_r+0x188>
 8010ee8:	9b03      	ldr	r3, [sp, #12]
 8010eea:	1d1a      	adds	r2, r3, #4
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	9203      	str	r2, [sp, #12]
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	bfb8      	it	lt
 8010ef4:	f04f 33ff 	movlt.w	r3, #4294967295
 8010ef8:	3402      	adds	r4, #2
 8010efa:	9305      	str	r3, [sp, #20]
 8010efc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010fc8 <_svfiprintf_r+0x1fc>
 8010f00:	7821      	ldrb	r1, [r4, #0]
 8010f02:	2203      	movs	r2, #3
 8010f04:	4650      	mov	r0, sl
 8010f06:	f7ef fa53 	bl	80003b0 <memchr>
 8010f0a:	b140      	cbz	r0, 8010f1e <_svfiprintf_r+0x152>
 8010f0c:	2340      	movs	r3, #64	; 0x40
 8010f0e:	eba0 000a 	sub.w	r0, r0, sl
 8010f12:	fa03 f000 	lsl.w	r0, r3, r0
 8010f16:	9b04      	ldr	r3, [sp, #16]
 8010f18:	4303      	orrs	r3, r0
 8010f1a:	3401      	adds	r4, #1
 8010f1c:	9304      	str	r3, [sp, #16]
 8010f1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f22:	4826      	ldr	r0, [pc, #152]	; (8010fbc <_svfiprintf_r+0x1f0>)
 8010f24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010f28:	2206      	movs	r2, #6
 8010f2a:	f7ef fa41 	bl	80003b0 <memchr>
 8010f2e:	2800      	cmp	r0, #0
 8010f30:	d038      	beq.n	8010fa4 <_svfiprintf_r+0x1d8>
 8010f32:	4b23      	ldr	r3, [pc, #140]	; (8010fc0 <_svfiprintf_r+0x1f4>)
 8010f34:	bb1b      	cbnz	r3, 8010f7e <_svfiprintf_r+0x1b2>
 8010f36:	9b03      	ldr	r3, [sp, #12]
 8010f38:	3307      	adds	r3, #7
 8010f3a:	f023 0307 	bic.w	r3, r3, #7
 8010f3e:	3308      	adds	r3, #8
 8010f40:	9303      	str	r3, [sp, #12]
 8010f42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010f44:	4433      	add	r3, r6
 8010f46:	9309      	str	r3, [sp, #36]	; 0x24
 8010f48:	e767      	b.n	8010e1a <_svfiprintf_r+0x4e>
 8010f4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8010f4e:	460c      	mov	r4, r1
 8010f50:	2001      	movs	r0, #1
 8010f52:	e7a5      	b.n	8010ea0 <_svfiprintf_r+0xd4>
 8010f54:	2300      	movs	r3, #0
 8010f56:	3401      	adds	r4, #1
 8010f58:	9305      	str	r3, [sp, #20]
 8010f5a:	4619      	mov	r1, r3
 8010f5c:	f04f 0c0a 	mov.w	ip, #10
 8010f60:	4620      	mov	r0, r4
 8010f62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010f66:	3a30      	subs	r2, #48	; 0x30
 8010f68:	2a09      	cmp	r2, #9
 8010f6a:	d903      	bls.n	8010f74 <_svfiprintf_r+0x1a8>
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d0c5      	beq.n	8010efc <_svfiprintf_r+0x130>
 8010f70:	9105      	str	r1, [sp, #20]
 8010f72:	e7c3      	b.n	8010efc <_svfiprintf_r+0x130>
 8010f74:	fb0c 2101 	mla	r1, ip, r1, r2
 8010f78:	4604      	mov	r4, r0
 8010f7a:	2301      	movs	r3, #1
 8010f7c:	e7f0      	b.n	8010f60 <_svfiprintf_r+0x194>
 8010f7e:	ab03      	add	r3, sp, #12
 8010f80:	9300      	str	r3, [sp, #0]
 8010f82:	462a      	mov	r2, r5
 8010f84:	4b0f      	ldr	r3, [pc, #60]	; (8010fc4 <_svfiprintf_r+0x1f8>)
 8010f86:	a904      	add	r1, sp, #16
 8010f88:	4638      	mov	r0, r7
 8010f8a:	f7fc fb41 	bl	800d610 <_printf_float>
 8010f8e:	1c42      	adds	r2, r0, #1
 8010f90:	4606      	mov	r6, r0
 8010f92:	d1d6      	bne.n	8010f42 <_svfiprintf_r+0x176>
 8010f94:	89ab      	ldrh	r3, [r5, #12]
 8010f96:	065b      	lsls	r3, r3, #25
 8010f98:	f53f af2c 	bmi.w	8010df4 <_svfiprintf_r+0x28>
 8010f9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010f9e:	b01d      	add	sp, #116	; 0x74
 8010fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fa4:	ab03      	add	r3, sp, #12
 8010fa6:	9300      	str	r3, [sp, #0]
 8010fa8:	462a      	mov	r2, r5
 8010faa:	4b06      	ldr	r3, [pc, #24]	; (8010fc4 <_svfiprintf_r+0x1f8>)
 8010fac:	a904      	add	r1, sp, #16
 8010fae:	4638      	mov	r0, r7
 8010fb0:	f7fc fdba 	bl	800db28 <_printf_i>
 8010fb4:	e7eb      	b.n	8010f8e <_svfiprintf_r+0x1c2>
 8010fb6:	bf00      	nop
 8010fb8:	08014e74 	.word	0x08014e74
 8010fbc:	08014e7e 	.word	0x08014e7e
 8010fc0:	0800d611 	.word	0x0800d611
 8010fc4:	08010d15 	.word	0x08010d15
 8010fc8:	08014e7a 	.word	0x08014e7a
 8010fcc:	00000000 	.word	0x00000000

08010fd0 <nan>:
 8010fd0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010fd8 <nan+0x8>
 8010fd4:	4770      	bx	lr
 8010fd6:	bf00      	nop
 8010fd8:	00000000 	.word	0x00000000
 8010fdc:	7ff80000 	.word	0x7ff80000

08010fe0 <_sbrk_r>:
 8010fe0:	b538      	push	{r3, r4, r5, lr}
 8010fe2:	4d06      	ldr	r5, [pc, #24]	; (8010ffc <_sbrk_r+0x1c>)
 8010fe4:	2300      	movs	r3, #0
 8010fe6:	4604      	mov	r4, r0
 8010fe8:	4608      	mov	r0, r1
 8010fea:	602b      	str	r3, [r5, #0]
 8010fec:	f7f0 fcb0 	bl	8001950 <_sbrk>
 8010ff0:	1c43      	adds	r3, r0, #1
 8010ff2:	d102      	bne.n	8010ffa <_sbrk_r+0x1a>
 8010ff4:	682b      	ldr	r3, [r5, #0]
 8010ff6:	b103      	cbz	r3, 8010ffa <_sbrk_r+0x1a>
 8010ff8:	6023      	str	r3, [r4, #0]
 8010ffa:	bd38      	pop	{r3, r4, r5, pc}
 8010ffc:	24004a54 	.word	0x24004a54

08011000 <strncmp>:
 8011000:	b510      	push	{r4, lr}
 8011002:	b17a      	cbz	r2, 8011024 <strncmp+0x24>
 8011004:	4603      	mov	r3, r0
 8011006:	3901      	subs	r1, #1
 8011008:	1884      	adds	r4, r0, r2
 801100a:	f813 0b01 	ldrb.w	r0, [r3], #1
 801100e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8011012:	4290      	cmp	r0, r2
 8011014:	d101      	bne.n	801101a <strncmp+0x1a>
 8011016:	42a3      	cmp	r3, r4
 8011018:	d101      	bne.n	801101e <strncmp+0x1e>
 801101a:	1a80      	subs	r0, r0, r2
 801101c:	bd10      	pop	{r4, pc}
 801101e:	2800      	cmp	r0, #0
 8011020:	d1f3      	bne.n	801100a <strncmp+0xa>
 8011022:	e7fa      	b.n	801101a <strncmp+0x1a>
 8011024:	4610      	mov	r0, r2
 8011026:	e7f9      	b.n	801101c <strncmp+0x1c>

08011028 <__ascii_wctomb>:
 8011028:	b149      	cbz	r1, 801103e <__ascii_wctomb+0x16>
 801102a:	2aff      	cmp	r2, #255	; 0xff
 801102c:	bf85      	ittet	hi
 801102e:	238a      	movhi	r3, #138	; 0x8a
 8011030:	6003      	strhi	r3, [r0, #0]
 8011032:	700a      	strbls	r2, [r1, #0]
 8011034:	f04f 30ff 	movhi.w	r0, #4294967295
 8011038:	bf98      	it	ls
 801103a:	2001      	movls	r0, #1
 801103c:	4770      	bx	lr
 801103e:	4608      	mov	r0, r1
 8011040:	4770      	bx	lr
	...

08011044 <__assert_func>:
 8011044:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011046:	4614      	mov	r4, r2
 8011048:	461a      	mov	r2, r3
 801104a:	4b09      	ldr	r3, [pc, #36]	; (8011070 <__assert_func+0x2c>)
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	4605      	mov	r5, r0
 8011050:	68d8      	ldr	r0, [r3, #12]
 8011052:	b14c      	cbz	r4, 8011068 <__assert_func+0x24>
 8011054:	4b07      	ldr	r3, [pc, #28]	; (8011074 <__assert_func+0x30>)
 8011056:	9100      	str	r1, [sp, #0]
 8011058:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801105c:	4906      	ldr	r1, [pc, #24]	; (8011078 <__assert_func+0x34>)
 801105e:	462b      	mov	r3, r5
 8011060:	f000 f80e 	bl	8011080 <fiprintf>
 8011064:	f000 fa8c 	bl	8011580 <abort>
 8011068:	4b04      	ldr	r3, [pc, #16]	; (801107c <__assert_func+0x38>)
 801106a:	461c      	mov	r4, r3
 801106c:	e7f3      	b.n	8011056 <__assert_func+0x12>
 801106e:	bf00      	nop
 8011070:	24000014 	.word	0x24000014
 8011074:	08014e85 	.word	0x08014e85
 8011078:	08014e92 	.word	0x08014e92
 801107c:	08014ec0 	.word	0x08014ec0

08011080 <fiprintf>:
 8011080:	b40e      	push	{r1, r2, r3}
 8011082:	b503      	push	{r0, r1, lr}
 8011084:	4601      	mov	r1, r0
 8011086:	ab03      	add	r3, sp, #12
 8011088:	4805      	ldr	r0, [pc, #20]	; (80110a0 <fiprintf+0x20>)
 801108a:	f853 2b04 	ldr.w	r2, [r3], #4
 801108e:	6800      	ldr	r0, [r0, #0]
 8011090:	9301      	str	r3, [sp, #4]
 8011092:	f000 f885 	bl	80111a0 <_vfiprintf_r>
 8011096:	b002      	add	sp, #8
 8011098:	f85d eb04 	ldr.w	lr, [sp], #4
 801109c:	b003      	add	sp, #12
 801109e:	4770      	bx	lr
 80110a0:	24000014 	.word	0x24000014

080110a4 <memmove>:
 80110a4:	4288      	cmp	r0, r1
 80110a6:	b510      	push	{r4, lr}
 80110a8:	eb01 0402 	add.w	r4, r1, r2
 80110ac:	d902      	bls.n	80110b4 <memmove+0x10>
 80110ae:	4284      	cmp	r4, r0
 80110b0:	4623      	mov	r3, r4
 80110b2:	d807      	bhi.n	80110c4 <memmove+0x20>
 80110b4:	1e43      	subs	r3, r0, #1
 80110b6:	42a1      	cmp	r1, r4
 80110b8:	d008      	beq.n	80110cc <memmove+0x28>
 80110ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80110be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80110c2:	e7f8      	b.n	80110b6 <memmove+0x12>
 80110c4:	4402      	add	r2, r0
 80110c6:	4601      	mov	r1, r0
 80110c8:	428a      	cmp	r2, r1
 80110ca:	d100      	bne.n	80110ce <memmove+0x2a>
 80110cc:	bd10      	pop	{r4, pc}
 80110ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80110d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80110d6:	e7f7      	b.n	80110c8 <memmove+0x24>

080110d8 <__malloc_lock>:
 80110d8:	4801      	ldr	r0, [pc, #4]	; (80110e0 <__malloc_lock+0x8>)
 80110da:	f000 bc11 	b.w	8011900 <__retarget_lock_acquire_recursive>
 80110de:	bf00      	nop
 80110e0:	24004a58 	.word	0x24004a58

080110e4 <__malloc_unlock>:
 80110e4:	4801      	ldr	r0, [pc, #4]	; (80110ec <__malloc_unlock+0x8>)
 80110e6:	f000 bc0c 	b.w	8011902 <__retarget_lock_release_recursive>
 80110ea:	bf00      	nop
 80110ec:	24004a58 	.word	0x24004a58

080110f0 <_realloc_r>:
 80110f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110f4:	4680      	mov	r8, r0
 80110f6:	4614      	mov	r4, r2
 80110f8:	460e      	mov	r6, r1
 80110fa:	b921      	cbnz	r1, 8011106 <_realloc_r+0x16>
 80110fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011100:	4611      	mov	r1, r2
 8011102:	f7ff bd93 	b.w	8010c2c <_malloc_r>
 8011106:	b92a      	cbnz	r2, 8011114 <_realloc_r+0x24>
 8011108:	f7ff fd24 	bl	8010b54 <_free_r>
 801110c:	4625      	mov	r5, r4
 801110e:	4628      	mov	r0, r5
 8011110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011114:	f000 fc5c 	bl	80119d0 <_malloc_usable_size_r>
 8011118:	4284      	cmp	r4, r0
 801111a:	4607      	mov	r7, r0
 801111c:	d802      	bhi.n	8011124 <_realloc_r+0x34>
 801111e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011122:	d812      	bhi.n	801114a <_realloc_r+0x5a>
 8011124:	4621      	mov	r1, r4
 8011126:	4640      	mov	r0, r8
 8011128:	f7ff fd80 	bl	8010c2c <_malloc_r>
 801112c:	4605      	mov	r5, r0
 801112e:	2800      	cmp	r0, #0
 8011130:	d0ed      	beq.n	801110e <_realloc_r+0x1e>
 8011132:	42bc      	cmp	r4, r7
 8011134:	4622      	mov	r2, r4
 8011136:	4631      	mov	r1, r6
 8011138:	bf28      	it	cs
 801113a:	463a      	movcs	r2, r7
 801113c:	f7ff f828 	bl	8010190 <memcpy>
 8011140:	4631      	mov	r1, r6
 8011142:	4640      	mov	r0, r8
 8011144:	f7ff fd06 	bl	8010b54 <_free_r>
 8011148:	e7e1      	b.n	801110e <_realloc_r+0x1e>
 801114a:	4635      	mov	r5, r6
 801114c:	e7df      	b.n	801110e <_realloc_r+0x1e>

0801114e <__sfputc_r>:
 801114e:	6893      	ldr	r3, [r2, #8]
 8011150:	3b01      	subs	r3, #1
 8011152:	2b00      	cmp	r3, #0
 8011154:	b410      	push	{r4}
 8011156:	6093      	str	r3, [r2, #8]
 8011158:	da08      	bge.n	801116c <__sfputc_r+0x1e>
 801115a:	6994      	ldr	r4, [r2, #24]
 801115c:	42a3      	cmp	r3, r4
 801115e:	db01      	blt.n	8011164 <__sfputc_r+0x16>
 8011160:	290a      	cmp	r1, #10
 8011162:	d103      	bne.n	801116c <__sfputc_r+0x1e>
 8011164:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011168:	f000 b94a 	b.w	8011400 <__swbuf_r>
 801116c:	6813      	ldr	r3, [r2, #0]
 801116e:	1c58      	adds	r0, r3, #1
 8011170:	6010      	str	r0, [r2, #0]
 8011172:	7019      	strb	r1, [r3, #0]
 8011174:	4608      	mov	r0, r1
 8011176:	f85d 4b04 	ldr.w	r4, [sp], #4
 801117a:	4770      	bx	lr

0801117c <__sfputs_r>:
 801117c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801117e:	4606      	mov	r6, r0
 8011180:	460f      	mov	r7, r1
 8011182:	4614      	mov	r4, r2
 8011184:	18d5      	adds	r5, r2, r3
 8011186:	42ac      	cmp	r4, r5
 8011188:	d101      	bne.n	801118e <__sfputs_r+0x12>
 801118a:	2000      	movs	r0, #0
 801118c:	e007      	b.n	801119e <__sfputs_r+0x22>
 801118e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011192:	463a      	mov	r2, r7
 8011194:	4630      	mov	r0, r6
 8011196:	f7ff ffda 	bl	801114e <__sfputc_r>
 801119a:	1c43      	adds	r3, r0, #1
 801119c:	d1f3      	bne.n	8011186 <__sfputs_r+0xa>
 801119e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080111a0 <_vfiprintf_r>:
 80111a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111a4:	460d      	mov	r5, r1
 80111a6:	b09d      	sub	sp, #116	; 0x74
 80111a8:	4614      	mov	r4, r2
 80111aa:	4698      	mov	r8, r3
 80111ac:	4606      	mov	r6, r0
 80111ae:	b118      	cbz	r0, 80111b8 <_vfiprintf_r+0x18>
 80111b0:	6983      	ldr	r3, [r0, #24]
 80111b2:	b90b      	cbnz	r3, 80111b8 <_vfiprintf_r+0x18>
 80111b4:	f000 fb06 	bl	80117c4 <__sinit>
 80111b8:	4b89      	ldr	r3, [pc, #548]	; (80113e0 <_vfiprintf_r+0x240>)
 80111ba:	429d      	cmp	r5, r3
 80111bc:	d11b      	bne.n	80111f6 <_vfiprintf_r+0x56>
 80111be:	6875      	ldr	r5, [r6, #4]
 80111c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80111c2:	07d9      	lsls	r1, r3, #31
 80111c4:	d405      	bmi.n	80111d2 <_vfiprintf_r+0x32>
 80111c6:	89ab      	ldrh	r3, [r5, #12]
 80111c8:	059a      	lsls	r2, r3, #22
 80111ca:	d402      	bmi.n	80111d2 <_vfiprintf_r+0x32>
 80111cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80111ce:	f000 fb97 	bl	8011900 <__retarget_lock_acquire_recursive>
 80111d2:	89ab      	ldrh	r3, [r5, #12]
 80111d4:	071b      	lsls	r3, r3, #28
 80111d6:	d501      	bpl.n	80111dc <_vfiprintf_r+0x3c>
 80111d8:	692b      	ldr	r3, [r5, #16]
 80111da:	b9eb      	cbnz	r3, 8011218 <_vfiprintf_r+0x78>
 80111dc:	4629      	mov	r1, r5
 80111de:	4630      	mov	r0, r6
 80111e0:	f000 f960 	bl	80114a4 <__swsetup_r>
 80111e4:	b1c0      	cbz	r0, 8011218 <_vfiprintf_r+0x78>
 80111e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80111e8:	07dc      	lsls	r4, r3, #31
 80111ea:	d50e      	bpl.n	801120a <_vfiprintf_r+0x6a>
 80111ec:	f04f 30ff 	mov.w	r0, #4294967295
 80111f0:	b01d      	add	sp, #116	; 0x74
 80111f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111f6:	4b7b      	ldr	r3, [pc, #492]	; (80113e4 <_vfiprintf_r+0x244>)
 80111f8:	429d      	cmp	r5, r3
 80111fa:	d101      	bne.n	8011200 <_vfiprintf_r+0x60>
 80111fc:	68b5      	ldr	r5, [r6, #8]
 80111fe:	e7df      	b.n	80111c0 <_vfiprintf_r+0x20>
 8011200:	4b79      	ldr	r3, [pc, #484]	; (80113e8 <_vfiprintf_r+0x248>)
 8011202:	429d      	cmp	r5, r3
 8011204:	bf08      	it	eq
 8011206:	68f5      	ldreq	r5, [r6, #12]
 8011208:	e7da      	b.n	80111c0 <_vfiprintf_r+0x20>
 801120a:	89ab      	ldrh	r3, [r5, #12]
 801120c:	0598      	lsls	r0, r3, #22
 801120e:	d4ed      	bmi.n	80111ec <_vfiprintf_r+0x4c>
 8011210:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011212:	f000 fb76 	bl	8011902 <__retarget_lock_release_recursive>
 8011216:	e7e9      	b.n	80111ec <_vfiprintf_r+0x4c>
 8011218:	2300      	movs	r3, #0
 801121a:	9309      	str	r3, [sp, #36]	; 0x24
 801121c:	2320      	movs	r3, #32
 801121e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011222:	f8cd 800c 	str.w	r8, [sp, #12]
 8011226:	2330      	movs	r3, #48	; 0x30
 8011228:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80113ec <_vfiprintf_r+0x24c>
 801122c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011230:	f04f 0901 	mov.w	r9, #1
 8011234:	4623      	mov	r3, r4
 8011236:	469a      	mov	sl, r3
 8011238:	f813 2b01 	ldrb.w	r2, [r3], #1
 801123c:	b10a      	cbz	r2, 8011242 <_vfiprintf_r+0xa2>
 801123e:	2a25      	cmp	r2, #37	; 0x25
 8011240:	d1f9      	bne.n	8011236 <_vfiprintf_r+0x96>
 8011242:	ebba 0b04 	subs.w	fp, sl, r4
 8011246:	d00b      	beq.n	8011260 <_vfiprintf_r+0xc0>
 8011248:	465b      	mov	r3, fp
 801124a:	4622      	mov	r2, r4
 801124c:	4629      	mov	r1, r5
 801124e:	4630      	mov	r0, r6
 8011250:	f7ff ff94 	bl	801117c <__sfputs_r>
 8011254:	3001      	adds	r0, #1
 8011256:	f000 80aa 	beq.w	80113ae <_vfiprintf_r+0x20e>
 801125a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801125c:	445a      	add	r2, fp
 801125e:	9209      	str	r2, [sp, #36]	; 0x24
 8011260:	f89a 3000 	ldrb.w	r3, [sl]
 8011264:	2b00      	cmp	r3, #0
 8011266:	f000 80a2 	beq.w	80113ae <_vfiprintf_r+0x20e>
 801126a:	2300      	movs	r3, #0
 801126c:	f04f 32ff 	mov.w	r2, #4294967295
 8011270:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011274:	f10a 0a01 	add.w	sl, sl, #1
 8011278:	9304      	str	r3, [sp, #16]
 801127a:	9307      	str	r3, [sp, #28]
 801127c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011280:	931a      	str	r3, [sp, #104]	; 0x68
 8011282:	4654      	mov	r4, sl
 8011284:	2205      	movs	r2, #5
 8011286:	f814 1b01 	ldrb.w	r1, [r4], #1
 801128a:	4858      	ldr	r0, [pc, #352]	; (80113ec <_vfiprintf_r+0x24c>)
 801128c:	f7ef f890 	bl	80003b0 <memchr>
 8011290:	9a04      	ldr	r2, [sp, #16]
 8011292:	b9d8      	cbnz	r0, 80112cc <_vfiprintf_r+0x12c>
 8011294:	06d1      	lsls	r1, r2, #27
 8011296:	bf44      	itt	mi
 8011298:	2320      	movmi	r3, #32
 801129a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801129e:	0713      	lsls	r3, r2, #28
 80112a0:	bf44      	itt	mi
 80112a2:	232b      	movmi	r3, #43	; 0x2b
 80112a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80112a8:	f89a 3000 	ldrb.w	r3, [sl]
 80112ac:	2b2a      	cmp	r3, #42	; 0x2a
 80112ae:	d015      	beq.n	80112dc <_vfiprintf_r+0x13c>
 80112b0:	9a07      	ldr	r2, [sp, #28]
 80112b2:	4654      	mov	r4, sl
 80112b4:	2000      	movs	r0, #0
 80112b6:	f04f 0c0a 	mov.w	ip, #10
 80112ba:	4621      	mov	r1, r4
 80112bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80112c0:	3b30      	subs	r3, #48	; 0x30
 80112c2:	2b09      	cmp	r3, #9
 80112c4:	d94e      	bls.n	8011364 <_vfiprintf_r+0x1c4>
 80112c6:	b1b0      	cbz	r0, 80112f6 <_vfiprintf_r+0x156>
 80112c8:	9207      	str	r2, [sp, #28]
 80112ca:	e014      	b.n	80112f6 <_vfiprintf_r+0x156>
 80112cc:	eba0 0308 	sub.w	r3, r0, r8
 80112d0:	fa09 f303 	lsl.w	r3, r9, r3
 80112d4:	4313      	orrs	r3, r2
 80112d6:	9304      	str	r3, [sp, #16]
 80112d8:	46a2      	mov	sl, r4
 80112da:	e7d2      	b.n	8011282 <_vfiprintf_r+0xe2>
 80112dc:	9b03      	ldr	r3, [sp, #12]
 80112de:	1d19      	adds	r1, r3, #4
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	9103      	str	r1, [sp, #12]
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	bfbb      	ittet	lt
 80112e8:	425b      	neglt	r3, r3
 80112ea:	f042 0202 	orrlt.w	r2, r2, #2
 80112ee:	9307      	strge	r3, [sp, #28]
 80112f0:	9307      	strlt	r3, [sp, #28]
 80112f2:	bfb8      	it	lt
 80112f4:	9204      	strlt	r2, [sp, #16]
 80112f6:	7823      	ldrb	r3, [r4, #0]
 80112f8:	2b2e      	cmp	r3, #46	; 0x2e
 80112fa:	d10c      	bne.n	8011316 <_vfiprintf_r+0x176>
 80112fc:	7863      	ldrb	r3, [r4, #1]
 80112fe:	2b2a      	cmp	r3, #42	; 0x2a
 8011300:	d135      	bne.n	801136e <_vfiprintf_r+0x1ce>
 8011302:	9b03      	ldr	r3, [sp, #12]
 8011304:	1d1a      	adds	r2, r3, #4
 8011306:	681b      	ldr	r3, [r3, #0]
 8011308:	9203      	str	r2, [sp, #12]
 801130a:	2b00      	cmp	r3, #0
 801130c:	bfb8      	it	lt
 801130e:	f04f 33ff 	movlt.w	r3, #4294967295
 8011312:	3402      	adds	r4, #2
 8011314:	9305      	str	r3, [sp, #20]
 8011316:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80113fc <_vfiprintf_r+0x25c>
 801131a:	7821      	ldrb	r1, [r4, #0]
 801131c:	2203      	movs	r2, #3
 801131e:	4650      	mov	r0, sl
 8011320:	f7ef f846 	bl	80003b0 <memchr>
 8011324:	b140      	cbz	r0, 8011338 <_vfiprintf_r+0x198>
 8011326:	2340      	movs	r3, #64	; 0x40
 8011328:	eba0 000a 	sub.w	r0, r0, sl
 801132c:	fa03 f000 	lsl.w	r0, r3, r0
 8011330:	9b04      	ldr	r3, [sp, #16]
 8011332:	4303      	orrs	r3, r0
 8011334:	3401      	adds	r4, #1
 8011336:	9304      	str	r3, [sp, #16]
 8011338:	f814 1b01 	ldrb.w	r1, [r4], #1
 801133c:	482c      	ldr	r0, [pc, #176]	; (80113f0 <_vfiprintf_r+0x250>)
 801133e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011342:	2206      	movs	r2, #6
 8011344:	f7ef f834 	bl	80003b0 <memchr>
 8011348:	2800      	cmp	r0, #0
 801134a:	d03f      	beq.n	80113cc <_vfiprintf_r+0x22c>
 801134c:	4b29      	ldr	r3, [pc, #164]	; (80113f4 <_vfiprintf_r+0x254>)
 801134e:	bb1b      	cbnz	r3, 8011398 <_vfiprintf_r+0x1f8>
 8011350:	9b03      	ldr	r3, [sp, #12]
 8011352:	3307      	adds	r3, #7
 8011354:	f023 0307 	bic.w	r3, r3, #7
 8011358:	3308      	adds	r3, #8
 801135a:	9303      	str	r3, [sp, #12]
 801135c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801135e:	443b      	add	r3, r7
 8011360:	9309      	str	r3, [sp, #36]	; 0x24
 8011362:	e767      	b.n	8011234 <_vfiprintf_r+0x94>
 8011364:	fb0c 3202 	mla	r2, ip, r2, r3
 8011368:	460c      	mov	r4, r1
 801136a:	2001      	movs	r0, #1
 801136c:	e7a5      	b.n	80112ba <_vfiprintf_r+0x11a>
 801136e:	2300      	movs	r3, #0
 8011370:	3401      	adds	r4, #1
 8011372:	9305      	str	r3, [sp, #20]
 8011374:	4619      	mov	r1, r3
 8011376:	f04f 0c0a 	mov.w	ip, #10
 801137a:	4620      	mov	r0, r4
 801137c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011380:	3a30      	subs	r2, #48	; 0x30
 8011382:	2a09      	cmp	r2, #9
 8011384:	d903      	bls.n	801138e <_vfiprintf_r+0x1ee>
 8011386:	2b00      	cmp	r3, #0
 8011388:	d0c5      	beq.n	8011316 <_vfiprintf_r+0x176>
 801138a:	9105      	str	r1, [sp, #20]
 801138c:	e7c3      	b.n	8011316 <_vfiprintf_r+0x176>
 801138e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011392:	4604      	mov	r4, r0
 8011394:	2301      	movs	r3, #1
 8011396:	e7f0      	b.n	801137a <_vfiprintf_r+0x1da>
 8011398:	ab03      	add	r3, sp, #12
 801139a:	9300      	str	r3, [sp, #0]
 801139c:	462a      	mov	r2, r5
 801139e:	4b16      	ldr	r3, [pc, #88]	; (80113f8 <_vfiprintf_r+0x258>)
 80113a0:	a904      	add	r1, sp, #16
 80113a2:	4630      	mov	r0, r6
 80113a4:	f7fc f934 	bl	800d610 <_printf_float>
 80113a8:	4607      	mov	r7, r0
 80113aa:	1c78      	adds	r0, r7, #1
 80113ac:	d1d6      	bne.n	801135c <_vfiprintf_r+0x1bc>
 80113ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80113b0:	07d9      	lsls	r1, r3, #31
 80113b2:	d405      	bmi.n	80113c0 <_vfiprintf_r+0x220>
 80113b4:	89ab      	ldrh	r3, [r5, #12]
 80113b6:	059a      	lsls	r2, r3, #22
 80113b8:	d402      	bmi.n	80113c0 <_vfiprintf_r+0x220>
 80113ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80113bc:	f000 faa1 	bl	8011902 <__retarget_lock_release_recursive>
 80113c0:	89ab      	ldrh	r3, [r5, #12]
 80113c2:	065b      	lsls	r3, r3, #25
 80113c4:	f53f af12 	bmi.w	80111ec <_vfiprintf_r+0x4c>
 80113c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80113ca:	e711      	b.n	80111f0 <_vfiprintf_r+0x50>
 80113cc:	ab03      	add	r3, sp, #12
 80113ce:	9300      	str	r3, [sp, #0]
 80113d0:	462a      	mov	r2, r5
 80113d2:	4b09      	ldr	r3, [pc, #36]	; (80113f8 <_vfiprintf_r+0x258>)
 80113d4:	a904      	add	r1, sp, #16
 80113d6:	4630      	mov	r0, r6
 80113d8:	f7fc fba6 	bl	800db28 <_printf_i>
 80113dc:	e7e4      	b.n	80113a8 <_vfiprintf_r+0x208>
 80113de:	bf00      	nop
 80113e0:	08014ee4 	.word	0x08014ee4
 80113e4:	08014f04 	.word	0x08014f04
 80113e8:	08014ec4 	.word	0x08014ec4
 80113ec:	08014e74 	.word	0x08014e74
 80113f0:	08014e7e 	.word	0x08014e7e
 80113f4:	0800d611 	.word	0x0800d611
 80113f8:	0801117d 	.word	0x0801117d
 80113fc:	08014e7a 	.word	0x08014e7a

08011400 <__swbuf_r>:
 8011400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011402:	460e      	mov	r6, r1
 8011404:	4614      	mov	r4, r2
 8011406:	4605      	mov	r5, r0
 8011408:	b118      	cbz	r0, 8011412 <__swbuf_r+0x12>
 801140a:	6983      	ldr	r3, [r0, #24]
 801140c:	b90b      	cbnz	r3, 8011412 <__swbuf_r+0x12>
 801140e:	f000 f9d9 	bl	80117c4 <__sinit>
 8011412:	4b21      	ldr	r3, [pc, #132]	; (8011498 <__swbuf_r+0x98>)
 8011414:	429c      	cmp	r4, r3
 8011416:	d12b      	bne.n	8011470 <__swbuf_r+0x70>
 8011418:	686c      	ldr	r4, [r5, #4]
 801141a:	69a3      	ldr	r3, [r4, #24]
 801141c:	60a3      	str	r3, [r4, #8]
 801141e:	89a3      	ldrh	r3, [r4, #12]
 8011420:	071a      	lsls	r2, r3, #28
 8011422:	d52f      	bpl.n	8011484 <__swbuf_r+0x84>
 8011424:	6923      	ldr	r3, [r4, #16]
 8011426:	b36b      	cbz	r3, 8011484 <__swbuf_r+0x84>
 8011428:	6923      	ldr	r3, [r4, #16]
 801142a:	6820      	ldr	r0, [r4, #0]
 801142c:	1ac0      	subs	r0, r0, r3
 801142e:	6963      	ldr	r3, [r4, #20]
 8011430:	b2f6      	uxtb	r6, r6
 8011432:	4283      	cmp	r3, r0
 8011434:	4637      	mov	r7, r6
 8011436:	dc04      	bgt.n	8011442 <__swbuf_r+0x42>
 8011438:	4621      	mov	r1, r4
 801143a:	4628      	mov	r0, r5
 801143c:	f000 f92e 	bl	801169c <_fflush_r>
 8011440:	bb30      	cbnz	r0, 8011490 <__swbuf_r+0x90>
 8011442:	68a3      	ldr	r3, [r4, #8]
 8011444:	3b01      	subs	r3, #1
 8011446:	60a3      	str	r3, [r4, #8]
 8011448:	6823      	ldr	r3, [r4, #0]
 801144a:	1c5a      	adds	r2, r3, #1
 801144c:	6022      	str	r2, [r4, #0]
 801144e:	701e      	strb	r6, [r3, #0]
 8011450:	6963      	ldr	r3, [r4, #20]
 8011452:	3001      	adds	r0, #1
 8011454:	4283      	cmp	r3, r0
 8011456:	d004      	beq.n	8011462 <__swbuf_r+0x62>
 8011458:	89a3      	ldrh	r3, [r4, #12]
 801145a:	07db      	lsls	r3, r3, #31
 801145c:	d506      	bpl.n	801146c <__swbuf_r+0x6c>
 801145e:	2e0a      	cmp	r6, #10
 8011460:	d104      	bne.n	801146c <__swbuf_r+0x6c>
 8011462:	4621      	mov	r1, r4
 8011464:	4628      	mov	r0, r5
 8011466:	f000 f919 	bl	801169c <_fflush_r>
 801146a:	b988      	cbnz	r0, 8011490 <__swbuf_r+0x90>
 801146c:	4638      	mov	r0, r7
 801146e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011470:	4b0a      	ldr	r3, [pc, #40]	; (801149c <__swbuf_r+0x9c>)
 8011472:	429c      	cmp	r4, r3
 8011474:	d101      	bne.n	801147a <__swbuf_r+0x7a>
 8011476:	68ac      	ldr	r4, [r5, #8]
 8011478:	e7cf      	b.n	801141a <__swbuf_r+0x1a>
 801147a:	4b09      	ldr	r3, [pc, #36]	; (80114a0 <__swbuf_r+0xa0>)
 801147c:	429c      	cmp	r4, r3
 801147e:	bf08      	it	eq
 8011480:	68ec      	ldreq	r4, [r5, #12]
 8011482:	e7ca      	b.n	801141a <__swbuf_r+0x1a>
 8011484:	4621      	mov	r1, r4
 8011486:	4628      	mov	r0, r5
 8011488:	f000 f80c 	bl	80114a4 <__swsetup_r>
 801148c:	2800      	cmp	r0, #0
 801148e:	d0cb      	beq.n	8011428 <__swbuf_r+0x28>
 8011490:	f04f 37ff 	mov.w	r7, #4294967295
 8011494:	e7ea      	b.n	801146c <__swbuf_r+0x6c>
 8011496:	bf00      	nop
 8011498:	08014ee4 	.word	0x08014ee4
 801149c:	08014f04 	.word	0x08014f04
 80114a0:	08014ec4 	.word	0x08014ec4

080114a4 <__swsetup_r>:
 80114a4:	4b32      	ldr	r3, [pc, #200]	; (8011570 <__swsetup_r+0xcc>)
 80114a6:	b570      	push	{r4, r5, r6, lr}
 80114a8:	681d      	ldr	r5, [r3, #0]
 80114aa:	4606      	mov	r6, r0
 80114ac:	460c      	mov	r4, r1
 80114ae:	b125      	cbz	r5, 80114ba <__swsetup_r+0x16>
 80114b0:	69ab      	ldr	r3, [r5, #24]
 80114b2:	b913      	cbnz	r3, 80114ba <__swsetup_r+0x16>
 80114b4:	4628      	mov	r0, r5
 80114b6:	f000 f985 	bl	80117c4 <__sinit>
 80114ba:	4b2e      	ldr	r3, [pc, #184]	; (8011574 <__swsetup_r+0xd0>)
 80114bc:	429c      	cmp	r4, r3
 80114be:	d10f      	bne.n	80114e0 <__swsetup_r+0x3c>
 80114c0:	686c      	ldr	r4, [r5, #4]
 80114c2:	89a3      	ldrh	r3, [r4, #12]
 80114c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80114c8:	0719      	lsls	r1, r3, #28
 80114ca:	d42c      	bmi.n	8011526 <__swsetup_r+0x82>
 80114cc:	06dd      	lsls	r5, r3, #27
 80114ce:	d411      	bmi.n	80114f4 <__swsetup_r+0x50>
 80114d0:	2309      	movs	r3, #9
 80114d2:	6033      	str	r3, [r6, #0]
 80114d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80114d8:	81a3      	strh	r3, [r4, #12]
 80114da:	f04f 30ff 	mov.w	r0, #4294967295
 80114de:	e03e      	b.n	801155e <__swsetup_r+0xba>
 80114e0:	4b25      	ldr	r3, [pc, #148]	; (8011578 <__swsetup_r+0xd4>)
 80114e2:	429c      	cmp	r4, r3
 80114e4:	d101      	bne.n	80114ea <__swsetup_r+0x46>
 80114e6:	68ac      	ldr	r4, [r5, #8]
 80114e8:	e7eb      	b.n	80114c2 <__swsetup_r+0x1e>
 80114ea:	4b24      	ldr	r3, [pc, #144]	; (801157c <__swsetup_r+0xd8>)
 80114ec:	429c      	cmp	r4, r3
 80114ee:	bf08      	it	eq
 80114f0:	68ec      	ldreq	r4, [r5, #12]
 80114f2:	e7e6      	b.n	80114c2 <__swsetup_r+0x1e>
 80114f4:	0758      	lsls	r0, r3, #29
 80114f6:	d512      	bpl.n	801151e <__swsetup_r+0x7a>
 80114f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80114fa:	b141      	cbz	r1, 801150e <__swsetup_r+0x6a>
 80114fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011500:	4299      	cmp	r1, r3
 8011502:	d002      	beq.n	801150a <__swsetup_r+0x66>
 8011504:	4630      	mov	r0, r6
 8011506:	f7ff fb25 	bl	8010b54 <_free_r>
 801150a:	2300      	movs	r3, #0
 801150c:	6363      	str	r3, [r4, #52]	; 0x34
 801150e:	89a3      	ldrh	r3, [r4, #12]
 8011510:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011514:	81a3      	strh	r3, [r4, #12]
 8011516:	2300      	movs	r3, #0
 8011518:	6063      	str	r3, [r4, #4]
 801151a:	6923      	ldr	r3, [r4, #16]
 801151c:	6023      	str	r3, [r4, #0]
 801151e:	89a3      	ldrh	r3, [r4, #12]
 8011520:	f043 0308 	orr.w	r3, r3, #8
 8011524:	81a3      	strh	r3, [r4, #12]
 8011526:	6923      	ldr	r3, [r4, #16]
 8011528:	b94b      	cbnz	r3, 801153e <__swsetup_r+0x9a>
 801152a:	89a3      	ldrh	r3, [r4, #12]
 801152c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011530:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011534:	d003      	beq.n	801153e <__swsetup_r+0x9a>
 8011536:	4621      	mov	r1, r4
 8011538:	4630      	mov	r0, r6
 801153a:	f000 fa09 	bl	8011950 <__smakebuf_r>
 801153e:	89a0      	ldrh	r0, [r4, #12]
 8011540:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011544:	f010 0301 	ands.w	r3, r0, #1
 8011548:	d00a      	beq.n	8011560 <__swsetup_r+0xbc>
 801154a:	2300      	movs	r3, #0
 801154c:	60a3      	str	r3, [r4, #8]
 801154e:	6963      	ldr	r3, [r4, #20]
 8011550:	425b      	negs	r3, r3
 8011552:	61a3      	str	r3, [r4, #24]
 8011554:	6923      	ldr	r3, [r4, #16]
 8011556:	b943      	cbnz	r3, 801156a <__swsetup_r+0xc6>
 8011558:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801155c:	d1ba      	bne.n	80114d4 <__swsetup_r+0x30>
 801155e:	bd70      	pop	{r4, r5, r6, pc}
 8011560:	0781      	lsls	r1, r0, #30
 8011562:	bf58      	it	pl
 8011564:	6963      	ldrpl	r3, [r4, #20]
 8011566:	60a3      	str	r3, [r4, #8]
 8011568:	e7f4      	b.n	8011554 <__swsetup_r+0xb0>
 801156a:	2000      	movs	r0, #0
 801156c:	e7f7      	b.n	801155e <__swsetup_r+0xba>
 801156e:	bf00      	nop
 8011570:	24000014 	.word	0x24000014
 8011574:	08014ee4 	.word	0x08014ee4
 8011578:	08014f04 	.word	0x08014f04
 801157c:	08014ec4 	.word	0x08014ec4

08011580 <abort>:
 8011580:	b508      	push	{r3, lr}
 8011582:	2006      	movs	r0, #6
 8011584:	f000 fa54 	bl	8011a30 <raise>
 8011588:	2001      	movs	r0, #1
 801158a:	f7f0 f969 	bl	8001860 <_exit>
	...

08011590 <__sflush_r>:
 8011590:	898a      	ldrh	r2, [r1, #12]
 8011592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011596:	4605      	mov	r5, r0
 8011598:	0710      	lsls	r0, r2, #28
 801159a:	460c      	mov	r4, r1
 801159c:	d458      	bmi.n	8011650 <__sflush_r+0xc0>
 801159e:	684b      	ldr	r3, [r1, #4]
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	dc05      	bgt.n	80115b0 <__sflush_r+0x20>
 80115a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	dc02      	bgt.n	80115b0 <__sflush_r+0x20>
 80115aa:	2000      	movs	r0, #0
 80115ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80115b2:	2e00      	cmp	r6, #0
 80115b4:	d0f9      	beq.n	80115aa <__sflush_r+0x1a>
 80115b6:	2300      	movs	r3, #0
 80115b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80115bc:	682f      	ldr	r7, [r5, #0]
 80115be:	602b      	str	r3, [r5, #0]
 80115c0:	d032      	beq.n	8011628 <__sflush_r+0x98>
 80115c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80115c4:	89a3      	ldrh	r3, [r4, #12]
 80115c6:	075a      	lsls	r2, r3, #29
 80115c8:	d505      	bpl.n	80115d6 <__sflush_r+0x46>
 80115ca:	6863      	ldr	r3, [r4, #4]
 80115cc:	1ac0      	subs	r0, r0, r3
 80115ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80115d0:	b10b      	cbz	r3, 80115d6 <__sflush_r+0x46>
 80115d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80115d4:	1ac0      	subs	r0, r0, r3
 80115d6:	2300      	movs	r3, #0
 80115d8:	4602      	mov	r2, r0
 80115da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80115dc:	6a21      	ldr	r1, [r4, #32]
 80115de:	4628      	mov	r0, r5
 80115e0:	47b0      	blx	r6
 80115e2:	1c43      	adds	r3, r0, #1
 80115e4:	89a3      	ldrh	r3, [r4, #12]
 80115e6:	d106      	bne.n	80115f6 <__sflush_r+0x66>
 80115e8:	6829      	ldr	r1, [r5, #0]
 80115ea:	291d      	cmp	r1, #29
 80115ec:	d82c      	bhi.n	8011648 <__sflush_r+0xb8>
 80115ee:	4a2a      	ldr	r2, [pc, #168]	; (8011698 <__sflush_r+0x108>)
 80115f0:	40ca      	lsrs	r2, r1
 80115f2:	07d6      	lsls	r6, r2, #31
 80115f4:	d528      	bpl.n	8011648 <__sflush_r+0xb8>
 80115f6:	2200      	movs	r2, #0
 80115f8:	6062      	str	r2, [r4, #4]
 80115fa:	04d9      	lsls	r1, r3, #19
 80115fc:	6922      	ldr	r2, [r4, #16]
 80115fe:	6022      	str	r2, [r4, #0]
 8011600:	d504      	bpl.n	801160c <__sflush_r+0x7c>
 8011602:	1c42      	adds	r2, r0, #1
 8011604:	d101      	bne.n	801160a <__sflush_r+0x7a>
 8011606:	682b      	ldr	r3, [r5, #0]
 8011608:	b903      	cbnz	r3, 801160c <__sflush_r+0x7c>
 801160a:	6560      	str	r0, [r4, #84]	; 0x54
 801160c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801160e:	602f      	str	r7, [r5, #0]
 8011610:	2900      	cmp	r1, #0
 8011612:	d0ca      	beq.n	80115aa <__sflush_r+0x1a>
 8011614:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011618:	4299      	cmp	r1, r3
 801161a:	d002      	beq.n	8011622 <__sflush_r+0x92>
 801161c:	4628      	mov	r0, r5
 801161e:	f7ff fa99 	bl	8010b54 <_free_r>
 8011622:	2000      	movs	r0, #0
 8011624:	6360      	str	r0, [r4, #52]	; 0x34
 8011626:	e7c1      	b.n	80115ac <__sflush_r+0x1c>
 8011628:	6a21      	ldr	r1, [r4, #32]
 801162a:	2301      	movs	r3, #1
 801162c:	4628      	mov	r0, r5
 801162e:	47b0      	blx	r6
 8011630:	1c41      	adds	r1, r0, #1
 8011632:	d1c7      	bne.n	80115c4 <__sflush_r+0x34>
 8011634:	682b      	ldr	r3, [r5, #0]
 8011636:	2b00      	cmp	r3, #0
 8011638:	d0c4      	beq.n	80115c4 <__sflush_r+0x34>
 801163a:	2b1d      	cmp	r3, #29
 801163c:	d001      	beq.n	8011642 <__sflush_r+0xb2>
 801163e:	2b16      	cmp	r3, #22
 8011640:	d101      	bne.n	8011646 <__sflush_r+0xb6>
 8011642:	602f      	str	r7, [r5, #0]
 8011644:	e7b1      	b.n	80115aa <__sflush_r+0x1a>
 8011646:	89a3      	ldrh	r3, [r4, #12]
 8011648:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801164c:	81a3      	strh	r3, [r4, #12]
 801164e:	e7ad      	b.n	80115ac <__sflush_r+0x1c>
 8011650:	690f      	ldr	r7, [r1, #16]
 8011652:	2f00      	cmp	r7, #0
 8011654:	d0a9      	beq.n	80115aa <__sflush_r+0x1a>
 8011656:	0793      	lsls	r3, r2, #30
 8011658:	680e      	ldr	r6, [r1, #0]
 801165a:	bf08      	it	eq
 801165c:	694b      	ldreq	r3, [r1, #20]
 801165e:	600f      	str	r7, [r1, #0]
 8011660:	bf18      	it	ne
 8011662:	2300      	movne	r3, #0
 8011664:	eba6 0807 	sub.w	r8, r6, r7
 8011668:	608b      	str	r3, [r1, #8]
 801166a:	f1b8 0f00 	cmp.w	r8, #0
 801166e:	dd9c      	ble.n	80115aa <__sflush_r+0x1a>
 8011670:	6a21      	ldr	r1, [r4, #32]
 8011672:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011674:	4643      	mov	r3, r8
 8011676:	463a      	mov	r2, r7
 8011678:	4628      	mov	r0, r5
 801167a:	47b0      	blx	r6
 801167c:	2800      	cmp	r0, #0
 801167e:	dc06      	bgt.n	801168e <__sflush_r+0xfe>
 8011680:	89a3      	ldrh	r3, [r4, #12]
 8011682:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011686:	81a3      	strh	r3, [r4, #12]
 8011688:	f04f 30ff 	mov.w	r0, #4294967295
 801168c:	e78e      	b.n	80115ac <__sflush_r+0x1c>
 801168e:	4407      	add	r7, r0
 8011690:	eba8 0800 	sub.w	r8, r8, r0
 8011694:	e7e9      	b.n	801166a <__sflush_r+0xda>
 8011696:	bf00      	nop
 8011698:	20400001 	.word	0x20400001

0801169c <_fflush_r>:
 801169c:	b538      	push	{r3, r4, r5, lr}
 801169e:	690b      	ldr	r3, [r1, #16]
 80116a0:	4605      	mov	r5, r0
 80116a2:	460c      	mov	r4, r1
 80116a4:	b913      	cbnz	r3, 80116ac <_fflush_r+0x10>
 80116a6:	2500      	movs	r5, #0
 80116a8:	4628      	mov	r0, r5
 80116aa:	bd38      	pop	{r3, r4, r5, pc}
 80116ac:	b118      	cbz	r0, 80116b6 <_fflush_r+0x1a>
 80116ae:	6983      	ldr	r3, [r0, #24]
 80116b0:	b90b      	cbnz	r3, 80116b6 <_fflush_r+0x1a>
 80116b2:	f000 f887 	bl	80117c4 <__sinit>
 80116b6:	4b14      	ldr	r3, [pc, #80]	; (8011708 <_fflush_r+0x6c>)
 80116b8:	429c      	cmp	r4, r3
 80116ba:	d11b      	bne.n	80116f4 <_fflush_r+0x58>
 80116bc:	686c      	ldr	r4, [r5, #4]
 80116be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d0ef      	beq.n	80116a6 <_fflush_r+0xa>
 80116c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80116c8:	07d0      	lsls	r0, r2, #31
 80116ca:	d404      	bmi.n	80116d6 <_fflush_r+0x3a>
 80116cc:	0599      	lsls	r1, r3, #22
 80116ce:	d402      	bmi.n	80116d6 <_fflush_r+0x3a>
 80116d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80116d2:	f000 f915 	bl	8011900 <__retarget_lock_acquire_recursive>
 80116d6:	4628      	mov	r0, r5
 80116d8:	4621      	mov	r1, r4
 80116da:	f7ff ff59 	bl	8011590 <__sflush_r>
 80116de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80116e0:	07da      	lsls	r2, r3, #31
 80116e2:	4605      	mov	r5, r0
 80116e4:	d4e0      	bmi.n	80116a8 <_fflush_r+0xc>
 80116e6:	89a3      	ldrh	r3, [r4, #12]
 80116e8:	059b      	lsls	r3, r3, #22
 80116ea:	d4dd      	bmi.n	80116a8 <_fflush_r+0xc>
 80116ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80116ee:	f000 f908 	bl	8011902 <__retarget_lock_release_recursive>
 80116f2:	e7d9      	b.n	80116a8 <_fflush_r+0xc>
 80116f4:	4b05      	ldr	r3, [pc, #20]	; (801170c <_fflush_r+0x70>)
 80116f6:	429c      	cmp	r4, r3
 80116f8:	d101      	bne.n	80116fe <_fflush_r+0x62>
 80116fa:	68ac      	ldr	r4, [r5, #8]
 80116fc:	e7df      	b.n	80116be <_fflush_r+0x22>
 80116fe:	4b04      	ldr	r3, [pc, #16]	; (8011710 <_fflush_r+0x74>)
 8011700:	429c      	cmp	r4, r3
 8011702:	bf08      	it	eq
 8011704:	68ec      	ldreq	r4, [r5, #12]
 8011706:	e7da      	b.n	80116be <_fflush_r+0x22>
 8011708:	08014ee4 	.word	0x08014ee4
 801170c:	08014f04 	.word	0x08014f04
 8011710:	08014ec4 	.word	0x08014ec4

08011714 <std>:
 8011714:	2300      	movs	r3, #0
 8011716:	b510      	push	{r4, lr}
 8011718:	4604      	mov	r4, r0
 801171a:	e9c0 3300 	strd	r3, r3, [r0]
 801171e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011722:	6083      	str	r3, [r0, #8]
 8011724:	8181      	strh	r1, [r0, #12]
 8011726:	6643      	str	r3, [r0, #100]	; 0x64
 8011728:	81c2      	strh	r2, [r0, #14]
 801172a:	6183      	str	r3, [r0, #24]
 801172c:	4619      	mov	r1, r3
 801172e:	2208      	movs	r2, #8
 8011730:	305c      	adds	r0, #92	; 0x5c
 8011732:	f7fb fed3 	bl	800d4dc <memset>
 8011736:	4b05      	ldr	r3, [pc, #20]	; (801174c <std+0x38>)
 8011738:	6263      	str	r3, [r4, #36]	; 0x24
 801173a:	4b05      	ldr	r3, [pc, #20]	; (8011750 <std+0x3c>)
 801173c:	62a3      	str	r3, [r4, #40]	; 0x28
 801173e:	4b05      	ldr	r3, [pc, #20]	; (8011754 <std+0x40>)
 8011740:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011742:	4b05      	ldr	r3, [pc, #20]	; (8011758 <std+0x44>)
 8011744:	6224      	str	r4, [r4, #32]
 8011746:	6323      	str	r3, [r4, #48]	; 0x30
 8011748:	bd10      	pop	{r4, pc}
 801174a:	bf00      	nop
 801174c:	08011a69 	.word	0x08011a69
 8011750:	08011a8b 	.word	0x08011a8b
 8011754:	08011ac3 	.word	0x08011ac3
 8011758:	08011ae7 	.word	0x08011ae7

0801175c <_cleanup_r>:
 801175c:	4901      	ldr	r1, [pc, #4]	; (8011764 <_cleanup_r+0x8>)
 801175e:	f000 b8af 	b.w	80118c0 <_fwalk_reent>
 8011762:	bf00      	nop
 8011764:	0801169d 	.word	0x0801169d

08011768 <__sfmoreglue>:
 8011768:	b570      	push	{r4, r5, r6, lr}
 801176a:	2268      	movs	r2, #104	; 0x68
 801176c:	1e4d      	subs	r5, r1, #1
 801176e:	4355      	muls	r5, r2
 8011770:	460e      	mov	r6, r1
 8011772:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011776:	f7ff fa59 	bl	8010c2c <_malloc_r>
 801177a:	4604      	mov	r4, r0
 801177c:	b140      	cbz	r0, 8011790 <__sfmoreglue+0x28>
 801177e:	2100      	movs	r1, #0
 8011780:	e9c0 1600 	strd	r1, r6, [r0]
 8011784:	300c      	adds	r0, #12
 8011786:	60a0      	str	r0, [r4, #8]
 8011788:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801178c:	f7fb fea6 	bl	800d4dc <memset>
 8011790:	4620      	mov	r0, r4
 8011792:	bd70      	pop	{r4, r5, r6, pc}

08011794 <__sfp_lock_acquire>:
 8011794:	4801      	ldr	r0, [pc, #4]	; (801179c <__sfp_lock_acquire+0x8>)
 8011796:	f000 b8b3 	b.w	8011900 <__retarget_lock_acquire_recursive>
 801179a:	bf00      	nop
 801179c:	24004a59 	.word	0x24004a59

080117a0 <__sfp_lock_release>:
 80117a0:	4801      	ldr	r0, [pc, #4]	; (80117a8 <__sfp_lock_release+0x8>)
 80117a2:	f000 b8ae 	b.w	8011902 <__retarget_lock_release_recursive>
 80117a6:	bf00      	nop
 80117a8:	24004a59 	.word	0x24004a59

080117ac <__sinit_lock_acquire>:
 80117ac:	4801      	ldr	r0, [pc, #4]	; (80117b4 <__sinit_lock_acquire+0x8>)
 80117ae:	f000 b8a7 	b.w	8011900 <__retarget_lock_acquire_recursive>
 80117b2:	bf00      	nop
 80117b4:	24004a5a 	.word	0x24004a5a

080117b8 <__sinit_lock_release>:
 80117b8:	4801      	ldr	r0, [pc, #4]	; (80117c0 <__sinit_lock_release+0x8>)
 80117ba:	f000 b8a2 	b.w	8011902 <__retarget_lock_release_recursive>
 80117be:	bf00      	nop
 80117c0:	24004a5a 	.word	0x24004a5a

080117c4 <__sinit>:
 80117c4:	b510      	push	{r4, lr}
 80117c6:	4604      	mov	r4, r0
 80117c8:	f7ff fff0 	bl	80117ac <__sinit_lock_acquire>
 80117cc:	69a3      	ldr	r3, [r4, #24]
 80117ce:	b11b      	cbz	r3, 80117d8 <__sinit+0x14>
 80117d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80117d4:	f7ff bff0 	b.w	80117b8 <__sinit_lock_release>
 80117d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80117dc:	6523      	str	r3, [r4, #80]	; 0x50
 80117de:	4b13      	ldr	r3, [pc, #76]	; (801182c <__sinit+0x68>)
 80117e0:	4a13      	ldr	r2, [pc, #76]	; (8011830 <__sinit+0x6c>)
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80117e6:	42a3      	cmp	r3, r4
 80117e8:	bf04      	itt	eq
 80117ea:	2301      	moveq	r3, #1
 80117ec:	61a3      	streq	r3, [r4, #24]
 80117ee:	4620      	mov	r0, r4
 80117f0:	f000 f820 	bl	8011834 <__sfp>
 80117f4:	6060      	str	r0, [r4, #4]
 80117f6:	4620      	mov	r0, r4
 80117f8:	f000 f81c 	bl	8011834 <__sfp>
 80117fc:	60a0      	str	r0, [r4, #8]
 80117fe:	4620      	mov	r0, r4
 8011800:	f000 f818 	bl	8011834 <__sfp>
 8011804:	2200      	movs	r2, #0
 8011806:	60e0      	str	r0, [r4, #12]
 8011808:	2104      	movs	r1, #4
 801180a:	6860      	ldr	r0, [r4, #4]
 801180c:	f7ff ff82 	bl	8011714 <std>
 8011810:	68a0      	ldr	r0, [r4, #8]
 8011812:	2201      	movs	r2, #1
 8011814:	2109      	movs	r1, #9
 8011816:	f7ff ff7d 	bl	8011714 <std>
 801181a:	68e0      	ldr	r0, [r4, #12]
 801181c:	2202      	movs	r2, #2
 801181e:	2112      	movs	r1, #18
 8011820:	f7ff ff78 	bl	8011714 <std>
 8011824:	2301      	movs	r3, #1
 8011826:	61a3      	str	r3, [r4, #24]
 8011828:	e7d2      	b.n	80117d0 <__sinit+0xc>
 801182a:	bf00      	nop
 801182c:	08014a80 	.word	0x08014a80
 8011830:	0801175d 	.word	0x0801175d

08011834 <__sfp>:
 8011834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011836:	4607      	mov	r7, r0
 8011838:	f7ff ffac 	bl	8011794 <__sfp_lock_acquire>
 801183c:	4b1e      	ldr	r3, [pc, #120]	; (80118b8 <__sfp+0x84>)
 801183e:	681e      	ldr	r6, [r3, #0]
 8011840:	69b3      	ldr	r3, [r6, #24]
 8011842:	b913      	cbnz	r3, 801184a <__sfp+0x16>
 8011844:	4630      	mov	r0, r6
 8011846:	f7ff ffbd 	bl	80117c4 <__sinit>
 801184a:	3648      	adds	r6, #72	; 0x48
 801184c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011850:	3b01      	subs	r3, #1
 8011852:	d503      	bpl.n	801185c <__sfp+0x28>
 8011854:	6833      	ldr	r3, [r6, #0]
 8011856:	b30b      	cbz	r3, 801189c <__sfp+0x68>
 8011858:	6836      	ldr	r6, [r6, #0]
 801185a:	e7f7      	b.n	801184c <__sfp+0x18>
 801185c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011860:	b9d5      	cbnz	r5, 8011898 <__sfp+0x64>
 8011862:	4b16      	ldr	r3, [pc, #88]	; (80118bc <__sfp+0x88>)
 8011864:	60e3      	str	r3, [r4, #12]
 8011866:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801186a:	6665      	str	r5, [r4, #100]	; 0x64
 801186c:	f000 f847 	bl	80118fe <__retarget_lock_init_recursive>
 8011870:	f7ff ff96 	bl	80117a0 <__sfp_lock_release>
 8011874:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011878:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801187c:	6025      	str	r5, [r4, #0]
 801187e:	61a5      	str	r5, [r4, #24]
 8011880:	2208      	movs	r2, #8
 8011882:	4629      	mov	r1, r5
 8011884:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011888:	f7fb fe28 	bl	800d4dc <memset>
 801188c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011890:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011894:	4620      	mov	r0, r4
 8011896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011898:	3468      	adds	r4, #104	; 0x68
 801189a:	e7d9      	b.n	8011850 <__sfp+0x1c>
 801189c:	2104      	movs	r1, #4
 801189e:	4638      	mov	r0, r7
 80118a0:	f7ff ff62 	bl	8011768 <__sfmoreglue>
 80118a4:	4604      	mov	r4, r0
 80118a6:	6030      	str	r0, [r6, #0]
 80118a8:	2800      	cmp	r0, #0
 80118aa:	d1d5      	bne.n	8011858 <__sfp+0x24>
 80118ac:	f7ff ff78 	bl	80117a0 <__sfp_lock_release>
 80118b0:	230c      	movs	r3, #12
 80118b2:	603b      	str	r3, [r7, #0]
 80118b4:	e7ee      	b.n	8011894 <__sfp+0x60>
 80118b6:	bf00      	nop
 80118b8:	08014a80 	.word	0x08014a80
 80118bc:	ffff0001 	.word	0xffff0001

080118c0 <_fwalk_reent>:
 80118c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80118c4:	4606      	mov	r6, r0
 80118c6:	4688      	mov	r8, r1
 80118c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80118cc:	2700      	movs	r7, #0
 80118ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80118d2:	f1b9 0901 	subs.w	r9, r9, #1
 80118d6:	d505      	bpl.n	80118e4 <_fwalk_reent+0x24>
 80118d8:	6824      	ldr	r4, [r4, #0]
 80118da:	2c00      	cmp	r4, #0
 80118dc:	d1f7      	bne.n	80118ce <_fwalk_reent+0xe>
 80118de:	4638      	mov	r0, r7
 80118e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80118e4:	89ab      	ldrh	r3, [r5, #12]
 80118e6:	2b01      	cmp	r3, #1
 80118e8:	d907      	bls.n	80118fa <_fwalk_reent+0x3a>
 80118ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80118ee:	3301      	adds	r3, #1
 80118f0:	d003      	beq.n	80118fa <_fwalk_reent+0x3a>
 80118f2:	4629      	mov	r1, r5
 80118f4:	4630      	mov	r0, r6
 80118f6:	47c0      	blx	r8
 80118f8:	4307      	orrs	r7, r0
 80118fa:	3568      	adds	r5, #104	; 0x68
 80118fc:	e7e9      	b.n	80118d2 <_fwalk_reent+0x12>

080118fe <__retarget_lock_init_recursive>:
 80118fe:	4770      	bx	lr

08011900 <__retarget_lock_acquire_recursive>:
 8011900:	4770      	bx	lr

08011902 <__retarget_lock_release_recursive>:
 8011902:	4770      	bx	lr

08011904 <__swhatbuf_r>:
 8011904:	b570      	push	{r4, r5, r6, lr}
 8011906:	460e      	mov	r6, r1
 8011908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801190c:	2900      	cmp	r1, #0
 801190e:	b096      	sub	sp, #88	; 0x58
 8011910:	4614      	mov	r4, r2
 8011912:	461d      	mov	r5, r3
 8011914:	da08      	bge.n	8011928 <__swhatbuf_r+0x24>
 8011916:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801191a:	2200      	movs	r2, #0
 801191c:	602a      	str	r2, [r5, #0]
 801191e:	061a      	lsls	r2, r3, #24
 8011920:	d410      	bmi.n	8011944 <__swhatbuf_r+0x40>
 8011922:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011926:	e00e      	b.n	8011946 <__swhatbuf_r+0x42>
 8011928:	466a      	mov	r2, sp
 801192a:	f000 f903 	bl	8011b34 <_fstat_r>
 801192e:	2800      	cmp	r0, #0
 8011930:	dbf1      	blt.n	8011916 <__swhatbuf_r+0x12>
 8011932:	9a01      	ldr	r2, [sp, #4]
 8011934:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011938:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801193c:	425a      	negs	r2, r3
 801193e:	415a      	adcs	r2, r3
 8011940:	602a      	str	r2, [r5, #0]
 8011942:	e7ee      	b.n	8011922 <__swhatbuf_r+0x1e>
 8011944:	2340      	movs	r3, #64	; 0x40
 8011946:	2000      	movs	r0, #0
 8011948:	6023      	str	r3, [r4, #0]
 801194a:	b016      	add	sp, #88	; 0x58
 801194c:	bd70      	pop	{r4, r5, r6, pc}
	...

08011950 <__smakebuf_r>:
 8011950:	898b      	ldrh	r3, [r1, #12]
 8011952:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011954:	079d      	lsls	r5, r3, #30
 8011956:	4606      	mov	r6, r0
 8011958:	460c      	mov	r4, r1
 801195a:	d507      	bpl.n	801196c <__smakebuf_r+0x1c>
 801195c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011960:	6023      	str	r3, [r4, #0]
 8011962:	6123      	str	r3, [r4, #16]
 8011964:	2301      	movs	r3, #1
 8011966:	6163      	str	r3, [r4, #20]
 8011968:	b002      	add	sp, #8
 801196a:	bd70      	pop	{r4, r5, r6, pc}
 801196c:	ab01      	add	r3, sp, #4
 801196e:	466a      	mov	r2, sp
 8011970:	f7ff ffc8 	bl	8011904 <__swhatbuf_r>
 8011974:	9900      	ldr	r1, [sp, #0]
 8011976:	4605      	mov	r5, r0
 8011978:	4630      	mov	r0, r6
 801197a:	f7ff f957 	bl	8010c2c <_malloc_r>
 801197e:	b948      	cbnz	r0, 8011994 <__smakebuf_r+0x44>
 8011980:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011984:	059a      	lsls	r2, r3, #22
 8011986:	d4ef      	bmi.n	8011968 <__smakebuf_r+0x18>
 8011988:	f023 0303 	bic.w	r3, r3, #3
 801198c:	f043 0302 	orr.w	r3, r3, #2
 8011990:	81a3      	strh	r3, [r4, #12]
 8011992:	e7e3      	b.n	801195c <__smakebuf_r+0xc>
 8011994:	4b0d      	ldr	r3, [pc, #52]	; (80119cc <__smakebuf_r+0x7c>)
 8011996:	62b3      	str	r3, [r6, #40]	; 0x28
 8011998:	89a3      	ldrh	r3, [r4, #12]
 801199a:	6020      	str	r0, [r4, #0]
 801199c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80119a0:	81a3      	strh	r3, [r4, #12]
 80119a2:	9b00      	ldr	r3, [sp, #0]
 80119a4:	6163      	str	r3, [r4, #20]
 80119a6:	9b01      	ldr	r3, [sp, #4]
 80119a8:	6120      	str	r0, [r4, #16]
 80119aa:	b15b      	cbz	r3, 80119c4 <__smakebuf_r+0x74>
 80119ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80119b0:	4630      	mov	r0, r6
 80119b2:	f000 f8d1 	bl	8011b58 <_isatty_r>
 80119b6:	b128      	cbz	r0, 80119c4 <__smakebuf_r+0x74>
 80119b8:	89a3      	ldrh	r3, [r4, #12]
 80119ba:	f023 0303 	bic.w	r3, r3, #3
 80119be:	f043 0301 	orr.w	r3, r3, #1
 80119c2:	81a3      	strh	r3, [r4, #12]
 80119c4:	89a0      	ldrh	r0, [r4, #12]
 80119c6:	4305      	orrs	r5, r0
 80119c8:	81a5      	strh	r5, [r4, #12]
 80119ca:	e7cd      	b.n	8011968 <__smakebuf_r+0x18>
 80119cc:	0801175d 	.word	0x0801175d

080119d0 <_malloc_usable_size_r>:
 80119d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80119d4:	1f18      	subs	r0, r3, #4
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	bfbc      	itt	lt
 80119da:	580b      	ldrlt	r3, [r1, r0]
 80119dc:	18c0      	addlt	r0, r0, r3
 80119de:	4770      	bx	lr

080119e0 <_raise_r>:
 80119e0:	291f      	cmp	r1, #31
 80119e2:	b538      	push	{r3, r4, r5, lr}
 80119e4:	4604      	mov	r4, r0
 80119e6:	460d      	mov	r5, r1
 80119e8:	d904      	bls.n	80119f4 <_raise_r+0x14>
 80119ea:	2316      	movs	r3, #22
 80119ec:	6003      	str	r3, [r0, #0]
 80119ee:	f04f 30ff 	mov.w	r0, #4294967295
 80119f2:	bd38      	pop	{r3, r4, r5, pc}
 80119f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80119f6:	b112      	cbz	r2, 80119fe <_raise_r+0x1e>
 80119f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80119fc:	b94b      	cbnz	r3, 8011a12 <_raise_r+0x32>
 80119fe:	4620      	mov	r0, r4
 8011a00:	f000 f830 	bl	8011a64 <_getpid_r>
 8011a04:	462a      	mov	r2, r5
 8011a06:	4601      	mov	r1, r0
 8011a08:	4620      	mov	r0, r4
 8011a0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011a0e:	f000 b817 	b.w	8011a40 <_kill_r>
 8011a12:	2b01      	cmp	r3, #1
 8011a14:	d00a      	beq.n	8011a2c <_raise_r+0x4c>
 8011a16:	1c59      	adds	r1, r3, #1
 8011a18:	d103      	bne.n	8011a22 <_raise_r+0x42>
 8011a1a:	2316      	movs	r3, #22
 8011a1c:	6003      	str	r3, [r0, #0]
 8011a1e:	2001      	movs	r0, #1
 8011a20:	e7e7      	b.n	80119f2 <_raise_r+0x12>
 8011a22:	2400      	movs	r4, #0
 8011a24:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011a28:	4628      	mov	r0, r5
 8011a2a:	4798      	blx	r3
 8011a2c:	2000      	movs	r0, #0
 8011a2e:	e7e0      	b.n	80119f2 <_raise_r+0x12>

08011a30 <raise>:
 8011a30:	4b02      	ldr	r3, [pc, #8]	; (8011a3c <raise+0xc>)
 8011a32:	4601      	mov	r1, r0
 8011a34:	6818      	ldr	r0, [r3, #0]
 8011a36:	f7ff bfd3 	b.w	80119e0 <_raise_r>
 8011a3a:	bf00      	nop
 8011a3c:	24000014 	.word	0x24000014

08011a40 <_kill_r>:
 8011a40:	b538      	push	{r3, r4, r5, lr}
 8011a42:	4d07      	ldr	r5, [pc, #28]	; (8011a60 <_kill_r+0x20>)
 8011a44:	2300      	movs	r3, #0
 8011a46:	4604      	mov	r4, r0
 8011a48:	4608      	mov	r0, r1
 8011a4a:	4611      	mov	r1, r2
 8011a4c:	602b      	str	r3, [r5, #0]
 8011a4e:	f7ef fef7 	bl	8001840 <_kill>
 8011a52:	1c43      	adds	r3, r0, #1
 8011a54:	d102      	bne.n	8011a5c <_kill_r+0x1c>
 8011a56:	682b      	ldr	r3, [r5, #0]
 8011a58:	b103      	cbz	r3, 8011a5c <_kill_r+0x1c>
 8011a5a:	6023      	str	r3, [r4, #0]
 8011a5c:	bd38      	pop	{r3, r4, r5, pc}
 8011a5e:	bf00      	nop
 8011a60:	24004a54 	.word	0x24004a54

08011a64 <_getpid_r>:
 8011a64:	f7ef bee4 	b.w	8001830 <_getpid>

08011a68 <__sread>:
 8011a68:	b510      	push	{r4, lr}
 8011a6a:	460c      	mov	r4, r1
 8011a6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011a70:	f000 f894 	bl	8011b9c <_read_r>
 8011a74:	2800      	cmp	r0, #0
 8011a76:	bfab      	itete	ge
 8011a78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011a7a:	89a3      	ldrhlt	r3, [r4, #12]
 8011a7c:	181b      	addge	r3, r3, r0
 8011a7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011a82:	bfac      	ite	ge
 8011a84:	6563      	strge	r3, [r4, #84]	; 0x54
 8011a86:	81a3      	strhlt	r3, [r4, #12]
 8011a88:	bd10      	pop	{r4, pc}

08011a8a <__swrite>:
 8011a8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a8e:	461f      	mov	r7, r3
 8011a90:	898b      	ldrh	r3, [r1, #12]
 8011a92:	05db      	lsls	r3, r3, #23
 8011a94:	4605      	mov	r5, r0
 8011a96:	460c      	mov	r4, r1
 8011a98:	4616      	mov	r6, r2
 8011a9a:	d505      	bpl.n	8011aa8 <__swrite+0x1e>
 8011a9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011aa0:	2302      	movs	r3, #2
 8011aa2:	2200      	movs	r2, #0
 8011aa4:	f000 f868 	bl	8011b78 <_lseek_r>
 8011aa8:	89a3      	ldrh	r3, [r4, #12]
 8011aaa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011aae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011ab2:	81a3      	strh	r3, [r4, #12]
 8011ab4:	4632      	mov	r2, r6
 8011ab6:	463b      	mov	r3, r7
 8011ab8:	4628      	mov	r0, r5
 8011aba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011abe:	f000 b817 	b.w	8011af0 <_write_r>

08011ac2 <__sseek>:
 8011ac2:	b510      	push	{r4, lr}
 8011ac4:	460c      	mov	r4, r1
 8011ac6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011aca:	f000 f855 	bl	8011b78 <_lseek_r>
 8011ace:	1c43      	adds	r3, r0, #1
 8011ad0:	89a3      	ldrh	r3, [r4, #12]
 8011ad2:	bf15      	itete	ne
 8011ad4:	6560      	strne	r0, [r4, #84]	; 0x54
 8011ad6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011ada:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011ade:	81a3      	strheq	r3, [r4, #12]
 8011ae0:	bf18      	it	ne
 8011ae2:	81a3      	strhne	r3, [r4, #12]
 8011ae4:	bd10      	pop	{r4, pc}

08011ae6 <__sclose>:
 8011ae6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011aea:	f000 b813 	b.w	8011b14 <_close_r>
	...

08011af0 <_write_r>:
 8011af0:	b538      	push	{r3, r4, r5, lr}
 8011af2:	4d07      	ldr	r5, [pc, #28]	; (8011b10 <_write_r+0x20>)
 8011af4:	4604      	mov	r4, r0
 8011af6:	4608      	mov	r0, r1
 8011af8:	4611      	mov	r1, r2
 8011afa:	2200      	movs	r2, #0
 8011afc:	602a      	str	r2, [r5, #0]
 8011afe:	461a      	mov	r2, r3
 8011b00:	f7ef fed5 	bl	80018ae <_write>
 8011b04:	1c43      	adds	r3, r0, #1
 8011b06:	d102      	bne.n	8011b0e <_write_r+0x1e>
 8011b08:	682b      	ldr	r3, [r5, #0]
 8011b0a:	b103      	cbz	r3, 8011b0e <_write_r+0x1e>
 8011b0c:	6023      	str	r3, [r4, #0]
 8011b0e:	bd38      	pop	{r3, r4, r5, pc}
 8011b10:	24004a54 	.word	0x24004a54

08011b14 <_close_r>:
 8011b14:	b538      	push	{r3, r4, r5, lr}
 8011b16:	4d06      	ldr	r5, [pc, #24]	; (8011b30 <_close_r+0x1c>)
 8011b18:	2300      	movs	r3, #0
 8011b1a:	4604      	mov	r4, r0
 8011b1c:	4608      	mov	r0, r1
 8011b1e:	602b      	str	r3, [r5, #0]
 8011b20:	f7ef fee1 	bl	80018e6 <_close>
 8011b24:	1c43      	adds	r3, r0, #1
 8011b26:	d102      	bne.n	8011b2e <_close_r+0x1a>
 8011b28:	682b      	ldr	r3, [r5, #0]
 8011b2a:	b103      	cbz	r3, 8011b2e <_close_r+0x1a>
 8011b2c:	6023      	str	r3, [r4, #0]
 8011b2e:	bd38      	pop	{r3, r4, r5, pc}
 8011b30:	24004a54 	.word	0x24004a54

08011b34 <_fstat_r>:
 8011b34:	b538      	push	{r3, r4, r5, lr}
 8011b36:	4d07      	ldr	r5, [pc, #28]	; (8011b54 <_fstat_r+0x20>)
 8011b38:	2300      	movs	r3, #0
 8011b3a:	4604      	mov	r4, r0
 8011b3c:	4608      	mov	r0, r1
 8011b3e:	4611      	mov	r1, r2
 8011b40:	602b      	str	r3, [r5, #0]
 8011b42:	f7ef fedc 	bl	80018fe <_fstat>
 8011b46:	1c43      	adds	r3, r0, #1
 8011b48:	d102      	bne.n	8011b50 <_fstat_r+0x1c>
 8011b4a:	682b      	ldr	r3, [r5, #0]
 8011b4c:	b103      	cbz	r3, 8011b50 <_fstat_r+0x1c>
 8011b4e:	6023      	str	r3, [r4, #0]
 8011b50:	bd38      	pop	{r3, r4, r5, pc}
 8011b52:	bf00      	nop
 8011b54:	24004a54 	.word	0x24004a54

08011b58 <_isatty_r>:
 8011b58:	b538      	push	{r3, r4, r5, lr}
 8011b5a:	4d06      	ldr	r5, [pc, #24]	; (8011b74 <_isatty_r+0x1c>)
 8011b5c:	2300      	movs	r3, #0
 8011b5e:	4604      	mov	r4, r0
 8011b60:	4608      	mov	r0, r1
 8011b62:	602b      	str	r3, [r5, #0]
 8011b64:	f7ef fedb 	bl	800191e <_isatty>
 8011b68:	1c43      	adds	r3, r0, #1
 8011b6a:	d102      	bne.n	8011b72 <_isatty_r+0x1a>
 8011b6c:	682b      	ldr	r3, [r5, #0]
 8011b6e:	b103      	cbz	r3, 8011b72 <_isatty_r+0x1a>
 8011b70:	6023      	str	r3, [r4, #0]
 8011b72:	bd38      	pop	{r3, r4, r5, pc}
 8011b74:	24004a54 	.word	0x24004a54

08011b78 <_lseek_r>:
 8011b78:	b538      	push	{r3, r4, r5, lr}
 8011b7a:	4d07      	ldr	r5, [pc, #28]	; (8011b98 <_lseek_r+0x20>)
 8011b7c:	4604      	mov	r4, r0
 8011b7e:	4608      	mov	r0, r1
 8011b80:	4611      	mov	r1, r2
 8011b82:	2200      	movs	r2, #0
 8011b84:	602a      	str	r2, [r5, #0]
 8011b86:	461a      	mov	r2, r3
 8011b88:	f7ef fed4 	bl	8001934 <_lseek>
 8011b8c:	1c43      	adds	r3, r0, #1
 8011b8e:	d102      	bne.n	8011b96 <_lseek_r+0x1e>
 8011b90:	682b      	ldr	r3, [r5, #0]
 8011b92:	b103      	cbz	r3, 8011b96 <_lseek_r+0x1e>
 8011b94:	6023      	str	r3, [r4, #0]
 8011b96:	bd38      	pop	{r3, r4, r5, pc}
 8011b98:	24004a54 	.word	0x24004a54

08011b9c <_read_r>:
 8011b9c:	b538      	push	{r3, r4, r5, lr}
 8011b9e:	4d07      	ldr	r5, [pc, #28]	; (8011bbc <_read_r+0x20>)
 8011ba0:	4604      	mov	r4, r0
 8011ba2:	4608      	mov	r0, r1
 8011ba4:	4611      	mov	r1, r2
 8011ba6:	2200      	movs	r2, #0
 8011ba8:	602a      	str	r2, [r5, #0]
 8011baa:	461a      	mov	r2, r3
 8011bac:	f7ef fe62 	bl	8001874 <_read>
 8011bb0:	1c43      	adds	r3, r0, #1
 8011bb2:	d102      	bne.n	8011bba <_read_r+0x1e>
 8011bb4:	682b      	ldr	r3, [r5, #0]
 8011bb6:	b103      	cbz	r3, 8011bba <_read_r+0x1e>
 8011bb8:	6023      	str	r3, [r4, #0]
 8011bba:	bd38      	pop	{r3, r4, r5, pc}
 8011bbc:	24004a54 	.word	0x24004a54

08011bc0 <sqrtf>:
 8011bc0:	b508      	push	{r3, lr}
 8011bc2:	ed2d 8b02 	vpush	{d8}
 8011bc6:	eeb0 8a40 	vmov.f32	s16, s0
 8011bca:	f000 f817 	bl	8011bfc <__ieee754_sqrtf>
 8011bce:	eeb4 8a48 	vcmp.f32	s16, s16
 8011bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bd6:	d60c      	bvs.n	8011bf2 <sqrtf+0x32>
 8011bd8:	eddf 8a07 	vldr	s17, [pc, #28]	; 8011bf8 <sqrtf+0x38>
 8011bdc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011be4:	d505      	bpl.n	8011bf2 <sqrtf+0x32>
 8011be6:	f7fb fc4f 	bl	800d488 <__errno>
 8011bea:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8011bee:	2321      	movs	r3, #33	; 0x21
 8011bf0:	6003      	str	r3, [r0, #0]
 8011bf2:	ecbd 8b02 	vpop	{d8}
 8011bf6:	bd08      	pop	{r3, pc}
 8011bf8:	00000000 	.word	0x00000000

08011bfc <__ieee754_sqrtf>:
 8011bfc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8011c00:	4770      	bx	lr
	...

08011c04 <_init>:
 8011c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c06:	bf00      	nop
 8011c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c0a:	bc08      	pop	{r3}
 8011c0c:	469e      	mov	lr, r3
 8011c0e:	4770      	bx	lr

08011c10 <_fini>:
 8011c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c12:	bf00      	nop
 8011c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c16:	bc08      	pop	{r3}
 8011c18:	469e      	mov	lr, r3
 8011c1a:	4770      	bx	lr
